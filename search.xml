<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LoRaWAN Backend Interfaces v1.0 学习 (p1)]]></title>
    <url>%2F2019%2F07%2F10%2FLoRaWAN-Backend-Interfaces-v1-0-%E5%AD%A6%E4%B9%A0-p1%2F</url>
    <content type="text"><![CDATA[本文为学习 LoRaWAN 后端接口 v1.0 文档时，顺便翻译所得。文档较长，预计分为多篇。 原文档链接 1. 介绍这份文档描述了以下服务间的标准接口和数据流： 网络服务器（Network Sever）和入网服务器（Join Server） 入网服务器（Join Server）和应用服务器（Application Server） 漫游流量路由的两个网络服务器（Network Servers) Network Server 和 Application Server 之间的接口超出本文档范围。重点关注本文档中描述的 OTAA（Over-the-Air Activation）及单终端漫游时，网络中多实体间信息流。 2. 公约本文中的关键词（”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, 以及 “OPTIONAL”）的解释如 RFC 2119 协议描述。 3. 网络参考模型（Network Reference Model）LoRaWAN 架构网络参考模型如下两图 固定终端（End-Device at home） 漫游终端（roaming End-Device） 终端（End-Device）： 终端是传感器或执行器。它是无线方式通过无线网关连入一个 LoRaWAN 网络的。终端的应用层连接到云端特定的 Application Server（简称：AS）。这个终端的所有应用层载荷（payloads）都会路由到响应的 AS。 无线网关（Radio-Gateway）： 无线网关传递所有接收到的 LoRaWAN 无线数据报到 Network Server（简称：NS）,连接使用 IP 端口。无线网关完全工作在物理层。它的职责是简单解码上行无线数据报并将数据报定向到 NS。相对地，下行时，无线网关简单处理（不解析）传递 NS 的请求报文。 网络服务器（Network Server）： NS 是终端设备连接的网络，终止于 LoRaWAN MAC 层。它是星型拓扑的中心。 NS 的一般特征： 终端地址检查 帧验证和帧计数检查 确认（Acknowledgments） 数据速率适应 响应终端设备的所有 MAC 层请求 传递上行应用数据到合适的 AS 将任何 AS 的下行消息排队到连接上网络的任何终端 在终端和 Join Servers 之间传递 Join-request（入网请求） 和 Join-accept（入网确认） 在漫游架构中，一个 NS 可能扮演三个不同的角色，这取决于终端是否处于漫游场景以及涉及的漫游类型。 Serving NS（简称：sNS）控制终端的 MAC 层。 Home NS （简称：hNS）是设备配置（Device Profile)、服务配置（Service Profile）、路由配置（Routing Profile）存储的位置。hNS 将用于入网过程中直接关联 Join Server。它连接到 AS。如果 hNS 和 sNS 分离，他们遵循漫游协议。上下行数据报在 sNS 和 hNS 间传递。 Forwarding NS（简称：fNS）管理着无线网关。当 sNS 和 fNS 分离，他们遵循漫游协议。将有一个或多个 fNS 服务于终端设备。上下行数据报在 fNS 和 sNS 间传递。 入网服务器（Join Server）： Join Server（简称：JS）处理终端设备的 OTA（Over-the-Air）激活流程。可能有许多 JS 连接到一个 NS，且一个 JS 可能连接多个 NS。 终端设备通过 Join-request 消息中的 JoinEUI 字段发信号通知 JS。每个 JS 被唯一 JoinEUI 值标识。（注意：AppEUI 存在于 LoRaWAN1.0/1.0.2（LW10，LW102） 的 Join-request 中，被重命名未 LoRaWAN1.1（LW11） 中的 JoinEUI 。术语 JoinEUI 被用于指代该规范中 LW10/LW102 终端设备上下文中的 AppEUI 。 JS 知道终端设备的 hNS 标识符，并在漫游过程中将所需信息提供给其他 NS。JS 包含所需信息处理上行入网请求帧并且生成下行入网确认帧。它也执行网络和应用程序会话密钥（session key）的派生。它将终端设备的网络密钥传送到 NS ，将应用会话密钥传送给相应的应用服务器。 为此，JS 应该（SHALL）包含其控制下的每个终端设备的如下信息： DevEUI AppKey NwkKey（仅适用于 LW11 终端设备） hNS 标识 AS 标识 一种首选网络的方法，以防多个网络可以为终端提供服务 终端设备 LoRaWAN 版本（LoRaWAN 1.0，1.0.2 或 1.1） 根密钥（root key） NwkKey 和 AppKey 仅可用于 JS 和终端设备，他们不会被发送到 NS 或 AS 。 安全配置（secure provisioning），存储和使用根密钥 NwkKey 和 AppKey 在终端设备和后端是解决方案整体安全性的内在要素。这些留待实施且超出本文档的范畴。然而，该解决方案可包括 SE （Secure Elements 安全要素） 和 HSM （Hardware Security Modules 硬件安全模块）。 这些信息实际如何编程到 JS 中超出本文档范围，可能因 JS 而异。这可以通过例如门户网站或者一组 API 来实现。 JS 和 NS 应该（SHALL）应该能够建立安全通信，提供端点身份验证（end-point authentication），完整性（integrity）和重放保护（replay protection）以及机密性（confidentiality）。JS 还应该（SHALL）能够安全地传递应用会话密钥（AppSKey）给 AS 。 JS 可以连接到多个 AS，一个 AS 可以连接到多个 JS 。 JS 和 AS 应该（SHALL）能建立安全通信，提供端点身份验证（end-point authentication），完整性（integrity）和重放保护（replay protection）以及机密性（confidentiality）。 应用服务器（Application Server）： AS 处理相关终端设备地所有应用层有效负载（payload），并为最终用户提供应用级服务。它还为连接的终端设备生成所有应用层下行链路有效载荷。 可以有多个 AS 连接到一个 NS ，也可以一个 AS 连接到许多 NS（例如通过多层网络操作终端）。一个 AS 也可以连接多个 JS 。 hNS 基于 DevEUI 路由上行链路到合适的 AS 。 除了前述的网络元素外，LoRaWAN 架构还在这些实体间定义了以下网络接口： hNS-JS：此接口用于支持 JS 和 NS 之间的入网（激活）过程。 vNS-JS：此接口用于漫游激活过程。它用于检索于终端设备关联的 hNS 和 NetID 。 ED-NS：此接口用于支持终端设备和 NS 之间的 LoRaWAN MAC 层信令和有效载荷传送。 AS-hNS：此接口用于支持应用程序有效载荷的传送以及在 AS 和 NS 之间关联元数据（meta-data）。 hNS-sNS：此接口用于支持 hNS 和 sNS 之间的漫游信令和有效载荷传递。 sNS-fNS：此接口用于支持 sNS 和 fNS 之间的漫游信令和有效载荷传递。 AS-JS：此接口用于将应用会话密钥（AppSKey）从 JS 传送到 AS 。]]></content>
      <tags>
        <tag>LoRaWAN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[setup private goproxy server]]></title>
    <url>%2F2019%2F06%2F26%2Fsetup-private-goproxy-server%2F</url>
    <content type="text"><![CDATA[上一篇已经实践了在私网环境中配置自签名的证书，并开启 https。 这一切都是为了能在私网中搭建一个方便可用的 Go 集成环境。 Go 在 1.11 版本添加了 Go Module 特性，成为官方推荐的包管理方式。详情见官方 wiki 与 go mod 同时到来的还有 goproxy ，允许使用代理的方式拉取依赖包。 介绍goproxy 解决了几个长期存在的问题： 国内网络环境下从 github 拉去依赖包速度很慢 如果开源作者删除了仓库，对应依赖包就无法找到 goproxy 代理服务会缓存依赖包版本，不需要重复下载，也不需要担心原库被删除。 有许多开放的代理服务，比如我常用的是 https://goproxy.io 只需要设置环境变量 GOPROXY=https://goproxy.io 就能享受代理的快捷。 但是公开的 goproxy 服务仅可以访问公开的仓库，对于私有项目或者私网环境，咱们还得自己建。 选型有几款不错的 goproxy 项目 gomods/athens goproxyio/goproxy goproxy/goproxy.cn 虽然 athens star 数最多，配置文件很灵活可配项很多，但是我觉得它很长一段时间都会是 beta 状态，我自己部署也不需要太多定制化。 我最后选择了 goproxyio 的项目，代码不多，也很稳定。 编译goproxyio 发布了 docker 镜像，可以很方便地使用 docker 部署 goproxy。 这里我们讲一下源码编译。其实也是相当简单，按照 README 文档做就行了。看了下 build/generate.sh 文件，发现这个项目真是相当妙，一部分代码直接‘抄’自 go 源码中的 internal 目录。 linux 下编译完成后就出现了 goproxy 执行文件。 部署上传 goproxy 执行文件到 linux 主机上，放在任意目录下。 直接 ./goproxy 运行，会在 8081 端口上开启代理服务，然后本地开发环境，配置 GOPROXY 环境变量。 假设内网 linux 主机 ip 地址是 10.0.0.1，请自行替换 ip 地址。 1export GOPROXY=http://10.0.0.1:8081 再任意 go mod 管理地项目下执行 go get ，你就能看到 goproxy 服务代你请求了目标地址。 如果你配置了 GOPATH 环境变量， goproxy 服务就会缓存到 $GOPATH/pkg/mod 下。 如果你不愿意设置 GOPATH 环境变量，也可以使用 -cacheDir 参数指定缓存目录。 如果你不想使用 8081 端口，可以使用 -listen 参数指定新的端口。 更多使用说明见 ./goproxy -h。 进程管理仅仅 nohup 的方式启动 goproxy 服务太 low 了，咱们使用 systemd 管理。 编写一个 goproxy.service 文件，放到 /etc/systemd/system/ 目录下。 假设程序在 /root/goproxy/goproxy， 请自行替换启动文件路径。 12345678910111213[Unit]Description=private goproxy serverAfter=network.target[Service]Type=simplePIDFile=/run/goproxy.pidExecStart=/root/goproxy/goproxy -cacheDir=/root/goExecStartPre=/usr/bin/rm -f /run/goproxy.pidRestart=always[Install]WantedBy=multi-user.target 关于如何编写 service 文件，我推荐一篇不错地教程 最后启动服务 1sudo service start goproxy 参考 goproxy.io How To Use Systemctl to Manage Systemd Services and Units]]></content>
      <tags>
        <tag>Go</tag>
        <tag>GOPROXY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Enable https for private network]]></title>
    <url>%2F2019%2F06%2F26%2Fenable-https-for-private-network%2F</url>
    <content type="text"><![CDATA[私网环境启用 https本文是搭建私网环境下的 go 自动集成环境的一部分。 go 项目使用 go mod 作依赖包管理，遇到一些问题。对于依赖库是保存在内网仓库的情况，拉取代码会失败，原因是 go mod 获取依赖包版本需要使用 https 请求，而自建的 git 服务没有启用 https 。 如果是传统的 gopath 依赖项目， 只需要 go get -insecure 即可绕过 https 限制，但是这里我们选择用 go mod ，一方面这是 go 官方推荐的方式，也是未来的发展趋势，另一方面是不希望依赖包放在 vendor 目录下一起提交到版本库造成源码目录过于庞大。 接下来讲一讲如何在私网中启用 https， 服务端系统以 CentOS7 为例。 环境准备为了达到实验目的，先修改本地机器的 host 文件。 web 服务运行在 192.168.20.44 的局域网 IP 的主机上添加一条虚拟的域名映射到这个 IP 。 1192.168.20.44 vcs.private.org 创建 SSL 证书创建目录12345678# 创建目录用于保存公共证书sudo mkdir /etc/ssl/certs# 创建目录用于保存私钥文件sudo mkdir /etc/ssl/private# 关键目录，设置访问权限sudo chmod 700 /etc/ssl/private 创建自签名密钥证书对1sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/selfsigned.key -out /etc/ssl/certs/selfsigned.crt 命令参数解释openssl 用于创建和管理OpenSSL证书，密钥和其他文件的基本命令行工具。 req -x509 表示我们想要使用 X.509 证书签名请求（CSR，certificate signing request）生成签名证书。 -nodes 跳过用密码保护证书的选项。 -days 365 有效期 365 天。 -newkey rsa:2048 同时生成新证书和新密钥，生成 2048 位的 RSA 密钥。 -keyout 密钥输出目录。 -out 证书输出目录。 接下来会被要求填写一些证书的基本信息，需要注意的一点是CommonName 要填写服务相关的域名或者公共 IP 地址。此处咱们填写 vcs.private.org 创建 Diffie-Hellman 组据说用于与客户端协商 PFS (Perfect Forward Secrecy)，能在私钥受损的情况下保证会话密钥不受损害。 创建要几十秒，需要稍微等一下。 1sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 这个 DH 组到底有多强大呢，等我学习后再总结下…… Orz 配置 Nginx 使用 SSL安装 Nginx12345678# 启用 EPEL 库sudo yum install epel-release# 安装sudo yum install nginx# 开启sudo systemctl start nginx# 检查状态systemctl status nginx 防火墙配置（如果未开启了防火墙，可跳过） firewalld 相关 123sudo firewall-cmd --add-service=httpsudo firewall-cmd --add-service=httpssudo firewall-cmd --runtime-to-permanent iptables 相关 12sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPTsudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT 添加 TLS/SSL 服务配置块sudo vim /etc/nginx/conf.d/ssl.conf 内容如下 1234567891011121314151617181920212223server &#123; listen 443 http2 ssl; listen [::]:443 http2 ssl; server_name vcs.private.org; ssl_certificate /etc/ssl/certs/selfsigned.crt; ssl_certificate_key /etc/ssl/private/selfsigned.key; ssl_dhparam /etc/ssl/certs/dhparam.pem; root /usr/share/nginx/html; location / &#123; &#125; error_page 404 /404.html; location = /404.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 参考这篇文章添加更多安全性配置 启用新配置先检查配置文件是否有错误 1sudo nginx -t 重载新配置 1sudo service nginx reload 测试1curl https://vcs.private.org 你会看到报错 123curl: (60) Peer's certificate issuer has been marked as not trusted by the user.More details here: http://curl.haxx.se/docs/sslcerts.html..... 更新客户端信任证书服务端启用了 https，接下来让客户端接受这个自签署的证书。 ArchLinux 签署好的 selfsigned.crt 文件复制到 /etc/ca-certificates/trust-source/anchors 目录下运行 sudo update-ca-trust， 没有任何输出即更新成功。 CentOS7 签署好的 selfsigned.crt 文件复制到 /etc/pki/ca-trust/source/anchors 目录下运行 sudo update-ca-trust extract， 没有任何输出即更新成功。 Windows10 添加比较麻烦参考这篇文章。虽然添加完成后 chrome 依旧是不接受这个证书的（应该是浏览器策略的问题），但是cmd 里 curl 验证可以通过。 客户端信任了证书之后，再次 curl 请求就能成功了。 参考 How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7 Strong SSL Security on nginx update-ca-trust Adding trusted root certificates to the server How to get HTTPS working in localhost development environment]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>https</tag>
        <tag>TLS</tag>
        <tag>CA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Try faceswap with Arch Linux]]></title>
    <url>%2F2019%2F04%2F01%2Ftry-faceswap-on-archlinux%2F</url>
    <content type="text"><![CDATA[What is faceswapSee deepfakes/faceswap Seems a little bit difficult to use it. But worth to give it a try. Make it workInstall anaconda If you don’t have yay, check this post. 1yay -S anaconda Create a conda virtual environment1conda create -n faceswap python=3.6 python3.6 is recommended here. Install Nvidia driver and cuda support1yay -S nvidia nvidia-utils cuda We need cuda-10.0 here! If not match this version. try downgrade How to downgrade?12yay -S downgradedowngrade cudnn Add cudnn to cudaDownload cuDNN-7.5 for cuda-10.0 on official site. You neet to register and login first. Then unzip the cudnn-10.0-linux-x64-v7.5.0.56.tgz file to /opt/cuda. Get faceswap source code and install it12345678git clone https://github.com/deepfakes/faceswap.gitcd faceswap# active conda virtual environmentsource activate faceswap# installpython setup.py dlib problem?You may got dlib problem when you run faceswap.1234567891011# replace blas with openblassudo pacman -S openblas# get dlib source codegit clone https://github.com/davisking/dlib.gitcd dlib# active conda virtual environmentsource activate faceswappython setup.py install play with faceswap12# try guipython faceswap.py gui Ref INSTALL.md Create virtual environments for python with conda Getting Started With NVIDIA GPU, Anaconda, TensorFlow and Keras on Arch Linux How To Downgrade A Package In Arch Linux]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
        <tag>faceswap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Arch Linux again]]></title>
    <url>%2F2019%2F03%2F31%2FInstall-Arch-Linux-again%2F</url>
    <content type="text"><![CDATA[WhatGot a new 256G nvme ssd hard drive. Install Arch Linux again. PrepareDownload latest ISO file here. Check md5 with tools. e.g. md5sum on linux. Write ISO file in your usb driver. select GPT for EFI only Plug in you usb drive and reboot into it. partition1234567891011121314151617181920212223# list all disks and partitionsfdisk -l# my new ssd is `nvme0n1`# make partition table with `cfdisk`cfisk /dev/nvme0n1# 512M EFI file system --&gt; nvme0n1p1# 218G Linux file system --&gt; nvme0n1p2# 20G swap space --&gt; nvme0n1p3# write then quit# format new partitionsmkfs.fat -F32 /dev/nvme0n1p1mkfs.ext4 /dev/nvme0n1p2mkswap /dev/nvme0n1p3swapon /dev/nvme0n1p3# mount to /mntmount /dev/nvme0n1p2 /mntmkdir -p /mnt/bootmount /dev/nvme0n1p1 /mnt/boot InstallIf your network special as China, I recommended you change pacman mirror first. 123cd /etc/pacman.dmv ./mirrorlist ./mirrorlist.bakecho 'Server = http://mirrors.163.com/archlinux/$repo/os/$arch' &gt; ./mirrorlist Then follow the pase. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# Update you pacman databasepacman -Syy# Install base and dev-basepacstrap -i /mnt base base-devel# Type enter enter enter ...# Generate fstabgenfstab -U /mnt &gt;&gt; /mnt/etc/fstab# Change rootarch-chroot /mnt# set timezone, I live in China, so I use this timezone.ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# set localtime instead of UTC time, I want my windows have same time set.hwclock --systohc -l# Install vim firstpacman -S vim# Localizationvim /etc/locale.gen# uncommit follow lines and save#en_US.UTF-8 UTF-8#zh_CN.GBK GBK#zh_CN.UTF-8 UTF-8#zh_CN.GB2312locale-gen# set default localeecho 'LANG=en_US.UTF-8' &gt; /etc/locale.conf# Networkecho HOSTNAME &gt; /etc/hostnameecho '127.0.0.1 localhost' &gt;&gt; /etc/hostsecho '::1 localhost' &gt;&gt; /etc/hostsecho '127.0.1.1 HOSTNAME.localdomain HOSTNAME' &gt;&gt;/etc/hosts# dhcpcd enablesystemctl enable dhcpcd# Initramfsmkinitcpio -p linux# set root passwordpasswd# Boot loader install intel mocro-codepacman -S intel-ucode# use grub for boot managepacman -S grub efibootmgr os-probergrub-install --efi-directory=/boot --bootloader-id=ArchLinux --recheck# If your windows boot loader in other EFI partition, you can mount the partition,# and copy `Boot` and `Microsoft` to your /boot/EFI/, otherwise, grub can not# find your windows boot loader.# set default boot on last saved onevim /etc/default/grub# GRUB_DEFAULT=saved# GRUB_SAVEDEFAULT="true"# generate grub.cfggrub-mkconfig -o /boot/grub/grub.cfg# install more appspacman -S iw wpa_supplicant dialog # wifi supportpacman -S ttf-dejavu wqy-microhei wqy-zenhei # font supportpacman -S alsa-utils # soundpacman -S dosfstools # support NTFS usb driverpacman -S zsh openssh# exit, unmount and rebootexitumount -R /mntreboot After Installcheck network1234# check if your network interfacesip link# if state is DOWN, maybe you dhcpcd not runsystemctl start dhcpcd &amp;&amp; systemctl enable dhcpcd new sudo user123456# then add a new user, my username is shankuseradd -m -g users -s /bin/zsh shank# new passord for new userpasswd shank# set new user in sudoecho 'shank ALL=(ALL) ALL' &gt; /etc/sudoers.d/shank dual video card driver12345678910# check you video cardlspci | grep VGA# found my NVIDIA GTX 1060 here# install driver for video cardpacman -S mesa vulkan-intel# pacman -S xf86-video-intel # often not recommendedpacman -S nvidiapacman -S nvidia-libglpacman -S xorg-xrandrnvidia-xconfig desktop environment1234567891011121314151617# Install an desktop managersudo pacman -S sddm# Install an desktop environmentsudo pacman -S gnome# enable the desktop managersudo systemctl enable sddm# Install NetworkManagersudo pacman -S networkmanager# enable the NetworkManagersudo systemctl enable NetworkManager# then rebootsudo reboot install yay1234sudo pacman -S gitgit clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si more apps12345678910111213141516171819sudo pacman -S \ibus ibus-qt ibus-rime \ttf-inconsolata noto-fonts-cjk \powerline-fonts ttf-font-awesome \net-tools dnsutils inetutils iproute2 \zsh terminator thunar \vlc alsa-utils deadbeef cmus telegram-desktop \goldendict mplayer \go git wget openssh unzip unrar \ntfs-3g deluge shadowsocks shadowsocks-qt5 \gnome gnome-tweaks \numix-gtk-themeyay -S numix-circle-icon-theme-git \capitaine-cursors \google-chrome \visual-studio-code-bin \foxitreader \anaconda more operationsset oh-my-zsh1sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" set anacondaDon’t set anaconda in your path, will occur many problems!So we just set alias to make it easy for activate conda environment. 123456# vim ~/.zshrcalias activate-env="source /opt/anaconda/bin/activate"alias deactivate-env="source /opt/anaconda/bin/deactivate"# ease access to condasudo ln /opt/anaconda/bin/conda /usr/bin/conda Ref Installation guide]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install PostgreSQL on CentOS7]]></title>
    <url>%2F2019%2F03%2F14%2Finstall-postgresql-on-centos7%2F</url>
    <content type="text"><![CDATA[Installation if you want install latest version check official site I will install postgres9.6 for CentOS7. default version of postgres in CentOS7 rpm is not recommanded, I need some new features in postgres9.5+. 12345sudo yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-redhat96-9.6-3.noarch.rpmsudo yum install postgresql96-server postgresql96-contrib# initialize the databasesudo postgresql96-setup initdb Config for remote accessSet listen port to wildcard 12# sudo vim /var/lib/pgsql/9.6/data/postgresql.conflisten_addresses = &apos;*&apos; Change HBA (host-based authentication) configuration 12# sudo vim /var/lib/pgsql/9.6/data/pg_hba.confhost all all 0.0.0.0/0 md5 Start server12345sudo systemctl enable postgresql-9.6sudo systemctl start postgresql-9.6# check listen portss -ant | grep 5432 Login default role12345sudo -i -u postgres# to access PostgreSQL promptpsql# for quit PostgreSQL prompt\q Create a new role1createuser --interactive My new role is rwuser Create a new database1createdb test1 Login new role12345# access PostgreSQL prompt with new rolesudo su -c "psql -d test1" - rwuser# type following command in PostgreSQL prompt\password# then set your new password You can use navicat to connect pgsql later. Reference How To Install and Use PostgreSQL on CentOS 7 Change a Password for PostgreSQL on Linux via Command Line Official install guide]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS7</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[For-Select loop in Go]]></title>
    <url>%2F2019%2F03%2F14%2Ffor-select-in-go%2F</url>
    <content type="text"><![CDATA[Simple break in for-select loop, will not break out of for loop. You should use break label. demo123456789101112131415161718192021222324252627282930313233343536package mainimport ( "fmt" "time")func main() &#123; one := time.After(time.Second * 2) two := time.After(time.Second * 4) three := time.After(time.Second * 6)out: //fmt.Println("out of for") // anything here will invoke error for &#123; fmt.Println("head") select &#123; case &lt;-one: fmt.Println("one") continue case &lt;-two: fmt.Println("two") break case &lt;-three: fmt.Println("three") break out &#125; fmt.Println("tail") &#125; //out: // break label must define before for loop fmt.Println("in the end")&#125; Playground moreBreak statement]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Solve ridiculous problem in Golang]]></title>
    <url>%2F2018%2F10%2F30%2FSolve-ridiculous-problem-in-Golang%2F</url>
    <content type="text"><![CDATA[problem12345678910panic: runtime error: invalid memory address or nil pointer dereference[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x6e2bea]goroutine 10233 [running]:.../backend.(*ActionBackend).ReceiveTXPacket(0xc42968f940) /.../backend/actionbackend.go:102 +0x2a.../backend.NewActionBackend.func1(0xc42968f940) /.../backend/actionbackend.go:45 +0x2bcreated by .../backend.NewActionBackend /.../backend/actionbackend.go:44 +0x89 solve1ulimit -n 65536 whyFirst, I try to find some logic problem in panic lines. But nothing should be modified. Then I reconigized my program need to create 3000 connection. (It’s a stress test program.) While I type this ulimit -n, it shows the file-size writing limit is 1024. So … boooom!]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install mysql on wsl]]></title>
    <url>%2F2018%2F09%2F15%2FInstall-mysql-on-wsl%2F</url>
    <content type="text"><![CDATA[How Install a distro in windows store. I got ubuntu18.04LTS here. Change sources.list backup first. 12sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo vi /etc/apt/sources.list run these commands in vi to replace url. 12:%s/archive.ubuntu.com/mirrors.163.com:%s/security.ubuntu.com/mirrors.163.com Install mysql meet some problem when install mariadb, so I change to mysql. 123sudo apt install mysql-serversudo service mysql startsudo mysql_secure_installation Adjusting User Authentication and Privileges 12345sudo mysql# after enter mysql, check which authentication method each of your MySQL user accounts use with the following command# SELECT user,authentication_string,plugin,host FROM mysql.user;ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'YourPassword';FLUSH PRIVILEGES; RefHow To Install MySQL on Ubuntu 18.04]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>WSL</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to revert Singly Linked List]]></title>
    <url>%2F2018%2F08%2F17%2FHow-to-revert-Linked-List%2F</url>
    <content type="text"><![CDATA[Here is the struct of Singly Linked List and Print method: 12345678910111213struct Link &#123; Link* next; DType data; Link(DType data) &#123; this-&gt;data = data; &#125;&#125;;void Print(Link* head) &#123; while (head != NULL) &#123; cout &lt;&lt; head-&gt;data &lt;&lt; ' '; head = head-&gt;next; &#125; cout &lt;&lt; endl;&#125; Two ways to revert the Singly Linked List. Non-Recursion version 123456789101112131415Link* Reverse(Link* head) &#123; if (head == NULL) return NULL; Link *r, *p, *q; p = head; q = head-&gt;next; head-&gt;next = NULL; while (q != NULL) &#123; r = q-&gt;next; q-&gt;next = p; p = q; q = r; &#125; return p;&#125; Recursion version 12345678910111213Link* Reverse2(Link* head, Link*&amp; nhead) &#123; nhead = NULL; if (head == NULL) return NULL; if (head-&gt;next == NULL) &#123; nhead = head; return head; &#125; Link* tail = Reverse2(head-&gt;next, nhead); tail-&gt;next = head; head-&gt;next = NULL; return head;&#125; main function &amp; result: 123456789101112131415161718192021222324int main() &#123; Link *root, *p; for (int i = 0; i &lt; 10; i++) &#123; if (i == 0) &#123; root = p = new Link(i); &#125; else &#123; p-&gt;next = new Link(i); p = p-&gt;next; &#125; &#125; Print(root); // 0 1 2 3 4 5 6 7 8 9 root = Reverse(root); Print(root); // 9 8 7 6 5 4 3 2 1 0 Link* nroot; Reverse2(root, nroot); Print(nroot); // 0 1 2 3 4 5 6 7 8 9 return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>LinkdList</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use VirtualBox to access OS on hard drive]]></title>
    <url>%2F2018%2F08%2F15%2FUse-VirtualBox-to-access-OS-on-hard-drive%2F</url>
    <content type="text"><![CDATA[What虽然已经主要在用Arch了，但是最近有朋友让我帮他改改cpp代码。代码拿过来一看，好家伙，浓浓的windows气息，没办法人家公司就是做windows桌面应用的。 那么问题来了，我不想重启电脑切换系统，还要用windows给他调代码，怎么办？ 用虚拟机吧，传统流程：新建一个虚拟机-&gt;装系统-&gt;搭开发环境-&gt;调代码(-&gt;删除虚拟机)。麻烦 How既然虚拟机也要用虚拟硬盘文件装系统，何不挂载装有系统的硬盘直接用呢？ Google一下，这是可以的。 注意：运行虚拟机的硬盘最好与虚拟机挂载系统的硬盘分开，防止未知错误；重要数据最好备份下。 下面主要按照我的实际情况讲，我电脑里双系统分在两块硬盘上，win 在 /dev/sda，linux 在 /dev/sdb，这是最理想的，互不干扰。 root 权限下运行 VirtualBox 新建一个windows虚拟机，添加虚拟硬盘时选择Do not add a virtual hard drive(不添加虚拟硬盘)，其他配置照常，然后保存。 输入以下命令创建映射真实硬盘的虚拟硬盘文件： 1sudo VBoxManage internalcommands createrawvmdk -filename "&lt;/path/to/file&gt;.vmdk" -rawdisk /dev/sda &lt;/path/to/file&gt;.vmdk换成你要保存虚拟硬盘的文件位置，例如 ~/vbox/win.vmdk。/dev/sda是我win的安装盘，你可以用sudo fdisk -l查看你的系统所在位置。以上命令是可以指定只映射某几个分区的，具体命令自己Google。 设置windows虚拟机的存储设备（Settings-&gt;Storage-&gt;Add Hard Disk-&gt;Choose existing disk），找到上一步生成的vmdk文件添加即可。 因为我的windows启动方式是EFI，所以在Settings-&gt;System中勾上Enable EFI(special OSes only)。 至此，可以启动了。 顺便使用下Linux下的gif制作器 peek Refs[Using a Physical Hard Drive with a VirtualBox VM]https://www.serverwatch.com/server-tutorials/using-a-physical-hard-drive-with-a-virtualbox-vm.html]]></content>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Downgrade vscode to 1.25.1-3]]></title>
    <url>%2F2018%2F08%2F15%2FDowngrade-vscode-to-1-25-1-3%2F</url>
    <content type="text"><![CDATA[Sunny dayHappy to update vscode to 1.26.0-2 this morning. How to update? Just type 1sudo pacman -S visual-studio-code-bin Awful user experienceThis new feature driven me upgrade to this version. But I would say it’s a bad idea. Title bar is more wide on linux. (ugly) Title text not align center on top. (too ugly) The feature on UI I can choose to ignore it. Because it’s disabled in default settings. BUT I can’t tolerate the new bug. If I try to Open Folder...[Ctrl+K Ctrl+O], the editor will crash.(OS: Arch Linux x86_64, Kernel: 4.17.14-arch1-1-ARCH, WM: i3) so I need to downgrade. How to downgradeI installed vscode via yaourt, but it’s not support downgrade option. So I google this problem. Someone said Old packages are normally kept in: /var/cache/pacman/pkg/ So check the directoy by ls -l /var/cache/pacman/pkg/visual-studio-code-*, I got this 123-rw-r--r-- 1 root root 47360116 Jul 13 18:20 /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-1-x86_64.pkg.tar.xz-rw-r--r-- 1 root root 47352676 Aug 5 02:39 /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-3-x86_64.pkg.tar.xz-rw-r--r-- 1 root root 56026160 Aug 14 18:36 /var/cache/pacman/pkg/visual-studio-code-bin-1.26.0-2-x86_64.pkg.tar.xz Soooo lucky! Just use pacman to reinstall the pkg 1sudo pacman -U /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-3-x86_64.pkg.tar.xz Awsome pacman, save my life! Refshow to downgrade via yaourt]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[screen: Cannot open your terminal '/dev/pts/1']]></title>
    <url>%2F2018%2F07%2F25%2Fscreen-Cannot-open-your-terminal-dev-pts-1%2F</url>
    <content type="text"><![CDATA[What happenedI bought a Tencent Cloud CVM to hold my DST server few days ago. Use screen to run server.sh is perfect. I login UserA to run screen session. Then, use another device to login UserB. When I use UserB to login UserA and run screen -r to continue my screen session, following error occur: 1Cannot open your terminal '/dev/pts/1' - please check. How to FixAfter login in UserB, run this to get a new tty 1script /dev/null Referencepolygun2000’s blog]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Screen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use new comment system]]></title>
    <url>%2F2018%2F07%2F18%2Fuse-new-comment-system%2F</url>
    <content type="text"><![CDATA[Hypercomments will never provide FREE service… So I change to LiveRe Looks good &amp; cool!]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>comment</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Failed to delete using Trash in vscode]]></title>
    <url>%2F2018%2F06%2F18%2FFailed-to-delete-using-Trash-in-vscode%2F</url>
    <content type="text"><![CDATA[Update on 2018-07-25EnvironmentOS: Arch linuxDesktop: i3 4.15.0.1VScode version: 1.25.1 ProblemVScode base on electron, electron will call gvfs-trash to move file to trash. If you type gvfs-trash in commandline , you may got this problem: 12This tool has been deprecated, use 'gio trash' instead.See 'gio help trash' for more info. Solveadd this to you environment: 1export ELECTRON_TRASH=gio RefsLinux: Unable to move file to trash upon delete (#13189) Old record Following method not work in i3 EnvironmentDesktop :Gnome 3.28.2VScode version: 1.24.1 ProblemWhen I want to delete file from explorer in vscode, following Error occurs: Failed to delete using the Trash. Do you want to permanently delete instead? SolveMaybe gvfs-trash not work properly. It has been deprecated in this gnome version.So open shell, install another tool for help. 12## need python installedsudo easy_install trash-cli RefsFailed to delete using Trash in Ubuntu 18.04 (#49675)Moving files to trash always fails in Kubuntu 16.04 (#22820)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Record apps I have installed on Arch]]></title>
    <url>%2F2018%2F06%2F18%2FRecord-apps-I-have-installed-on-Arch%2F</url>
    <content type="text"><![CDATA[pacman123456789101112sudo pacman -S \ibus ibus-qt ibus-rime \ttf-inconsolata noto-fonts-cjk \powerline-fonts ttf-font-awesome \net-tools dnsutils inetutils iproute2 \zsh terminator thunar \vlc alsa-utils deadbeef cmus telegram-desktop \goldendict mplayer \go git wget openssh unzip unrar \ntfs-3g deluge shadowsocks shadowsocks-qt5 \gnome gnome-tweaks \numix-gtk-theme yay1234567891011sudo pacman -S gitgit clone https://aur.archlinux.org/yay.gitcd yaymakepkg -siyay -S numix-circle-icon-theme-git \capitaine-cursors \google-chrome \visual-studio-code-bin \foxitreader \anaconda To be contine …]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install vscode on Arch Linux]]></title>
    <url>%2F2018%2F06%2F18%2FInstall-vscode-on-Arch-Linux%2F</url>
    <content type="text"><![CDATA[Method 1: official binary version (recommend)1yaourt -S visual-studio-code-bin Method 2: open source buildfirst should modify open file limit on your device. edit /etc/security/limits.conf Add following lines to the end of file 1234* hard nofile 500000* soft nofile 500000root hard nofile 500000root soft nofile 500000 Reboot (or log out and back in) switch to root user sudo su use limit -n to ensure the value is 500000 Then switch back to your user Just like su - shank Then run 1sudo yaourt vscode Then Type 4 to choose this one 124 aur/code 1.24.1-1 (143) (16.35) Microsoft Code -- The Open Source build of Visual Studio Code (vscode) reference Increase “Open Files Limit”]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install yay (or yaourt) on Arch Linux]]></title>
    <url>%2F2018%2F06%2F18%2FInstall-yaourt-on-Arch-Linux%2F</url>
    <content type="text"><![CDATA[How to install yay (another great AUR helper) Update on 2018/10/16 [Recommended] Use yay to replace yaourtIf you already got yaourt just type: 1yaourt -S yay Otherwise, you can also install by makepkg 123git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si [Deprecated]Install yaourt1sudo vim /etc/pacman.conf Then, add following lines to the end. 12[archlinuxcn]Server = http://repo.archlinuxcn.org/$arch Install the GPG key. 1sudo pacman -S archlinuxcn-keyring Finally, update and install yaourt. 1sudo pacman -Sy yaourt Done! reference]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rime默认简体中文配置]]></title>
    <url>%2F2018%2F06%2F09%2FRime%E9%BB%98%E8%AE%A4%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Rime这个输入法是很强大。 但是我对输入法的要求不高: 能输入中文；界面简洁；词汇联想别太”睿智”。 恰好这些需求Rime都很轻松的满足了，但是唯一不爽的是每次切换到Rime都默认输入繁中，再F4切换简中就很不方便。 虽然这是作者的喜好，但是我不习惯，还好文档提供了默认使用简中的配置方案。 解决方案：vim ~/.config/ibus/rime/luna_pinyin.custom.yaml 这是linux中的用户配置位置，其他系统查看这里 123456789101112# luna_pinyin.custom.yamlpatch: switches: # 注意缩进 - name: ascii_mode reset: 0 # reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态 states: [ 中文, 西文 ] # 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0 - name: full_shape states: [ 半角, 全角 ] # 而全／半角则可沿用之前方案的用法。 - name: simplification reset: 1 # 增加这一行：默认启用「繁→簡」转换。 states: [ 漢字, 汉字 ] 参考 Rime 定制指南]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArchLinux安装记录]]></title>
    <url>%2F2018%2F06%2F03%2FArchLinux%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[本教程在EFI启动的Windows10台式机上完成。 准备工作 Arch Linux 2018.06.01 iso，官网下载 USB Driver &gt; 1G Etcher 官网下载 系统安装预留空间使用 Windows 的磁盘管理工具压缩分区卷，不要格式化。(我预留的空间为60G。) U盘启动 使用Etcher将Arch安装盘写入U盘 重启电脑启动到U盘系统 你将看到 root@archiso ~ # 分区查看分区表。 1fdisk -l 记录以下分区标识。 EFI System 分区，此处以 /dev/sda1 为例。 将要安装 Arch Linux 的硬盘，此处以 /dev/sdb 为例。 找到之前预留的空间，此处以 /dev/sdb2 为例。 使用新手分区工具 cfdisk。 1cfdisk /dev/sdb 上下移动选择到 Free Space，左右移动选择到 New，分配与内存等大小的Swap分区，此处输入 8G，然后回车确认。再选择 Type，分区类型求改为 Linux swap。（当然也可以不分交换分区） 再次选择剩余的 Free Space，分出 /和/home。（因人而异，为了方便，我剩下的只分一个区，类型为 Linux filesystem） 最后选择 Write，输入 yes，再选择 Quit，退出分区工具。 再次 fdisk -l 查看新的分区表，记录新创建的分区标识。 此处以 8G的 /dev/sdb2 和 52G的 /dev/sdb4 为例。 也可以使用下面命令将新分区格式化。 12mkfs.ext4 /dev/sdb4mkswap /dev/sdb2 安装系统挂载分区1234567# Linux filesystemmount /dev/sdb4 /mnt# EFI systemmkdir -p /mnt/boot/efimount /dev/sda1 /mnt/boot/efi# Linux swapswapon /dev/sdb2 配置镜像源1234cd /etc/pacman.dmv ./mirrorlist ./mirrorlist.baktouch mirrorlistecho 'Server = http://mirrors.163.com/archlinux/$repo/os/$arch' &gt; ./mirrorlist 联网有线连接可跳过这步，无线连接使用以下命令找到Ｗi-Fi，找到并输入密码即可。 1wifi-menu 开始安装配置12345678910111213141516171819202122232425262728293031# 设置系统时间timedatectl set-ntp true# 刷新本地数据库pacman -Syy# 安装基础系统pacstrap -i /mnt base base-devel# 回车两次然后输入y之后等一会……# 生成 fstab 文件genfstab -U /mnt &gt;&gt; /mnt/etc/fstab# 切换到已安装的ArchLinuxarch-chroot /mnt# 设置时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime# 时钟设置 使用UTC会导致双系统时间不同 此处用可以用localtimehwclock --systohc -l# 网络pacman -S iw wpa_supplicant dialog# 字体pacman -S ttf-dejavu wqy-microhei wqy-zenhei# 音频pacman -S alsa-utils# vim &amp; sshpacman -S vim openssh# 引导工具pacman -S dosfstools grub efibootmgr os-probergrub-install --efi-directory=/boot/efi --bootloader-id=ArchLinux --recheckgrub-mkconfig -o /boot/grub/grub.cfg# P.S忽略执行 grub-mkconfig 下方的错误，前几行包含 Found XXX.img 就行 本地化1vim /etc/locale.gen 删除下面四句前面的# 1234#en_US.UTF-8 UTF-8#zh_CN.GBK GBK#zh_CN.UTF-8 UTF-8#zh_CN.GB2312 然后生成更新 12locale-genecho 'LANG=en_US.UTF-8' &gt; /etc/locale.conf 设置主机名 自行替换下面的 HOSTNAME 1234echo HOSTNAME &gt; /etc/hostnameecho '127.0.0.1 localhost.localdomain localhost' &gt;&gt; /etc/hostsecho '::1 localhost.localdomain localhost' &gt;&gt; /etc/hostsecho '127.0.1.1 HOSTNAME.localdomain HOSTNAME' &gt;&gt;/etc/hosts 重启123exitumount -R /mntreboot 用户设置重启进入ArchLinux，输入root，回车即可登录。 12345678910# 为root设置密码passwd root# 添加普通用户,以shank为例。useradd -m -g users -s /bin/bash shank# 设置新用户密码passwd shank# 设置sudo权限vim /etc/sudoers# 在root ALL=(ALL) ALL 下一行添加 shank ALL=(ALL) ALL# 去掉 #%wheel ALL=(ALL) ALL 前面的‘#’号 桌面环境安装显卡驱动运行下面的命令，先确定显卡型号，记下 BusID，类似 00:02.0 VGA ... 1lspci | grep VGA 双显卡会有些麻烦，参考官方文档NVIDIA_Optimus 依次运行以下命令。 12345678910# 如果没有联网，你需要先联网wifi-menu# intel显卡pacman -S xf86-video-intel# nvidia显卡pacman -S nvidia nvidia-libgl# 显示输出pacman -S xorg-xrandr# 生成配置，将位于 /etc/X11/xorg.confnvidia-xconfig 双显卡的配置先配置xorg.conf 1vim /etc/X11/xorg.conf 参照下面内容配置N卡，BusID那里N卡一般是PCI:1:0:0,之前查到的BusID为00:02.0则这里填PCI:0:2:0。 12345678910Section &quot;Module&quot; Load &quot;modesetting&quot;EndSectionSection &quot;Device&quot; Identifier &quot;nvidia&quot; Driver &quot;nvidia&quot; BusID &quot;PCI:1:0:0&quot; Option &quot;AllowEmptyInitialConfiguration&quot;EndSection 保存后，在编辑Intel.conf 1vim /etc/X11/xorg.conf.d/20-intel.conf 找下面内容修改，注意BusID按实际填写。 12345Section "Device" Identifier "intel" Driver "modesetting" BusID "PCI:0:2:0"EndSection 安装KDE桌面环境12pacman -S plasma kdebase kde-l10n-zh_cnpacman -S xf86-input-synaptics 修改 Display Manager 12echo 'xrandr --setprovideroutputsource modesetting NVIDIA-0' &gt;&gt; /usr/share/sddm/scripts/Xsetupecho 'xrandr --auto' &gt;&gt; /usr/share/sddm/scripts/Xsetup 测试是否可以进入桌面 1systemctl start sddm 桌面正常启动后123456# 设置桌面自启动sudo systemctl enable sddm# 开启桌面ＷiFi配置sudo systemctl enable NetworkManager# 启动菜单添加缺失的windows启动项（可选）sudo grub-mkconfig -o /boot/grub/grub.cfg 配置梯子安装工具1sudo pacman -S shadowsocks privoxy ss配置文件编辑配置文件。 1vim ~/ss-local.json 格式如下: 12345678910&#123; "server": "0.0.0.0", "server_port": 0000, "password": "0000", "method": "aes-256-cfb", "local_address": "127.0.0.1", "local_port": 1080, "fast_open": false, "workers": 2&#125; 移动到 /etc。 1sudo mv ~/ss-local.json /etc/ss-local.json 测试ss连接1234567# 启动sslocalsudo sunohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/log/ss-local.log &amp;# 设置临时全局代理export http_proxy="socks5://127.0.0.1:1080";export https_proxy=$http_proxy# 然后访问下Google，有返回html就成了。curl -skL www.google.com 使用gfwlist选择代理1234567891011# 获取 gfwlist2privoxy 脚本curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy# 生成 gfwlist.action 文件bash gfwlist2privoxy '127.0.0.1:1080'# 拷贝至 privoxy 配置目录cp -af gfwlist.action /etc/privoxy/# 加载 gfwlist.action 文件sudo suecho 'actionsfile gfwlist.action' &gt;&gt; /etc/privoxy/config# 启动 privoxy.service 服务systemctl start privoxy.service 验证代理切换1234567unset http_proxy https_proxy no_proxy# 设置临时变量，privoxy 默认监听端口为 8118export proxy=http://127.0.0.1:8118; export http_proxy=$proxy https_proxy=$proxy no_proxy="localhost, 127.0.0.1, ::1"# 可以看到返回值，说明代理成功curl -skL www.google.com# 查看当前IP，若是墙内IP说明gfwlist配置成功curl -4skL http://ip.chinaz.com/getip.aspx shell脚本的方式12345678# 新建文件touch ss-privoxy# 赋予执行权限sudo chmod +x ss-privoxy# 移到PATH路径mv -af ss-privoxy /usr/local/bin/# 编辑sudo vim /usr/local/bin/ss-privoxy 脚本内容如下： 123456789101112131415161718192021222324252627282930313233#!/bin/bashcase $1 instart) nohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/log/ss-local.log &amp; systemctl start privoxy proxy="http://127.0.0.1:8118" export http_proxy=$proxy export https_proxy=$proxy export no_proxy="localhost, 127.0.0.1, ::1" ;;stop) unset http_proxy https_proxy no_proxy systemctl stop privoxy pkill sslocal ;;reload) pkill sslocal nohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/log/ss-local.log &amp; ;;set) proxy="http://127.0.0.1:8118" export http_proxy=$proxy export https_proxy=$proxy export no_proxy="localhost, 127.0.0.1, ::1" ;;unset) unset http_proxy https_proxy no_proxy ;;*) echo "usage: source $0 start|stop|reload|set|unset" exit 1 ;;esac 配置命令别名： sudo vim /etc/profile.d/ss-privoxy.sh 12345alias ss.start='. ss-privoxy start'alias ss.stop='. ss-privoxy stop'alias ss.reload='. ss-privoxy reload'alias ss.set='. ss-privoxy set'alias ss.unset='. ss-privoxy unset' 使用说明： ss.start：启动 ss-local+privoxy 代理 ss.stop：停用 ss-local+privoxy 代理 ss.reload：重载 ss-local.json 配置文件 ss.set：设置 shell_proxy 环境变量 ss.unset：删除 shell_proxy 环境变量 软件安装分发仓库里可以找到的安装前先查找软件包是否存在，以ibus为例： 1234# 查找与ibus相关的包pacman -Ss ibus# 这里支持正则匹配的，还可以这么写，更多查看 man pacmanpacman -Ss '^ibus-*' 这里我选择安装ibus-rime输入法 1sudo pacman -S ibus-rime AUR中可以找到的以安装VScode为例，该package描述页在这里 你可以复制Git Clone URL，然后按下面步骤安装。 12345678910# 先安装Gitsudo pacman -S git# 将仓库clone下来git clone https://aur.archlinux.org/visual-studio-code-bin.git# 进入git目录cd visual-studio-code-bin# 编译压缩成安装包makepkg -si# pacman安装 (P.S XXXXXX 为版本号)sudo pacman -U visual-studio-code-bin-XXXXXX.pkg.tar.xz 参考资料 Installation guide 笔记本双显卡 EFI 启动安装 ArchLinux ss-local + privoxy 代理 IBus]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DST Server on Ubuntu16.04 (饥荒服务搭建指南)]]></title>
    <url>%2F2018%2F05%2F29%2FDST-Server-on-Ubuntu16-04%2F</url>
    <content type="text"><![CDATA[与朋友玩DST(饥荒)，开个5人局，卡到没法玩，所以想办法搭私服。 首先感谢路叔的视频以及这个帖子 复制粘贴以下脚本保存为 install.sh update install.sh at 2018-12-15 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213#!/bin/bashdividing="================================================================================"commandPath="steamcmd"commandFile="./steamcmd.sh"gamesPath="Steam/steamapps/common/Don't Starve Together Dedicated Server/bin"gamesFile="./dontstarve_dedicated_server_nullrenderer"dataPath=$(pwd)/.kleifunction FilesDelete()&#123; echo -e "\033[32m[info] Choose File To Delete [1-5]\033[0m" read input_filedelete if [ -d $dataPath ]; then cd $dataPath if [ -d "DoNotStarveServer_$input_filedelete" ]; then rm -r DoNotStarveServer_$input_filedelete/save echo -e "\033[33m[info] File DoNotStarveServer_$input_filedelete Is Deleted\033[0m" fi if [ -d "DoNotStarveCaves_$input_filedelete" ]; then rm -r DoNotStarveCaves_$input_filedelete/save echo -e "\033[33m[info] File DoNotStarveCaves_$input_filedelete Is Deleted\033[0m" fi cd "../" fi&#125;function FilesBackup()&#123; echo -e "\033[32m[info] Choose File To Backup [1-5]\033[0m" read input_filebackup if [ -d $dataPath ]; then cd $dataPath if [ -d "DoNotStarveServer_$input_filebackup" ]; then tar -zcf DoNotStarveServer_$input_filebackup.tar.gz DoNotStarveServer_$input_filebackup echo -e "\033[33m[info] File DoNotStarveServer_$input_filebackup Is Backuped\033[0m" fi if [ -d "DoNotStarveCaves_$input_filebackup" ]; then tar -zcf DoNotStarveCaves_$input_filebackup.tar.gz DoNotStarveCaves_$input_filebackup echo -e "\033[33m[info] File DoNotStarveCaves_$input_filebackup Is Backuped\033[0m" fi cd "../" fi&#125;function FilesRecovery()&#123; echo -e "\033[32m[info] Choose File To Recovery [1-5]\033[0m" read input_filerecovery if [ -d $dataPath ]; then cd $dataPath if [ -f "DoNotStarveServer_$input_filerecovery.tar.gz" ]; then if [ -d "DoNotStarveServer_$input_filerecovery" ]; then rm -r DoNotStarveServer_$input_filerecovery fi tar -zxf DoNotStarveServer_$input_filerecovery.tar.gz DoNotStarveServer_$input_filerecovery echo -e "\033[33m[info] File DoNotStarveServer_$input_filerecovery Is Recovered\033[0m" else echo -e "\033[31m[warn] Backup File For DoNotStarveServer_$input_filerecovery Not Found\033[0m" fi if [ -f "DoNotStarveCaves_$input_filerecovery.tar.gz" ]; then if [ -d "DoNotStarveCaves_$input_filerecovery" ]; then rm -r DoNotStarveCaves_$input_filerecovery fi tar -zxf DoNotStarveCaves_$input_filerecovery.tar.gz DoNotStarveCaves_$input_filerecovery echo -e "\033[33m[info] File DoNotStarveCaves_$input_filerecovery Is Recovered\033[0m" else echo -e "\033[31m[warn] Backup File For DoNotStarveCaves_$input_filerecovery Not Found\033[0m" fi cd "../" else echo -e "\033[31m[warn] Main Archive Folder Not Found\033[0m" fi&#125;function SystemPrepsDetail()&#123; echo -e "\033[33m[info] System Library Install\033[0m" sudo apt-get update sudo apt-get install screen sudo apt-get install lib32gcc1 sudo apt-get install lib32stdc++6 sudo apt-get install libcurl4-gnutls-dev:i386 echo -e "\033[33m[info] System Library Install Finished\033[0m" echo "$dividing"&#125;function SystemPreps()&#123; echo -e "\033[33m[info] System Library Preparing\033[0m" sudo apt-get update 1&gt;/dev/null sudo apt-get install screen 1&gt;/dev/null sudo apt-get install lib32gcc1 1&gt;/dev/null sudo apt-get install lib32stdc++6 1&gt;/dev/null sudo apt-get install libcurl4-gnutls-dev:i386 1&gt;/dev/null echo -e "\033[33m[info] System Library Prepare Finished\033[0m" echo "$dividing"&#125;function CommandPreps()&#123; echo -e "\033[33m[info] Steam Command Line Files Preparing\033[0m" if [ ! -d "$commandPath" ]; then mkdir "$commandPath" fi cd "$commandPath" wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz 1&gt;/dev/null tar -xvzf steamcmd_linux.tar.gz 1&gt;/dev/null rm -f steamcmd_linux.tar.gz 1&gt;/dev/null echo -e "\033[33m[info] Steam Command Line Files Prepare Finished\033[0m" echo "$dividing"&#125;function ServerStart()&#123; echo -e "\033[32m[info] Choose Game Mode [1.noraml] [2.caves]\033[0m" read input_mode echo -e "\033[32m[info] Choose Save File [1-5]\033[0m" read input_save cd "$gamesPath" case $input_mode in 1) screen -dm -S "DST Server" "$gamesFile" -conf_dir DoNotStarveServer_"$input_save";; 2) screen -dm -S "DST Server" "$gamesFile" -conf_dir DoNotStarveCaves_"$input_save";; *) echo -e "\033[31m[warn] Illegal Command,Please Check\033[0m" ;; esac screen -r "DST Server" echo "$dividing"&#125;function ServerPreps()&#123; echo -e "\033[33m[info] Preparing Server Files\033[0m" if [ ! -d "$commandPath" ]; then echo -e "\033[31m[warn] Steam Command Line Not Found\033[0m" CommandPreps else echo -e "\033[33m[info] Steam Command Line Found\033[0m" cd "$commandPath" fi echo -e "\033[32m[info] Choose Game Update Mode [1.noraml] [2.caves]\033[0m" read input_game case $input_game in 1) "$commandFile" +login anonymous +app_update 343050 validate +quit;; 2) "$commandFile" +login anonymous +app_update 343050 -beta cavesbeta validate +quit;; *) echo -e "\033[31m[warn] Illegal Command,Please Check\033[0m" ;; esac cd "../" echo "$dividing" ServerStart&#125;clearecho "$dividing"if [ ! -d "$gamesPath" ]; then echo -e "\033[31m[warn] Server Files Not Found\033[0m" echo "$dividing" SystemPrepsDetail ServerPrepselse echo -e "\033[32m[info] Server Files Found\033[0m" echo "$dividing" echo -e "\033[33m[info] Choose An Action To Perform\033[0m" echo -e "\033[32m[info] System Library Files [0.Prepare]\033[0m" echo -e "\033[32m[info] Game Server [1.start] [2.update] [3.process kill]\033[0m" echo -e "\033[32m[info] Save Files [7.backup] [8.recovery][9.delete]\033[0m" read input_update case $input_update in 0) SystemPreps ;; 1) ServerStart ;; 2) ServerPreps ;; 3) screen -X -S "DST Server" quit ;; 7) FilesBackup ;; 8) FilesRecovery ;; 9) FilesDelete ;; esacfi 添加运行权限 1sudo chmod u+x install.sh 运行脚本 12345sh install.sh# 按下面的输入数字选择：# Game Mode: 1# Save File: 1# Ctrl+c 中断进程 获得 Token 如何获得参考这里： 游戏主界面右下角 Account -&gt; Generate Server Token -&gt; 复制粘贴保存到 cluster_token.txt。 本地打开DST，创建一个在线世界，Mod 什么都设置好，点击开始进游戏，然后关闭保存游戏。 找到存档 Linux存档位置：~/.klei/DoNotStarveTogether Windows存档位置：%HOMEPATH%\Klei\DoNotStarveTogether\。 将对应的 Cluster_X 目录覆盖到云主机的下面目录：~/.klei/DoNotStarveserver_1/。 这里我的存档为 Cluster_1。 将上一步获得的 cluster_token.txt 放到 Cluster_X 目录下 存档目录下已存在该文件可以不用替换。 记录Mod编号 打开存档目录下的 Master/modoverrides.lua 文件，记录所有的 workshop-XXXXXXXXX 中的数字编号。 打开 ~/Steam/steamapps/common/Don&#39;t Starve Together Dedicated Server/mods/dedocated_server_mods_setup.lua 将Mod按 ServerModSetup(&quot;XXXXXXXXX&quot;) 的格式一行一行写进去并保存。 再次运行 install.sh，选择 1.start。 几分钟后即可在 DST 的 online 列表中搜到你的服务器。 我上面写的教程没开 Cave，你可以通过看视频把 Cave 服务打开，过程类似。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>DST</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04上Docker免sudo使用的解决方式]]></title>
    <url>%2F2018%2F04%2F15%2FUbuntu16-04%E4%B8%8ADocker%E5%85%8Dsudo%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[前言在Ubuntu16.04上安装Docker-ce后，发现docker run不需要在sudo下运行，这就导致了一个问题VScode和PyCharm都连不上Docker，都是因为去访问权限的问题，因为不建议用root权限，所以就要找解决办法。 解决 修改服务文件 修改 /lib/systemd/system/docker.service 1sudo vim /lib/systemd/system/docker.service 找到这一行ExecStart=/usr/bin/dockerd fd://，替换为 12## 大概是开启了docker的tcp访问和unix访问ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock 接着修改 /etc/init.d/docker 1sudo vim /etc/init.d/docker 找到这一行 DOCKER_OPTS=，做类似的修改 1DOCKER_OPTS="-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock" 添加用户到docker组 1sudo usermod -aG docker $USER 最后重启你的系统 1sudo reboot 参考cannot-connect-to-the-docker-daemon-is-the-docker-daemon-running-on-this-host]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下使用SS本地代理]]></title>
    <url>%2F2018%2F04%2F15%2FLinux%E4%B8%8B%E4%BD%BF%E7%94%A8SS%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[前言凡是要Coding，免不了上Google，不得不说SS的Windows版体验更好。 Linux版我总是挂全局代理，国外IP不能看B站正版番就很难受。 因为懒一直没折腾，这次为了更好的体验，我决定花点时间。 安装 ss 客户端本来 python 版的 shadowsocks 带有 sslocal 可以做本地代理的，但是我用图形界面，觉得 qt 版体验要好些。 1234567# ArchLinuxsudo pacman -S shadowsocks-qt5# Ubuntusudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 安装完成后，打开配置好你的 ss 服务，本地地址：127.0.0.1，端口：1080，本地服务器类型：HTTP(S)。 验证本地代理1234# 设置临时全局代理export proxy=http://127.0.0.1:1080; export http_proxy=$proxy https_proxy=$proxy no_proxy="localhost, 127.0.0.1, ::1"# 然后访问下Google，有返回html就成了。curl -skL www.google.com 安装 privoxy12345# ArchLinuxsudo pacman -S privoxy# Ubuntusudo apt install privoxy 配置 gfwlist全局代理体验不佳，这里要利用 gfwlist ，配置 privoxy 12345678910# 先获取一段格式转换脚本curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy# 生成 gfwlist.action 文件bash gfwlist2privoxy '127.0.0.1:1080'# 拷贝至 privoxy 配置目录sudo cp -af gfwlist.action /etc/privoxy/# 加载 gfwlist.action 文件sudo echo 'actionsfile gfwlist.action' &gt;&gt; /etc/privoxy/config# 启动 privoxy.service 服务sudo systemctl start privoxy.service 验证代理切换123456# 设置临时变量，privoxy 默认监听端口为 8118export proxy=http://127.0.0.1:8118; export http_proxy=$proxy https_proxy=$proxy no_proxy="localhost, 127.0.0.1, ::1"# 可以看到返回值，说明代理成功curl -skL www.google.com# 查看当前IP，若是墙内IP说明gfwlist配置成功curl -4skL http://ip.chinaz.com/getip.aspx 设置环境变量可以将环境变量加入 .profile 或 .bashrc 或其他配置文件中 123456# vim ~/.profile 或者 sudo vim /etc/profile# 设置临时变量，privoxy 默认监听端口为 8118proxy=http://127.0.0.1:8118export http_proxy=$proxyexport https_proxy=$proxyexport no_proxy="localhost, 127.0.0.1, ::1" 参考ss-local + privoxy 代理Proivoxy用户手册]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shadowsocks</tag>
        <tag>Privoxy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04安装Node.js&npm]]></title>
    <url>%2F2018%2F04%2F15%2FUbuntu16-04%E5%AE%89%E8%A3%85Node-js-npm%2F</url>
    <content type="text"><![CDATA[下载Ubuntu16.04 官方仓库提供的Node.js版本是4.x，不推荐使用apt安装。 我们需要从官网获得更新的版本。 这里直接wget获得 1wget http://nodejs.org/dist/v8.1.1/node-v8.1.1-linux-x64.tar.gz 安装找到下载的压缩文件，解压系统应用目录 1sudo tar -C /usr/local --strip-components 1 -xzf node-v8.1.1-linux-x64.tar.gz 验证查看是否安装到了正确的目录 1234ls -l /usr/local/bin/nodels -l /usr/local/bin/npmnode -vnpm -v 参考资料Installing a tar.gz on linux 我的另一篇文章，有关npm加速]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下zip安装MySQL总结]]></title>
    <url>%2F2018%2F04%2F01%2FWindows%E4%B8%8Bzip%E5%AE%89%E8%A3%85MySQL%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言安装MySQL不想用官方安装工具，因为它会添加开机计划任务，自动启动不说还会时不时更新，就很烦。我希望随用随启动，所以要选择zip安装，这样方便可控。由于记性不好，每次这么装都要查资料，看到网上各种拙劣的教程就很无语，所以决定抽空自己总结下。 下载&amp;解压 官网下载zip安装包，我选择的是MySQL Community Server。 zip安装包在Other Downloads中，我下载的是mysql-5.7.18-win32.zip 解压到任意目录 以下以解压到D:\mysql-5.7.18-win32为例。 环境变量 添加系统变量 12变量名： MYSQL_HOME变量值： D:\mysql-5.7.18-win32 Path中添加 %MYSQL_HOME%\bin 配置文件MySQL目录下添加my.ini文件，内容如下： 123456789101112[client]# 默认编码default-character-set=utf8[mysqld]# 默认编码character-set-server=utf8# 设置mysql的安装目录basedir=D:\mysql-5.7.18-win32# 设置mysql数据库的数据的存放目录datadir=D:\mysql-5.7.18-win32\data# 默认存储引擎default-storage-engine=InnoDB 安装 若MySQL目录下有data目录，先清空该目录。 管理员模式启动cmd，切换到MySQL目录下的bin目录中。 运行初始化命令 1mysqld --initialize-insecure 稍等一会，没有输出就成功了。 若遇到缺少MSVCP120.dll的问题，前往这里下载安装VC++支持 运行安装命令 1mysqld --install 输出service successfully installed表明安装成功。 开启服务 1net start mysql 登录MySQL 1mysql -u root -p 首次登录没有密码，直接按回车 更改root密码 1SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass'); newpass为新的密码 验证编码root登录MySQL，然后输入以下查询语句： 1show variables like 'character%'; 你会的到以下结果： 123456789101112+--------------------------+-------------------------------------------+| Variable_name | Value |+--------------------------+-------------------------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | D:\mysql-5.7.18-win32\share\charsets\ |+--------------------------+-------------------------------------------+ 至此，安装完成。 补充12345678# 停止MySQL服务net stop mysql# 删除MySQL服务sc delete mysql# 解除安装mysqld remove]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Windows上使用GLUT]]></title>
    <url>%2F2018%2F03%2F09%2F%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8GLUT%2F</url>
    <content type="text"><![CDATA[如何在Windows上使用GLUT最近在看计算机图形学书里的代码要用到OpenGL，然而在Windows上少了GLUT，需要自己手动配置。 准备 Microsoft Visual Studio 2017 Community （勾选安装使用C++的桌面开发那项，确保安装MSVC） GLUT for Windows 配置 打开 glut37.zip。 glut.dll,glut32.dll 解压到 Windows目录。 我放到了C:\Windows目录下，当然你也可以把它们分别放到C:\Windows\SysWOW64和C:\Windows\System32下。 找到MSVC的目录。 例如 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.??.??????。 (根据版本文件夹的名称的?会有不同) 在include目录下新建GL文件夹，将glut.h复制进去。 例如 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\include\GL。 在lib目录下，将glut.lib,glut32.lib复制进去。 编写一个简单的opengl程序 打开VS2017，依次点击 新建 - 项目 - Visual C++ - Windows 控制台应用程序 - 确定。 右键点击解决方案管理器中的项目名称(ConsoleApplication?) - 属性 - 链接器 注意：配置平台是Win32。 常规 - 附加库目录 - &lt;编辑…&gt; - 粘贴你lib的路径例如 C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\lib。 输入 - 附加依赖项 - &lt;编辑…&gt; - 粘贴glut的lib例如 glut32.lib。 ConsoleApplication1?.cpp中写入以下代码： 123456789101112131415161718192021222324252627282930313233343536#include &quot;stdafx.h&quot;#include &lt;gl/glut.h&gt;void init(void)&#123; glClearColor(1.0, 1.0, 1.0, 1.0); glMatrixMode(GL_PROJECTION); gluOrtho2D(0.0, 200.0, 0.0, 250.0);&#125;void lineSegment(void)&#123; glClear(GL_COLOR_BUFFER_BIT); glColor3f(0.0, 0.4, 0.2); glBegin(GL_LINES); glVertex2i(180, 15); glVertex2i(10, 145); glEnd(); glFlush();&#125;int main(int argc, char** argv)&#123; glutInit(&amp;argc, argv); glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); glutInitWindowPosition(50, 100); glutInitWindowSize(400, 300); glutCreateWindow(&quot;An Example OpenGL Program&quot;); init(); glutDisplayFunc(lineSegment); glutMainLoop(); return 0;&#125; F5调试，你可以看到图像是一条斜线。 参考 https://www.cs.csustan.edu/~rsc/SDSU/GLUTinstall.html http://blog.csdn.net/qq_19982213/article/details/69970977]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>GLUT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Protocal Buffer 学习]]></title>
    <url>%2F2018%2F02%2F23%2FProtocal%20Buffer%20%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[语言指南 (proto3)官方指南Language Guide (proto3) 简介该文章为阅读官方指南顺便翻译的。 定义消息类型看一个简单的例子。假如你想定义一个搜索请求信息格式，搜索请求有个询问字符串。你感兴趣的特定页面的结果，以及每个结果页面的条目数。下面是 .proto 文件。 1234567syntax = &quot;proto3&quot;message SearchRequest &#123; string query = 1; int32 page_number = 2; int32 result_per_page = 3;&#125; 第一行指定了你使用 proto3 语法：如果你不这样做，protocal buffer 编译器将默认假设你使用 proto2 。这句必须在文件的第一非空无注释行。 SearchRequest信息定义指定了三个字段(名/值 对)，一个用于你希望包含在此类消息中的每条数据。每个字段有一个名称和一个类型。 指定字段类型在上面的例子中，所有的字段都是 scalar (标量)类型：两个整数(page_number和result_per_page)和一个字符串(query)。当然，你也可以为你的字段指定 composite (复合)类型。 分配标签如你所见，信息定义中的每个字段有一个独特的数字标签。这些标签被用来在二进制信息格式中识别你的字段，并且一旦你的信息类型在使用就不该修改这些字段。请注意，值为1到15的变量需要1字节编码，包括标签号和字段类型(你可以在 Protocal Buffer Encoding 中了解更多信息)。标签在16到2047之间需要2字节。所以你应该为频繁出现的消息元素保留标签1至15。请留意为将来可能添加的频繁出现的元素留出一些空间。最小标签号码你可以指定为1，最大的为$2^{29}-1$，或536,870,911。你还不能使用数组19000至19999(FieldDescriptor::kFirstReservedNumber至FieldDescriptor::kLastReservedNumber)。因为它们是为 Protocal Bufffers 接口实现保留的，如果你在.proto文件中使用这些保留数字，protocal buffer 编译器会发出警告。同样的，你不能使用任何以前保留的标签。 指定字段规则信息字段可以是下列中一种： singular ：一种格式正确的消息可以有0或1个这个字段(但不超过1个)。 repeated ：这个字段可以在格式正确的消息中被重复任意次。重复值的顺序会被保留。 在 proto3 中， repeated 的 scalar 数字类型默认使用 packed 编码。你可以在 Protocal Buffer Encoding 中了解有关 packed 的信息。 添加更多信息类型单个.proto文件中可以定义多种信息类型。这便于你定义多种相关的信息。因此，举个例子，如果你想的定义回复信息格式来相应你的SearchResponse信息类型，你可以添加它到同一.proto文件： 123456789message SearchRequest &#123; string query = 1; int32 page_number = 2; int32 result_per_page = 3;&#125;message SearchResponse &#123; ...&#125; 添加注释欲添加注释到你的.proto文件，使用C/C++样式的//和/* ... */语法。 12345678/* SearchRequest represents a search query, with pagination options to * indicate which results to include in the response. */message SearchRequest &#123; string query = 1; int32 page_number = 2; // Which page number do we want? int32 result_per_page = 3; // Number of results to return per page.&#125; 保留字段如果你通过删除整个字段或者将它注释掉来更新一种消息类型，未来的用户可以在更新类型时重用该标签号码。如果他们稍后加载同样的.proto旧版本，可能会导致严重的问题，包括数据损坏，隐私错误，诸如此类。确保这种情况不会发生的一种方法是指定已删除字段的字段标记(和/或者名称)被保留(这可能会导致JSON序列化问题)。如果将来的任何用户试图使用这些标识符，protocal buffer 编译器将报错。 1234message Foo &#123; reserved 2, 15, 9 to 11; reserved &quot;foo&quot;, &quot;bar&quot;;&#125; 请注意，你不能在同一reserved语句中混合字段名称和标签号码。 你的.proto可以生成什么？当你在protocal buffer 编译器中运行一个.proto，编译器会生成你需要的语言的代码，包括getting和setting字段的值，序列化你的信息到输出流，从输入流解析你的信息。 对于C++，编译器为每个.proto生成一个.h和.cc文件，每个信息类型用一个类定义。 对于Java，编译器会为每个消息来行生成一个带有类的.java文件，以及用于创建消息类实力的特殊Builder类。 Python有一些不同——Python编译器会在.proto中为每个消息类型生成一个静态描述符，然后与metaclass一起使用，以在运行时创建必要的Python数据访问类。 对于Go，编译器为每种消息类型生成一个.pb.go文件。 对于Ruby，编译器使用包含消息类型的Ruby模块生成一个.rb文件。 对于JavaNano，编译器输出与Java相似，但没有Builder类。 对于Object-C，编译器会从每个.proto生成一个pbobjc.h和pbobjc.m文件，并为你的文件中描述的每种消息类型生成一个类。 对于C#，编译器会从每个.proto生成一个.cs文件，并为你的文件中描述的每种消息类型生成一个类。 你可以按照所选语言的教程(即将推出proto3版本)了解更多关于使用每种语言的API的信息。有关更多API的详细信息，请参阅相关API参考(即将推出proto3版本)。 Scalar 值类型标量消息字段可以具有以下类型之一——该表显示.proto文件中指定的类型以及自动生成的类中的相应类型： .proto Type Notes C++ Type Java Type Python Type[2] Go Type Ruby Type C# Type PHP Type double double double float float64 Float double float float float float float float32 Float float float int32 使用可变长度编码。负数是无效编码——如果你的字段可能含有负数，请改用sint32 int32 int int int32 Fixnum or Bignum (as required) int integer int64 使用可变长度编码。负数是无效编码——如果你的字段可能具有负值，请改用sint64。 int64 long int/long[3] int64 Bignum long integer/string[5] uint32 使用可变长度编码。 uint32 int[1] int/long[3] uint32 Fixnum or Bignum (as required) uint integer uint64 使用可变长度编码。 uint64 long[1] int/long[3] uint64 Bignum ulong integer/string[5] sint32 使用可变长度编码。带符号的int值。这些比常规的int32更有效地编码负数。 int32 int int int32 Fixnum or Bignum (as required) int integer sint64 使用可变长度编码。带符号的int值。这些比常规的int64更有效地编码负数。 int64 long int/long[3] int64 Bignum long integer/string[5] fixed32 总是四个字节。如果值通常大于$2^{28}$，则比uint32效率更高。 uint32 int[1] int uint32 Fixnum or Bignum (as required) uint integer fixed64 总是八个字节。如果值通常大于$2^{56}$，则会比uint64更高效。 uint64 long[1] int/long[3] uint64 Bignum ulong integer/string[5] sfixed32 总是四个字节。 int32 int int int32 Fixnum or Bignum (as required) int integer sfixed64 总是八个字节。 int64 long int/long[3] int64 Bignum long integer/string[5] bool bool boolean bool bool TrueClass/FalseClass bool boolean string 字符串必须始终包含UTF-8编码或7位ASCII文本。 string String str/unicode[4] string String (UTF-8) string string bytes 可能包含任何字节序列。 string ByteString str []byte String (ASCII-8BIT) ByteString string 你可以在 Protocal Buffer Encoding 中了解有关这些类型序列化消息如何编码的更多信息。 [1] 在Java中，无符号的32位和64位整数使用其签名对应表示，最高位仅存储在符号位中。 [2] 在所有情况下，将值设置为字段将执行类型检查以确保其有效。 [3] 64位或无符号32位整数在解码时总是表示为long，但如果在设置字段时给定整型，则可以是int。在所有情况下，该值必须符合设置时表示的类型。见[2]。 [4] Python字符串在解码时表示为unicode，但如果给出ASCII字符串(可能会更改)，则可以为str。 [5] Integer用于64位机器，字符串用于32位机器。 默认值当一条消息被解析，如果编码的信息不包含特定的 singular 元素，则解析对象中的对应字段将设置为该字段的默认值。这些默认值是特定于类型的： 对于 string 类型，默认值为空字符串。 对于 byte 类型，默认值是空字节。 对于 bool 类型，默认值是 false 。 对于 numeric(数字) 类型，默认值是0。 对于 enums 类型，默认值是第一个定义的枚举值，一定为0。 对于消息字段，该字段未设置。它的确切值是语言相关的。详情请参阅生成的代码指南。 重复(repeated)字段的默认值为空(通常是相应语言的空列表)。 请注意，对于标量(scalar)消息字段，一旦解析了消息，就无法判断字段是否被显式设置为默认值(例如布尔值是否设置为false)或者根本没有设置：在定义消息类型时应该记住这一点。举个例子，如果你不希望该行为在默认情况下发生，请将其设置为false时切换某些行为的布尔值。另请注意，如果标量(scalar)消息字段被设置为其默认值，则该值不会在连线上序列化。有关如何在生成的代码中使用默认值的更多详细信息，请参阅所选语言的生成代码指南。 枚举当你定义一个消息类型时，你可能希望它的一个字段只有一个预定义的值。例如，假设你想为每个SearchRequest添加一个corpus(语料库)字段，其中语料库可以是UNIVERSAL,WEB,IMAGES,LOCAL,NEWS,PRRDUCTS或VIDEO。你可以非常简单地通过为每个可能值添加一个常量来为消息定义添加枚举。下面的示例中，我们添加一个名为Corpus的枚举，其中包含所有可能的值以及一个类型为Corpus的字段： 123456789101112131415message SearchRequest &#123; string query = 1; int32 page_number = 2; int32 result_per_page = 3; enum Corpus &#123; UNIVERSAL = 0; WEB = 1; IMAGES = 2; LOCAL = 3; NEWS = 4; PRODUCTS = 5; VIDEO = 6; &#125; Corpus corpus = 4;&#125; 如你所见，Corpus枚举的第一个常量映射为0：每个枚举定义都必须包含一个映射为0的常量作为第一个元素。这是因为： 必须有一个零值，以便我们可以使用0作为数字的默认值。 零值需要是第一个元素，与第一个枚举值始终是默认值的proto2语义兼容。 你可以通过将相同的值分配给不同的枚举常量来定义别名。为此，你需要将allow_alias选项设置为true，否则当找到别名时，协议编译器将生成错误消息。 1234567891011enum EnumAllowingAlias &#123; option allow_alias = true; UNKNOWN = 0; STARTED = 1; RUNNING = 1;&#125;enum EnumNotAllowingAlias &#123; UNKNOWN = 0; STARTED = 1; // RUNNING = 1; // Uncommenting this line will cause a compile error inside Google and a warning message outside.&#125; 枚举器常量必须在32位整数的范围内。由于枚举值在线路上使用varint编码，所以负值效率不高，因此不推荐使用。你可以在消息定义中(如上例)或外部定义枚举——这些枚举可以在.proto文件中的任何消息定义中重用。你还可以使用语法MessageType.EnumType将一个消息中声明的枚举类型用作不同消息中字段的类型。 当你在使用enum的.proto文件上运行protocol buffer编译器，生成的代码将为Java或C++提供相应的枚举值，这是一种特殊的EnumDescriptor类，用于在运行时生成的类中创建一组具有整数值的符号常量。 在反序列化过程中，无法识别的枚举值将保留在消息中，但是当消息被反序列化时如何表示是依赖于语言的。在支持指定符号范围之外的值的开放枚举类型的语言(如C++和Go)中，未知枚举值仅作为其基础整数表示形式存储。在具有封闭枚举类型的语言(如Java)中，枚举中的一个用于表示无法识别的值，并且可以使用特殊访问器访问基础整数。在任何一种情况下，如果消息被序列化，则无法识别的值仍将与消息一起序列化。有关如何在应用程序中使用消息枚举的更多信息，请参阅所选语言的生成代码指南。 保留值如果你通过完全删除枚举条目或将其注释掉来更新枚举类型，未来的用户可以在对该类型进行自己的更新时重新使用数值。如果稍后加载相同的.proto的旧版本，包括数据损坏，隐私错误等，则可能会导致严重问题。确保这种情况不会发生的一种方法指定已删除条目的数字值(和/或名称)被保留(这也可能会导致JSON序列化的问题)。如果将来的任何用户试图使用这些标识符，protocol buffer 编译器将会报错。你可以使用max关键字指定保留的数值范围上升到最大可能值。 1234enum Foo &#123; reserved 2, 15, 9 to 11, 40 to max; reserved &quot;FOO&quot;, &quot;BAR&quot;;&#125; 请注意，你不能在同一reserved语句中混合字段名称和数字值。 使用其他消息类型你可以使用其他消息类型作为字段类型。例如，假设你想在每个SearchResponse消息中包含Result消息——为此，你可以在同一个.proto中定义一个Result消息类型，然后在SearchResponse中指定Result类型的字段： 123456789message SearchResponse &#123; repeated Result results = 1;&#125;message Result &#123; string url = 1; string title = 2; repeated string snippets = 3;&#125; 导入定义在之前的例子中，Result消息类型与SearchResponse定义在同一文件中——如果你要使用的消息类型已经在其他.proto文件中定义了呢？你可以通过导入来使用其他.proto文件中的定义。要导入另一个.proto的定义，可以在文件顶部添加一条导入语句： 1import "myproject/other_protos.proto"; 默认情况下，你只能使用直接导入的.proto文件中的定义。但是，有时你可能需要将.proto文件移至新位置。不是直接移动.proto文件，而是在一次更改中更新所有调用站点，现在你可以在旧位置放置一个虚拟.proto文件，以使用import public概念将所有导入转移到新位置。import public依赖可以被过渡到任何包含import public语句的proto中。例如： 12// new.proto// All definitions are moved here 1234// old.proto// This is the proto that all clients are importing.import public "new.proto";import "other.proto"; 123// client.protoimport "old.proto";// You use definitions from old.proto and new.proto, but not other.proto 协议编译器使用-I / --proto_path标志在协议编译器命令行中指定一组目录中搜索导入的文件。如果没有给标志，它将在调用编译器的目录中查找。通常，你应该将--proto_path标志设置为根目录，并为所有导入使用完整名称。 使用proto2消息类型可以导入proto2消息类型并在proto3消息中使用它们，反之亦然。然而，proto2枚举不能直接用在proto3语法中(如果导入的proto2消息使用它们，这是可以的)。 嵌套类型你可以在其他消息类型中定义和使用消息类型，如下例所示这里ResultResponse消息中定义了Result消息——这里ResultResponse消息中定义了Result消息： 12345678message SearchResponse &#123; message Result &#123; string url = 1; string title = 2; repeated string snippets = 3; &#125; repeated Result results = 1;&#125; 如果你想在其父消息类型外重复使用此消息类型，请将其称为Parent.Type： 123message SomeOtherMessage &#123; SearchResponse.Result result = 1;&#125; 你可以根据需要深度嵌套消息： 1234567891011121314message Outer &#123; // Level 0 message MiddleAA &#123; // Level 1 message Inner &#123; // Level 2 int64 ival = 1; bool booly = 2; &#125; &#125; message MiddleBB &#123; // Level 1 message Inner &#123; // Level 2 int32 ival = 1; bool booly = 2; &#125; &#125;&#125; 更新消息类型如果现有的消息类型不再满足你的所有需求——例如，你希望消息格式具有额外的字段——但你仍然希望使用使用旧格式创建的代码，别担心！在不破坏任何现有代码的情况下更新消息类型非常简单。请记住以下规则： 不要更改任何现有字段的数字标记。 如果你添加新字段，则任何由代码使用“旧”消息格式序列化的消息仍然可以通过新生成的代码解析。你应该记住这些元素的默认值，以便新代码可以正确地与旧代码生成的消息交互。同样的，由新代码创建的消息可以由旧代码解析：旧的二进制文件在解析时会简单地忽略新字段。有关详情，请参阅未知字段部分。 只有在更新的消息类型中不再使用标签号码，字段就可以被删除。你可能希望重命名该字段，可能会添加前缀“OBSOLETE_”，或者保留标记，以便将来的.proto用户不会意外重用该号码。 int32,uint32,int64,uint64,和bool全都兼容——这意味着你可以将字段从这些类型之一更改为另一字段而不破坏向前或向后兼容性。如果一个数字从不适合相应类型的线路中解析出来，则会得到与在C++中将数字转换为该类型相同的效果(例如，如果将64位数字读为int32，它将被截断为32位)。 sint32和sint64相互兼容，但与其他整数类型不兼容。 只要字节是有效的UTF-8，string和bytes是兼容的。 嵌入式消息与字节兼容，如果字节包含消息，如果字节包含消息的编码版本。 fixed32与sfixed32兼容，而fixed64与sfixed64兼容 enum与wire格式的int32，uint32，int64和uint64兼容(请注意，如果它们不适合，值将被截断)。但请注意，当消息被反序列化时，客户端代码可能会以不同的方式处理它们：例如，无法识别的proto3枚举类型将保留在消息中，但消息反序列化时如何表示是语言相关的。 Int域始终只保留它们的值。 未知字段未知字段是格式良好的 protocal buffer 序列化数据，表示解析器无法识别的字段。例如，当一个旧的二进制文件的解析被包含新字段的新二进制文件发送时，这些新的字段将成为旧的二进制文件中的未知字段。Proto3可以成功解析未知字段的消息，但是，是否能保留这些未知字段就不确定了。你不应该以来保存或删除未知字段。对于大多数 Google protocol buffer的实现，未知字段在proto3中无法通过相应的 proto runtimes 访问，并且在反序列化时被丢弃或遗忘。这是 proto2 的不同行为吗，其中未知字段总是与消息一起保存并序列化。 AnyAny 消息类型允许你将消息用作嵌入类型，而不必具有.proto定义。一个Any包含一个任意的序列化消息作为字节，以及一个充当全局唯一标识符并解析为该消息类型的URL。要使用Any类型，你需要导入google/protobuf/any.proto。 123456import &quot;google/protobuf/any.proto&quot;;message ErrorStatus &#123; string message = 1; repeated google.protobuf.Any details = 2;&#125; 给定消息类型的默认的URL是type.googleapis.com/packagename.messagename不同语言实现将支持runtime库帮助程序以类型安全的方式打包和解压缩Any的值——例如，在Java中，Any类型将具有特殊的pack()和unpack()访问器，而在C++中则有PackForm()和UnpackTo()方法： 1234567891011121314// Storing an arbitrary message type in Any.NetworkErrorDetails details = ...;ErrorStatus status;status.add_details()-&gt;PackFrom(details);// Reading an arbitrary message from Any.ErrorStatus status = ...;for (const Any&amp; detail : status.details()) &#123; if (detail.Is&lt;NetworkErrorDetails&gt;()) &#123; NetworkErrorDetails network_error; detail.UnpackTo(&amp;network_error); ... processing network_error ... &#125;&#125; 当前用于处理Ang类型的的runtime库都在开发中如果你已经熟悉proto2语法，则Any类型会替换拓展名。 Oneof如果你有一个包含多个字段的消息，并且最多只能同时设置一个字段，则可以使用 oneof 功能强制执行此操作并节省内存。Oneof字段与常规字段很相似，但共享中的所有字段除外，并且最多只能同时设置一个字段。设置 oneof 中的任何成员会自动清除所有其他成员。根据你选择的语言，你可以使用特殊的 case()或WhichOneof()方法检查oneof中的哪个值(如果有)被设置。 使用 Oneof要在.proto中定义一个oneof关键字，请使用oneof关键字，后跟你的oneof名称，在此例中为test_oneof： 123456message SampleMessage &#123; oneof test_oneof &#123; string name = 4; SubMessage sub_message = 9; &#125;&#125; 然后，将你的oneof字段添加到oneof定义中。你可以添加任意类型的字段，但不能使用repeated字段。在你生成的代码中，oneof字段与常规字段具有相同的getter和setter。你还可以获得一种特殊的方法检查oneof中的哪个值(如果有)被设置。你可以在相关的API参考中找到更多关于你所选语言的API。 Oneof 的特点 设置一个oneof字段将自动清除oneof中的其他成员。所以如果你设置了多个字段，则只有你设置的最后一个字段会有值。 12345SampleMessage message;message.set_name("name");CHECK(message.has_name());message.mutable_sub_message(); // Will clear name field.CHECK(!message.has_name()); 如果解析器在线上遇到多个同一oneof中成员，则只有最后一个成员被用于解析的消息。 一个oneof不能是repeated。 反射API适用于oneof字段。 如果你使用C++，请确保你的代码不会导致内存崩溃。以下示例代码将因为调用set_name()方法删除了sub_message而崩溃。 1234SampleMessage message;SubMessage* sub_message = message.mutable_sub_message();message.set_name(&quot;name&quot;); // Will delete sub_messagesub_message-&gt;set_... // Crashes here 还是C++，如果你Swap()两个带有oneof的消息，每个消息都会以另一个 oneof case 结尾：在下面的例子中，msg1将有一个sub_message，而msg2将有一个name。 1234567SampleMessage msg1;msg1.set_name("name");SampleMessage msg2;msg2.mutable_sub_message();msg1.swap(&amp;msg2);CHECK(msg1.has_sub_message());CHECK(msg2.has_name()); 向后兼容性问题添加或删除一个字段时请小心。如果检查一个返回值的值为None/NOT_SET，则可能意味着oneof的值没有被设置，或者被设置为不同版本的oneof字段。没有办法分辨这种差异，因为无法知道线路上的未知字段是否为oneof的成员。 标记重用问题 将字段移入或移出oneof字段：在消息序列化和解析后，可能会丢失一些信息(某些字段将被清除)。 删除一个oneof字段再将其添加回来：在消息序列化和解析后，这可能会清除你当前设置的oneof字段。 拆分或合并oneof：这与移动常规字段具有相似的问题。 Maps如果你想创建一个关联映射(map)作为数据定义的一部分，protocol buffer提供了一个方便的快捷语法。 1map&lt;key_type, value_type&gt; map_field = N; 其中key_type可以是任何整数或字符串类型(因此，除了浮点类型和字节外的任何标量类型)。请注意，枚举不是有效的key_type。value_type可以是除另一个map之外的任何类型。 因此，例如，如果你想创建一个项目映射，其中每个Project消息都与一个字符串相关联，则可以像这样定义它： 1map&lt;string, Project&gt; projects = 3; Map 字段不能被 repeated。 线格式排序和映射迭代排序是不确定的，所以你不能依靠映射项目的特定顺序。 为.proto生成文本格式时，映射按键排序。数字键按数字排序。 从线路解析或合并时，如果有重复的映射键，则使用所看到的最后一个键。从文本格式解析映射时，如果有重复的键，解析可能会失败。 生成映射API目前可用于所有proto3支持的语言。你可以在相关的API参考中找到更多关于你所选语言的映射API的信息。 向后兼容性映射语法等同于线路中的以下内容，因此不支持映射的 protocol buffer 接口实现仍然可以处理你的数据： 123456message MapFieldEntry &#123; key_type key = 1; value_type value = 2;&#125;repeated MapFieldEntry map_field = N; 包你可以将可选package说明符添加到.proto文件，以防止协议消息类型之间的名称冲突。 12package foo.bar;message Open &#123; ... &#125; 你可以在定义消息类型的字段时使用包说明符： 12345message Foo &#123; ... foo.bar.Open open = 1; ...&#125; 在C++中，生成的类被封装在C++命名空间中。例如，Open将位于命名空间foo::bar。 在Java中，除非你在.proto文件中明确提供了option java_package，否则该包将用作Java包。 在Python中，package指令被忽略，因为Python模块根据它们在文件系统中的位置进行组织。 在Go中，除非你在.proto文件中明确提供了option go_package，否则该软件包将用作Go软件包名称。 在Ruby中，生成的类将被封装在嵌套的Ruby命名空间中，并转换为所需的Ruby大写样式(首字母大写;如果第一个字符不是字母，则PB_被预置)。例如，Open将位于命名空间Foo::Bar中。 在JavaNano中，该包用作Java包，除非你在.proto文件中明确提供了一个option java_package。 在C＃中，除非你在.proto文件中明确提供了option csharp_namespace，否则在转换为PascalCase之后，该包将用作名称空间。例如，Open将位于名称空间Foo.Bar中。 包和名称解决方案Protocol buffer 语言中的类型名称解析与C++类似：首先搜索最内层的范围，然后搜索最内层的内容，依此类推，每个包被认为是其父包的“内层”。开头的的’.’ (例如.foo.bar.Baz)意味着从最外层的范围开始。Protocol buffer 编译器通过解析导入的.proto文件来解析所有类型名称。每种语言的代码生成器都知道如何引用该语言中的每种类型，即使它具有不同的作用域规则。 定义服务如果你想将消息类型用于RPC(Remote Procedure Call - 远程过程调用)系统，则可以在.proto文件中定义一个RPC服务接口，并且 protocol buffer 编译器将使用你选择的语言生成服务接口代码和存根。所以，例如，如果你想用一个带有你的SearchRequest并返回一个SearchResponse的方法来定义一个RPC服务，你可以在你的.proto文件中定义它，如下所示： 123service SearchService &#123; rpc Search (SearchRequest) returns (SearchResponse);&#125; 与 protocol buffer 一起使用的最直接的RPC系统是gRPC：由谷歌开发的语言无关和平台无关的开源RPC系统。gRPC特别适用于 protocol buffer ，并且可以使用特殊的 protocol buffer 编译器插件直接从.proto文件生成相关的RPC代码。如果你不想使用gRPC，也可以在你自己的RPC接口实现中使用 protocol buffer 。你可以在Proto2语言指南中找到更多关于此的信息。还有一些正在进行的第三方项目为 Protocol Buffers 开发RPC实现。有关我们了解的项目的链接列表，请参阅第三方附加组件wiki页面。 JSON映射Proto3支持JSON中的规范编码，使系统之间共享数据变得更加容易。编码在下表中按类型逐个描述。如果JSON编码数据中缺少值或其值为空，则在解析为 protocol buffer 时，它将被解释为适当的默认值。如果一个字段在 protocol buffer 中具有默认值，默认情况下它将在JSON编码数据中省略以节省空间。实现可能提供选项以在JSON编码的输出中发送具有默认值的字段。 proto3 JSON JSON example Notes message object {“fBar”: v, “g”: null, …} 生成JSON对象。消息字段名称映射到lowerCamelCase并成为JSON对象键。接受null并将其视为相应字段类型的默认值。 enum string “FOO_BAR” 使用proto中指定的枚举值的名称。 map&lt;K,V&gt; object {“k”: v, …} 所有的密钥都转换为字符串。 repeated V array [v, …] null被接受为空list[] bool true, false true, false string string “Hello World!” bytes base64 string “YWJjMTIzIT8kKiYoKSctPUB+” JSON值将是使用带填充的标准base64编码作为字符串编码的数据。无论是标准的还是URL安全的base64编码，都可以接受。 int32, fixed32, uint32 number 1, -10, 0 JSON值将是一个十进制数。数字或字符串都被接受。 int64, fixed64, uint64 string “1”, “-10” JSON值将是一个十进制字符串。数字或字符串都被接受。 float, double number 1.1, -10.0, 0, “NaN”, “Infinity” JSON值将是一个数字或特殊字符串值“NaN”，“Infinity”和“-Infinity”之一。数字或字符串都被接受。指数符号也被接受。 Any object {“@type”: “url”, “f”: v, … } 如果Any包含具有特殊JSON映射的值，则它将按如下所示进行转换： {“@type”: xxx, “value”: yyy}。否则，该值将被转换为JSON对象，并且将插入“@type”字段以指示实际的数据类型。 Timestamp string “1972-01-01T10:00:20.021Z” 使用RFC 3339，其中生成的输出始终是 Z-normalized ，并使用0,3,6或9小数位。 Duration string “1.000340012s”, “1s” 生成的输出总是包含0,3,6或9个小数位，具体取决于所需的精度，后面跟着后缀“s”。接受的是任何小数位（也没有），只要它们符合纳秒精度并且后缀“s”是必需的。 Struct object { … } 任何JSON对象。请参见struct.proto。 Wrapper types various types 2, “2”, “foo”, true, “true”, null, 0, … 包装器在JSON中使用与包装的基本类型相同的表示形式，除了在数据转换和传输期间允许和保留null。 FieldMask string “f.fooBar,h” 见 fieldmask.proto. ListValue array [foo, bar, …] Value value 任何JSON值 NullValue null JSON null 选项 (option).proto文件中的各个声明可以用多个选项批注。选项不会更改声明的整体含义，但可能会影响在特定上下文中处理它的方式。可用选项的完整列表在google/protobuf/descriptor.proto中定义。有些选项是文件级选项，这意味着它们应该写在顶层作用域中，而不是任何消息，枚举或服务定义中。有些选项是消息级选项，意味着它们应该写在消息定义中。有些选项是字段级选项，这意味着它们应该写在字段定义中。选项也可以写在枚举类型，枚举值，服务类型和服务方法上;但是，目前没有任何有用的选项。 以下是一些最常用的选项： java_package(文件选项)：你要用于生成的Java类的包。如果在.proto文件中没有给出明确的java_package选项，那么默认情况下会使用proto包(在.proto文件中使用“package”关键字指定)。但是，proto软件包通常不会制作出良好的Java软件包，因为proto软件包不希望以反向域名开头。如果不生成Java代码，则此选项不起作用。 1option java_package = "com.example.foo"; java_multiple_files(文件选项)：导致在包级别定义顶级消息，枚举和服务，而不是在以.proto文件命名的外部类中定义。 1option java_multiple_files = true; java_outer_classname(文件选项)：要生成的最外层Java类(因此文件名)的类名。如果没有在.proto文件中指定明确的java_outer_classname，则通过将.proto文件名称转换为驼峰命名(因此foo_bar.proto变为FooBar.java)来构造类名称。如果不生成Java代码，则此选项不起作用。 1option java_outer_classname = "Ponycopter"; optimize_for(文件选项)：可以设置为SPEED，CODE_SIZE或LITE_RUNTIME。这会通过以下方式影响C++和Java代码生成器(以及可能的第三方生成器)： SPEED(默认)： protocol buffer 编译器将生成用于序列化，解析和执行消息类型的其他常见操作的代码。这段代码是高度优化的。 CODE_SIZE: protocol buffer 编译器将生成最少的类，并依靠共享的基于反射的代码来实现序列化，解析和各种其他操作。生成的代码因此比SPEED要小得多，但操作会比较慢。类仍将实现与SPEED模式中完全相同的公共API。这种模式在包含大量.proto文件的应用程序中非常有用，并且不需要所有这些文件都变得非常快速。 LITE_RUNTIME: protocol buffer 编译器将生成仅取决于“lite”的runtime库(libprotobuf-lite而不是libprotobuf)的类。lite runtime比整个库小得多（大约小一个数量级），但省略了描述符和反射等特定功能。这对于在移动电话等受限平台上运行的应用程序特别有用。编译器仍然会像在SPEED模式下那样生成所有方法的快速实现。生成的类将仅实现每种语言的MessageLite接口，该接口仅提供完整的Message接口的一部分方法。 1option optimize_for = CODE_SIZE; cc_enable_arenas（文件选项）：为C ++生成的代码启用竞技场分配。 objc_class_prefix（文件选项）：设置所有Objective-C生成的类和来自此.proto的枚举的Objective-C类前缀。没有默认值。你应该使用Apple建议的3-5个大写字符之间的前缀。请注意，所有2个字母的前缀都由Apple保留。 deprecated（字段选项）：如果设置为true，则表示该字段已被弃用且不应被新代码使用。在大多数语言中，这没有实际影响。在Java中，这变成了@Deprecated注释。将来，其他语言特定的代码生成器可能会在字段的访问器上生成弃用注释，这会在编译试图使用该字段的代码时反过来导致发出警告。如果该字段不被任何人使用，并且你想阻止新用户使用该字段，请考虑用保留语句替换字段声明。 1int32 old_field = 6 [deprecated=true]; 自定义选项Protocol Buffers还允许你定义和使用你自己的选项。这是大多数人不需要的高级功能。如果你认为需要创建自己的选项，请参阅Proto2语言指南了解详细信息。请注意，创建自定义选项使用的扩展只允许proto3中的自定义选项。 生成你的类要生成需要使用.proto文件中定义的消息类型的Java，Python，C ++，Go，Ruby，JavaNano，Objective-C或C＃代码，需要在.proto文件上运行 Protocol Buffers 编译器协议。如果你尚未安装编译器，请下载软件包并按照README中的说明进行操作。对于Go，你还需要为编译器安装特殊的代码生成器插件：你可以在GitHub上的golang/protobuf存储库中找到此安装说明。协议编译器调用如下： 1protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --javanano_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto IMPORT_PATH指定解析import指令时要在其中查找.proto文件的目录。如果省略，则使用当前目录。可以通过多次传递--proto_path选项来指定多个导入目录;他们将按顺序搜索。-I=IMPORT_PATH可以用作--proto_path的简短形式。 你可以提供一个或多个输出指令： --cpp_out在DST_DIR中生成C++代码。有关更多信息，请参阅C++生成的代码参考。 --java_out在DST_DIR中生成Java代码。查看Java生成的代码参考以获取更多信息。 --python_out在DST_DIR中生成Python代码。查看Python生成的代码参考以获取更多信息。 --go_out在DST_DIR中生成Go代码。查看Go生成的代码参考了解更多信息。 --ruby_out在DST_DIR中生成Ruby代码。 Ruby生成的代码引用即将推出！ --javanano_out在DST_DIR中生成JavaNano代码。JavaNano代码生成器有许多选项可用于自定义生成器输出：你可以在生成器README中找到更多关于这些的信息。 JavaNano生成的代码参考即将推出！ --objc_out在DST_DIR中生成Objective-C代码。有关更多信息，请参阅Objective-C生成的代码参考。 --csharp_out在DST_DIR中生成C＃代码。有关更多信息，请参阅C＃生成的代码参考。 --php_out在DST_DIR中生成PHP代码。查看PHP生成的代码参考了解更多信息。 为了方便起见，如果DST_DIR以.zip或.jar结尾，编译器会将输出写入一个具有给定名称的ZIP格式存档文件。根据Java JAR规范的要求，.jar输出也会被赋予一个清单文件。请注意，如果输出存档已经存在，它将被覆盖;编译器不够聪明，无法将文件添加到现有存档。 你必须提供一个或多个.proto文件作为输入。可以一次指定多个.proto文件。虽然这些文件是相对于当前目录命名的，但每个文件都必须驻留在其中一个IMPORT_PATH中，以便编译器可以确定其规范名称。 其他RPC frameworkRPC (Remote Procedure Call - 远程过程调用) GRPC - Google Thrift - Apache]]></content>
      <categories>
        <category>Protocol</category>
      </categories>
      <tags>
        <tag>Protocol Buffer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Protocol Buffer with Golang]]></title>
    <url>%2F2018%2F02%2F11%2FGoogle%20Protocol%20Buffer%20with%20Golang%2F</url>
    <content type="text"><![CDATA[了解 Google Protocol Buffer官网 Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data. 下载二进制文件https://github.com/google/protobuf/releases 配置环境GOPATH命令行输入: 1go dev 或者在系统环境变量里添加一条GOPATH指向你的自定义目录。 最后将$GOPATH添加到系统环境变量path中。 可执行文件加入$GOPATH以Windows为例，将下载的压缩包的bin目录下的protoc.exe复制到你的任意path路径下，我放到$GOPATH/bin目录下。 添加Go语言支持命令行执行以下命令： 1go get -u github.com/golang/protobuf/protoc-gen-go 代码生成先编写一个addressbook.proto文件 12345678910111213141516171819202122232425syntax = "proto3";package tutorial;message Person &#123; string name = 1; int32 id = 2; // Unique ID number for this person. string email = 3; enum PhoneType &#123; MOBILE = 0; HOME = 1; WORK = 2; &#125; message PhoneNumber &#123; string number = 1; PhoneType type = 2; &#125; repeated PhoneNumber phones = 4;&#125;// Our address book file is just one of these.message AddressBook &#123; repeated Person people = 1;&#125; 命令行输入以下生成命令： 12protoc --go_out=./ ./addressbook.proto# 命令格式 protoc -I=$SRC_DIR --go_out=$DST_DIR $SRC_DIR/addressbook.proto 在当前目录下生成addressbook.pb.go文件]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Protocol Buffer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录一下在WordPress上用过的插件]]></title>
    <url>%2F2017%2F08%2F27%2F%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8WordPress%E4%B8%8A%E7%94%A8%E8%BF%87%E7%9A%84%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[虽然已经不用WordPress了，但是没准哪天又用上了呢？记录下用过的插件。 插件 描述 Akismet Anti-Spam 由千百万人使用，Akismet可能是保护您的站点免受垃圾评论的世界上最好的方式。 您的站点已完全配置并受到不断的保护。3.3.4版本 由Automattic Chat Room Chat Room for WordPress 0.1.3版本 由WebDevStudios.com Crayon Syntax Highlighter Supports multiple languages, themes, highlighting from a URL, local file or post text. 2.8.4版本 由Aram Kocharyan Jetpack 由 WordPress.com 出品 将 WordPress.com 云的强大功能引入您的自托管 WordPress。Jetpack 使您能够将自己的博客与一个 WordPress.com 帐户连接，以使用一般只有 WordPress.com 用户才可使用的强大功能。 5.2.1版本 由Automattic Netease Music WordPress 音乐播放器，支持网易云音乐和虾米音乐。3.0.4版本 由bigfa Useso take over Google 替换所有的Google字体、谷歌JS公用库、Gravatar头像为geekzu资源。 1.8版本 由Bruno Xu WP User Avatar Use any image from your WordPress Media Library as a custom user avatar. Add your own Default Avatar. 2.0.8版本 由flippercode 你好多莉 这不是普通的插件，它象征着一代人希望和热情，浓缩成Louis Armstrong的四个字：你好，多莉。在启用后，在您站点后台每个页面的右上角都可以看到一句来自《俏红娘》音乐剧的英文原版台词。 1.6版本 由Matt Mullenweg]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些节约生命的操作 (墙内加速 git pip conda npm docker)]]></title>
    <url>%2F2017%2F08%2F06%2F%E4%B8%80%E4%BA%9B%E8%8A%82%E7%BA%A6%E7%94%9F%E5%91%BD%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[前言你是否感觉 pip， npm, git， docker 之类的工具下载安装奇慢？因为它们的默认服务器都在国外，那么需要必要的设置才能发挥咱百兆光纤的作用。下面介绍方法: 如果你用的是 linux，别折腾了挂代理解决一切问题简单配置下全局代理，也可以将下面这句加入 profile 中12# 假如你的代理地址是 http://127.0.0.1:1080export proxy=http://127.0.0.1:1080; export http_proxy=$proxy https_proxy=$proxy no_proxy="localhost, 127.0.0.0/8, ::1"用 privoxy 稍微折腾下见这篇文章 pip 的配置解决方式：使用国内的pypi镜像加速，以阿里源为例。 方法1 修改配置 Linux 123mkdir ~/.pip &amp;&amp; echo "[global]trusted-host = mirrors.aliyun.comindex-url = http://mirrors.aliyun.com/pypi/simple" &gt; ~/.pip/pip.conf 欲使用其他源，自行搜索替换。更多配置参数见官方文档。 Windows 打开powershell(不是cmd!)，粘贴下面命令。 12345mkdir ~/pip/echo "[global]trusted-host = mirrors.aliyun.comindex-url = http://mirrors.aliyun.com/pypi/simple" | out-file -encoding ascii ~/pip/pip.ini 解释：在用户目录(C:\Users\Username)下新建名为pip的目录，目录下新建文件pip.ini，写入阿里的镜像源配置。 P.S 因为默认输出编码为utf16会导致pip出错，必须指定编码。 方法2 临时使用以安装numpy为例。 1pip install numpy -i http://mirrors.aliyun.com/pypi/simple/ conda 的配置方法1 配置代理12conda config --set proxy_servers.http http://id:pw@address:portconda config --set proxy_servers.https https://id:pw@address:port ref: Running conda with proxy 方法2 配置国内镜像1234# 添加 Anaconda 的清华镜像conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/# 搜索时显示通道地址conda config --set show_channel_urls yes ref: Managing channels git 的配置这个就要代理了。 方法1 设置git全局变量我曾经使用的lantern，它提供两种代理端口： Http(s) 和 Socks5。使用下面命令配置git代理： 12git config --global http.proxy http://127.0.0.1:50219git config --global https.proxy https://127.0.0.1:50219 或者 12git config --global http.proxy socks5://127.0.0.1:50221git config --global https.proxy socks5://127.0.0.1:50221 根据你的代理配置，修改对应部分即可。 方法2 设置临时变量git clone 时可以这么写: 1ALL_PROXY=http://127.0.0.1:1080 git clone https://github.com/some/one.git docker解决方法：使用国内的加速地址。获取途径很多。我使用的是阿里云的容器镜像服务里的专属加速地址。 PCODE 是阿里云帐户的加速前缀，后文中请自行替换。可以在这里获取 Linux 修改/etc/docker/daemon.json 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'&#123; "registry-mirrors": ["https://PCODE.mirror.aliyuncs.com"]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker P.S Docker版本需大于1.10.0 Windows 我的系统是Window10，官方推荐使用 Docker for Windows ，此处不介绍 Docker Toolbox 在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写加速器地址，如下所示： 123&#123; "registry-mirrors": ["https://PCODE.mirror.aliyuncs.com"]&#125; 编辑完成，点击 Apply 保存按钮，等待Docker重启并应用配置的镜像加速器。 Docker for Windows 和 Docker Toolbox是不兼容的。 npm 的配置挂代理是最好的解决办法12npm config set proxy http://proxy.company.com:8080npm config set https-proxy http://proxy.company.com:8080 update: 之前的方式均不推荐！ 解决方式：也是替换国内的源，以淘宝源为例。## 方法1 修改默认库配置(不推荐！会有莫名其妙的问题)1npm config set registry https://registry.npm.taobao.org## 方法2 使用cnpm使用cnpm命令替代npm命令。1npm install -g cnpm --registry=https://registry.npm.taobao.org## 方法3 临时替换下载源以安装Express为例。1npm --registry=https://registry.npm.taobao.org install express 后记能省一秒是一秒对吧，毕竟不是所有人都有+1s的能力]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>npm</tag>
        <tag>git</tag>
        <tag>pip</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更换了新域名]]></title>
    <url>%2F2017%2F07%2F15%2F%E7%BD%91%E7%AB%99%E9%9C%80%E8%A6%81%E5%A4%87%E6%A1%88%2F</url>
    <content type="text"><![CDATA[据说万网的域名很坑，当年图方便，偶然发现website域名不用备案，就买了。一直用着都挺好的，今年11月才到期。 本来还打算一直用下去的。可就在前天，想看看自己的博客，不能访问，一个TestPage挡在前面要求我去备案。那没办法，就去呗。可是尼玛，不支持 .website 域名是什么鬼。 这是逼着我把域名往外转啊…… 在GoDaddy上注册一个账号，然后阿里云控制台申请域名转出万网。在GoDaddy上找到域名转入输入域名和邮箱收到转移密码。我去，价格199还强行要续一年，我有点不能接受啊（学生党资金不充裕）。 重新申请吧…… 换个 findshank.com 好了，正巧可以注册，爽爽的。一年60，还能接受。还有个隐私保护又要收60，我就没选，毕竟我填的信息基本是假的啊…… 新域名到手，将域名解析指向云主机的IP。等几分钟试一下。打不开什么鬼？那么全局翻墙，嗯，可以进。 为了方便国内访问，就要换国内的DNS服务器来解析这个域名。Google了一下，就用DNSPod好了，域名解析是免费的，跟着官方提示做很简单，然后GoDaddy上更换自定义解析服务器为DNSPod的提供的地址就好了。 欢迎新朋友访问我的新域名 www.findshank.com 😄 然而，后来发现被封的是云主机，云主机需要备案，这个就没那么容易换了。既然买了域名就折腾 Github Pages 吧！]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>烦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MVC 部分刷新的尝试]]></title>
    <url>%2F2017%2F06%2F15%2FMVC%20%E9%83%A8%E5%88%86%E5%88%B7%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95%2F</url>
    <content type="text"><![CDATA[直接跳到2.0版本 版本0.1 - 简单的异步刷新尝试 ProcessController中加入 12345678910111213[AllowAnonymous] // 这是允许匿名访问的声明，没有用ASP.NET IDENTITY可以删掉public ActionResult PartialTest()&#123; return View();&#125;[AllowAnonymous]public ActionResult Fetch(int num)&#123; // 取前num条数据 var model = db.Movies.Take(num).ToList(); // MovieList是你的Partial页面的名字,model是与该Partial页头部接受的类型一致的model return PartialView("MovieList", model);&#125; /View/Process/PartialTest.cshtml 123456789101112131415161718&lt;button id="btn" class="btn"&gt;加一条&lt;/button&gt;&lt;div id="notificationsTable"&gt; @&#123;Html.RenderAction("Fetch", new &#123; num = 1 &#125;);&#125;&lt;/div&gt;@* 添加JS到布局页，否则找不到jQuery的$标记 *@@section scripts&#123;&lt;script&gt; var n = 2; $(document).ready(function () &#123; $("#btn").click(function () &#123; $("#notificationsTable").load('/Process/Fetch?num=' + n); n++; &#125;); &#125;);&lt;/script&gt;&#125; 地址栏运行/Process/PartialTest 即可 更新 1.0 - 使用@Ajax.ActionLink不希望在cshtml代码里用JS? Razor Helper 还提供了 @Ajax.ActionLink 感谢下面链接里的大佬 传送门 先在VS的程序包管理器控制台输入 (PS.如果有问题就在NuGet搜索安装) 1Install-Package Microsoft.jQuery.Unobtrusive.Ajax 修改/View/Process/PartialTest.cshtml为 123456789101112131415161718192021@Ajax.ActionLink("一条变两条", "Fetch",new &#123; num = 2 &#125;, new AjaxOptions &#123; UpdateTargetId = "notificationsTable", InsertionMode = InsertionMode.Replace, HttpMethod = "GET" &#125;, new &#123; @class = "btn btn-default", @role = "button" &#125;)&lt;div id="notificationsTable"&gt; @&#123;Html.RenderAction("Fetch", new &#123; num = 1 &#125;);&#125;&lt;/div&gt;@section scripts&#123; @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")&#125; 由于用@Ajax.ActionLink生成的按钮是固定的，所以没法像JS那样动态修改请求变量，但是页面的异步刷新效果还是有的 更新 1.1 - 解决上面的问题动态更改ActionLink的routeValues，StackOverflow的回答基本是用JQuery，下面是解决办法： 修改/View/Process/PartialTest.cshtml为： 1234567891011121314151617181920212223242526@Ajax.ActionLink("加一条", "Fetch",new &#123; num = "xxx" &#125;, new AjaxOptions &#123; UpdateTargetId = "notificationsTable", InsertionMode = InsertionMode.Replace, HttpMethod = "GET" &#125;, new &#123; @id = "btn", @class = "btn btn-default", @role = "button" &#125;)@section scripts&#123; &lt;script&gt; var n = 2; var href = $('#btn').attr('href'); $(document).ready(function () &#123; $("#btn").click(function () &#123; this.href = href.replace("xxx", n++); &#125;); &#125;); &lt;/script&gt; @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")&#125; 这里实现了0.1版本一样的功能，是不是有种转了一圈回到原点的感觉？好讽刺啊…… 更新2.0 - Form表单提交实现指定DIV的异步刷新上面讨论了如何按下按钮时异步刷新页面，那么在表单提交我不想跳转，我也要异步刷新，怎么办呢？下面介绍解决办法。这部分实现一个展示不同分类下的电影列表。从 Model - View - Controller 一步步来实现： Model - /Models/Movie 1234567891011121314public class Movie&#123; public int Id &#123; get; set; &#125; [Display(Name = "电影名")] public string Name &#123; get; set; &#125; public enum Types &#123; 动作, 喜剧, 科幻, 爱情, 纪录, 动画, 恐怖, 悬疑, 青春, 文艺, 励志, 战争, 犯罪 &#125; [Display(Name = "类型")] public Types? Type &#123; get; set; &#125;&#125; View - /View/Process/PartialTest2.cshtml 12345678910111213141516171819202122232425262728293031323334353637@model ZeroMovie.Models.Movie&lt;form id="tForm"&gt; &lt;div class="form-horizontal"&gt; &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Type, htmlAttributes: new &#123; @class = "control-label col-md-2" &#125;) &lt;div class="col-md-10"&gt; @Html.EnumDropDownListFor(model =&gt; model.Type, htmlAttributes: new &#123; @class = "form-control" &#125;) &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-md-offset-2 col-md-10"&gt; &lt;input type="submit" value="提交" id="btn" class="btn btn-default" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt; &lt;div id="PartialRefreshArea"&gt;刷新这里&lt;/div&gt;@section scripts&#123; &lt;script&gt; $(document).ready(function () &#123; $('#tform').on('submit', function (e) &#123; e.preventDefault(); $.ajax(&#123; type: 'post', // Form的Method url: '@Url.Action("Fetch","Process")', // Form的Action data: $('#tform').serialize(), // 序列化提交数据 success: function (res) &#123; $('#PartialRefreshArea').html(res); &#125; &#125;); &#125;); &#125;); &lt;/script&gt; @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")&#125; View - /View/Process/MovieList.cshtml 123456789101112131415161718192021@model IEnumerable&lt;ZeroMovie.Models.Movie&gt;&lt;table class="table" style="table-layout:fixed"&gt; &lt;tr&gt; &lt;th&gt; @Html.DisplayNameFor(model =&gt; model.Name) &lt;/th&gt; &lt;th&gt; @Html.DisplayNameFor(model =&gt; model.Type) &lt;/th&gt; &lt;/tr&gt;@foreach (var item in Model) &#123; &lt;tr&gt; &lt;td&gt; @Html.DisplayFor(modelItem =&gt; item.Name) &lt;/td&gt; &lt;td&gt; @Html.DisplayFor(modelItem =&gt; item.Type) &lt;/td&gt; &lt;/tr&gt;&#125;&lt;/table&gt; Controller - /Controller/ProcessController.cs 12345678910111213141516public class ProcessController : Controller&#123; // 上下文类有 DbSet&lt;Movie&gt; private ApplicationDbContext db = new ApplicationDbContext(); public ActionResult PartialTest2() &#123; return View(); &#125; public ActionResult Fetch2([Bind(Include = "Type")] Movie movie) &#123; var model = db.Movies.ToList(); if(movie.Type != null) model = db.Movies.Where(p =&gt; p.Type == movie.Type).ToList(); return PartialView("MovieList", model); // model的类型要与MovieList接受的类型一致 &#125;&#125; 运行后地址栏访问/Process/PartialTest2即可 总结：JS大法好弱弱问一句垃圾代码有人要看吗： 传送门]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>MVC</tag>
        <tag>Razor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EF框架配置使用各种数据库]]></title>
    <url>%2F2017%2F06%2F04%2FEF%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[Content LocalDB SQL Server MySQL Oralce 准备工作环境： Visual Studio Community 2017，Windows 10.0.15063 pro 先新建一个ASP.NET MVC项目DbConnectPrac 程序包管理器控制台安装EF框架 1Install-Package EntityFramework PS. 如果解决方里有多个项目，默认项目注意选择DbConnectPrac Models中新建一个类 Program.cs 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869using System.ComponentModel.DataAnnotations;namespace DbConnectPrac.Models&#123; public class User &#123; [Key] public int Uid &#123; get; set; &#125; [Required] [StringLength(16, MinimumLength = 3)] public string NickName &#123; get; set; &#125; [Required] [StringLength(16, MinimumLength = 6)] public string Password &#123; get; set; &#125; [Required] [RegularExpression(@&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$&quot;)] public string Email &#123; get; set; &#125; public int Privilege &#123; get; set; &#125; &#125; public class Video &#123; [Key] public int Vid &#123; get; set; &#125; [Required] [StringLength(30)] public string Vname &#123; get; set; &#125; [Required] public string Vurl &#123; get; set; &#125; [Required] public string Thumbnail &#123; get; set; &#125; public int ViewedNum &#123; get; set; &#125; [DataType(DataType.Date)] [DisplayFormat(DataFormatString = &quot;&#123;0:yyyy-MM-dd&#125;&quot;, ApplyFormatInEditMode = true)] [Required] public string UploadTime &#123; get; set; &#125; [Required] public string Vtype &#123; get; set; &#125; public int Uid &#123; get; set; &#125; [StringLength(200)] public string Vinfo &#123; get; set; &#125; &#125; public class Comment &#123; [Key] public int Cid &#123; get; set; &#125; [Required] public int Uid &#123; get; set; &#125; [Required] public int Vid &#123; get; set; &#125; [Required] public string Content &#123; get; set; &#125; [DataType(DataType.Date)] [DisplayFormat(DataFormatString = &quot;&#123;0:yyyy-MM-dd&#125;&quot;, ApplyFormatInEditMode = true)] [Required] public string CommentTime &#123; get; set; &#125; &#125; public class History &#123; [Key] public int Hid &#123; get; set; &#125; [Required] public int Uid &#123; get; set; &#125; [Required] public int Vid &#123; get; set; &#125; [DataType(DataType.Date)] [DisplayFormat(DataFormatString = &quot;&#123;0:yyyy-MM-dd&#125;&quot;, ApplyFormatInEditMode = true)] [Required] public string HistoryTime &#123; get; set; &#125; &#125;&#125; 生成解决方案 快捷键 Ctrl+Shift+b Controllers中新建控制器 点击添加，将生成以下文件 分别把另外几个类也创建好带视图的控制器 LocalDBLocalDB是VS自带的简化版SQL Server 查看项目根目录的Web.config，发现已添加了LocalDB的相关内容 12345678910111213&lt;connectionStrings&gt; &lt;add name="DbConnectPracContext" connectionString="Data Source=(localdb)\MSSQLLocalDB; Initial Catalog=DbConnectPracContext-20170603111224; Integrated Security=True; MultipleActiveResultSets=True; AttachDbFilename=|DataDirectory|DbConnectPracContext-20170603111224.mdf" providerName="System.Data.SqlClient" /&gt;&lt;/connectionStrings&gt;&lt;entityFramework&gt; &lt;defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"&gt; &lt;parameters&gt; &lt;parameter value="mssqllocaldb" /&gt; &lt;/parameters&gt; &lt;/defaultConnectionFactory&gt; &lt;providers&gt; &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt; &lt;/providers&gt;&lt;/entityFramework&gt; 运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。 SQL Server版本 2016 Developer edition 在根目录的Web.config中添加SQL Server的连接字段 123456&lt;connectionStrings&gt;&lt;!-- 按实际情况更改 Data Source, User ID, Password --&gt;&lt;add name="MSSQLConnectContext" connectionString="Data Source=localhost; Initial Catalog=TESTDB; Persist Security Info=True; User ID=sa; Password=123" providerName="System.Data.SqlClient"/&gt;&lt;/connectionStrings&gt; 打开Models/DbConnectPracContext.cs 1234567public class DbConnectPracContext : DbContext&#123; // 修改指定使用的数据库连接 //public DbConnectPracContext() : base(&quot;name=DbConnectPracContext&quot;)&#123;&#125; // LocalDB public DbConnectPracContext() : base(&quot;name=MSSQLConnectContext&quot;) &#123;&#125; // SQL Server // .....省略......&#125; 程序包管理器控制台输入 1Enable-Migrations -EnableAutomaticMigrations 运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。 MySQL版本 5.7.18 程序包管理器控制台安装EF框架 1Install-Package MySql.Data.Entity 查看项目根目录的Web.config 更新了以下有关MySQL的内容 1234567891011&lt;entityFramework&gt; &lt;providers&gt; &lt;provider invariantName="MySql.Data.MySqlClient" type="MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d"&gt;&lt;/provider&gt; &lt;/providers&gt;&lt;/entityFramework&gt;&lt;system.data&gt; &lt;DbProviderFactories&gt; &lt;remove invariant="MySql.Data.MySqlClient" /&gt; &lt;add name="MySQL Data Provider" invariant="MySql.Data.MySqlClient" description=".Net Framework Data Provider for MySQL" type="MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d" /&gt; &lt;/DbProviderFactories&gt;&lt;/system.data&gt; connectionStrings中添加MySQL的连接字段 12345&lt;connectionStrings&gt; &lt;add name="MySQLConnectContext" connectionString="server=localhost; port=3306; database=TESTDB; uid=root; password=123" providerName="MySql.Data.MySqlClient"/&gt;&lt;/connectionStrings&gt; 打开Models/DbConnectPracContext.cs完成两处修改 123456789// 在Context指定mySql的配置文件[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]public class DbConnectPracContext : DbContext&#123; // 修改指定使用的数据库连接 //public DbConnectPracContext() : base(&quot;name=DbConnectPracContext&quot;)&#123;&#125; // LocalDB public DbConnectPracContext() : base(&quot;name=MySQLConnectContext&quot;)&#123;&#125; // MySQL // .....省略......&#125; 程序包管理器控制台输入 1Enable-Migrations -EnableAutomaticMigrations 运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。 连接MySQL查看生成的testdb表 Oracle版本 12.2.0.1.0 建议先创建一个新用户，否则使用默认用户可能有意想不到的问题 123456-- 用SQLPLUS登录后，连接管理员 (system_password 是你的管理员密码)CONNECT system/system_password@ORCL-- 该版本Oracle上创建新用户名必须C##或c##开头，否则不合法CREATE USER C##TESTUSER IDENTIFIED BY 123;-- 创建测试用户并授权，要给DBA权限GRANT CONNECT, RESOURCE, DBA, CREATE VIEW TO C##TESTUSER ; 程序包管理器控制台安装EF框架 1Install-Package Oracle.ManagedDataAccess.EntityFramework 查看根目录的Web.config 更新了以下有关Oracle的内容 123456789101112131415161718192021222324&lt;configSections&gt; &lt;section name="oracle.manageddataaccess.client" type="OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt;&lt;/configSections&gt;&lt;connectionStrings&gt; &lt;add name="OracleDbContext" providerName="Oracle.ManagedDataAccess.Client" connectionString="User Id=oracle_user;Password=oracle_user_password;Data Source=oracle" /&gt;&lt;/connectionStrings&gt;&lt;entityFramework&gt; &lt;providers&gt; &lt;provider invariantName="Oracle.ManagedDataAccess.Client" type="Oracle.ManagedDataAccess.EntityFramework.EFOracleProviderServices, Oracle.ManagedDataAccess.EntityFramework, Version=6.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt; &lt;/providers&gt;&lt;/entityFramework&gt;&lt;system.data&gt; &lt;DbProviderFactories&gt; &lt;remove invariant="Oracle.ManagedDataAccess.Client" /&gt; &lt;add name="ODP.NET, Managed Driver" invariant="Oracle.ManagedDataAccess.Client" description="Oracle Data Provider for .NET, Managed Driver" type="Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342" /&gt; &lt;/DbProviderFactories&gt;&lt;/system.data&gt;&lt;oracle.manageddataaccess.client&gt; &lt;version number="*"&gt; &lt;dataSources&gt; &lt;dataSource alias="SampleDataSource" descriptor="(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL))) " /&gt; &lt;/dataSources&gt; &lt;/version&gt;&lt;/oracle.manageddataaccess.client&gt; connectionStrings中修改Oracle的连接字段的参数 123456&lt;connectionStrings&gt; &lt;!-- 因为生成的&lt;dataSources&gt;中服务名是ORCL，与我的设置相同，所以这里直接用别名SampleDataSource--&gt; &lt;add name="OracleDbContext" providerName="Oracle.ManagedDataAccess.Client" connectionString="User Id=C##TESTUSER;Password=123;Data Source=SampleDataSource" /&gt;&lt;/connectionStrings&gt; 修改Models/DbConnectPracContext.cs 123456789101112131415namespace DbConnectPrac.Models&#123; public class DbConnectPracContext : DbContext &#123; // 修改指定使用的数据库连接 //public DbConnectPracContext() : base(&quot;name=DbConnectPracContext&quot;) &#123; &#125; // LocalDB public DbConnectPracContext() : base(&quot;name=OracleDbContext&quot;) &#123; &#125; // Oracle // 默认的模式名是dbo，但Oracle中不存在模式名为dbo，需要指定默认模式名 protected override void OnModelCreating(DbModelBuilder modelBuilder) &#123; modelBuilder.HasDefaultSchema(&quot;C##TESTUSER&quot;); // 默认模式名就是把你用户名大写 &#125; // .....省略...... &#125;&#125; Oracle中不存在模式名为dbo，dbo是SQL Server数据库的，如图例。 程序包管理器控制台输入 1Enable-Migrations -EnableAutomaticMigrations 运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。 连接Oracle查看生成的表 最后一次测试时，发现一个BUG，如果把刚生成的表全删除，试图通过重新运行项目重新建表，会失败。这个情况只在Oracle上发生，大概官方还没注意到这个BUG。“一次性”用户真是尴尬……]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
        <tag>EntityFramework</tag>
        <tag>Oracle</tag>
        <tag>SQL Server</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSMC的使用]]></title>
    <url>%2F2017%2F01%2F18%2FOSMC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言去年某宝上买了 Raspberry Pi 2B，期间玩过一段时间的Raspbian，没有买其他配件，全当练习使用linux了。最近盯上了 OSMC，所以，要搞事情！ 设备 Raspberry Pi 2B ​官方说支持全系列的Pi板子 32G SAMSUNG micro SDHC 支持的SD卡可以去官方看支持列表，容量不低于8G HDMI to HDMI 线 ​看需求吧，能把Pi连上电视就行 EDUP EP-N8508GS USB网卡 ​即插即用，支持802.11N。如果你的网线够长可以不用 刷系统传送门 OSMC 你可以使用官方的安装器(支持Windows/Linux/OSX)，也可以下载镜像自己刷。 我选择下载镜像在win下刷入： 准备 SD卡 插入电脑 安装 SD Card Formatter 安装 Win32 Disk Imager 解压下载的系统zip包 操作 使用 SDFormatter V4.0 格式化SD卡 Drive 选中你的SD卡盘符 选项设置 -&gt; 逻辑大小调整 -&gt; 开启（ON）-&gt; OK -&gt; 格式化 使用 Win32 Disk Imager V0.9.5 刷入系统 Device 选中你的SD卡盘符 Image File 选中OSMC的img文件 选择 Write 刷好SD卡插入Pi Pi 用视频线接电视，开电视，切换信号源到 HDMI Pi 用microUSB接电源适配器 Pi 上接键盘 开机配置系统……语言暂时用English(US)，联网 软件配置 语言设置 Settings -&gt; Apperance -&gt; Skin -&gt; Fonts -&gt; Arial Settings -&gt; Apperance -&gt; International -&gt; Language -&gt; Chinese(Simple) 现在就是显示中文了，下面还有些鸡肋的设置 设置 -&gt; 用户界面 -&gt; 字符集 -&gt; Chinese Simplified (GBK) 设置 -&gt; 用户界面 -&gt; 键盘布局 -&gt; 添加 Chinese BaiduPY 安装插件库 传送门 使用zip包的安装方式，先在同局域网的电脑上下载 chinese addon 、hdpfans 选择插件，选择安装，按Backspace到最外层，选择zip包安装插件，选择安装刚下的两个插件。 寻找你需要的插件，安装即可。 使用 app 控制Remote Control Android Kore 官方软件 Yatse 功能一样，Google Play上售价0.99$ iOS Official Kodi Remote 官方软件 WP 下面摘抄自kodi.wiki mrRemote for Kodi by Domenico Rescigno (free) Kodi Assist by akshay2000 (free) xbmc remote free by CRW Solutions (free) XBMC Maestro by 3Webers ($0.99 USD) Kodi Remote by Fabien Lavocat (free)]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>OSMC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重装Ubuntu的配置及折腾rEFInd]]></title>
    <url>%2F2017%2F01%2F17%2F%E9%87%8D%E8%A3%85Ubuntu%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%8A%98%E8%85%BErEFInd%2F</url>
    <content type="text"><![CDATA[前情提要为什么突然会折腾这个？因为我格盘重装了系统，因为强迫症发作，以前装得win10竟然不是EFI+GPT……虽然装固态上，启动速度没有区别，但我就是要折腾……既然折腾完了，全部过程记录下，不愿看这么多，也可以直接跳到rEFInd的配置。 先安装win10用官方工具做一个安装盘，bios选择中启动方式EFI Only，并开启Secure Boot 。（对，网上那些辣鸡教程都TM教你关掉，但是不告诉你原因，听我的，不用关，装ubuntu也不用关，因为ubuntu申请了EFI安全证书的！） 接着开机插入U盘，按提示安装就好，记得把分区方式改成GPT。（若你之前是MBR，要么把原来分区全删掉，要么按网上教程做个EFI+MBR，反正我是强迫症，我就要格盘！） 如何辨别是不是EFI启动呢？ win + R ，输入 msinfo32 ，回车，引导方式那行是 EFI 就对了。 再安装ubuntu16.04这个更简单，把官方iso镜像文件，直接解压到FAT32格式U盘的根目录，开机，进U盘，安装。到那个然要现在win下切好未分配空间，这次我切了40G。小本子有8G内存，swap分区完全不用分的。在之前我试过所有未分配空间都挂到根目录，一样用着好好的，只有一点问题，只能挂起，不能休眠。 那么这次的分区方案是8G的swap，剩下全挂 / 根目录。 启动器挂在ubuntu所在硬盘，我是在第二快硬盘 /dev/sdb 上。 ubuntu配置记录先要感谢plum的博客，看他的博客让我解决的不少问题 既然用了一段时间的ubuntu，解决了不少问题，这里的配置与上一篇有点不同，重新记录如下： 修改本地文件夹名称为英文 如果你安装系统时选择了中文，那么用户目录就默认是中文，带你cd目录的时候就知道多蛋疼！ 1234export LANG=en_USxdg-user-dirs-gtk-updateexport LANG=zh_CNreboot 关闭鼠标加速 Ubuntu16.04默认开启了鼠标加速，用触控板到感觉不到，用鼠标这么飘就不能忍了！ 123456在Dashboard里搜索:gnome-session-properties点击添加：名称：setmouse命令：xset m 0 或者 xset m default重启。 安装 lantern 接下来要安装软件了，我希望网络要没有阻碍，梯子是必须先装的！ 123cd ~/Downloads/wget https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta-64-bit.debsudo dpkg -i lantern-installer-beta-64-bit.deb 打开lantern，进入设置，查看两个端口号，我的是： 12HTTP(S) proxy: 127.0.0.1:44045SOCKS proxy: 127.0.0.1:43355 然后终端输入下面两句来全局代理 12export all_proxy=socks://127.0.0.1:43355export ALL_PROXY=socks://127.0.0.1:43355 如果想取消掉的话： 12unset all_proxyunset ALL_PROXY 接着配置 lantern 的开机无界面启动 12345在Dashboard里搜索:gnome-session-properties点击添加：名称：lantern命令：/usr/bin/lantern -headless 安装 git 1234sudo apt install git -y# 设置 git 代理（http &amp; https 代理）git config --global http.proxy socks5://127.0.0.1:43355git config --global https.proxy socks5://127.0.0.1:43355 安装功耗控制 TLP 12345678sudo apt-get install tlp tlp-rdw -ysudo apt-get install tp-smapi-dkms acpi-call-dkms -ysudo apt-get install thermald -ysudo apt-get install powertop -y# 配置 TLPsudo vim /etc/default/tlp# 启动 TLPsudo tlp start 消除 Ubuntu LightDM 登陆界面背景白点 不能忍，影响我看锁屏壁纸！ 12345gsettings set com.canonical.unity-greeter draw-grid falsesudo xhost +SI:localuser:lightdmsudo su lightdm -s /bin/bashgsettings set com.canonical.unity-greeter draw-grid falseexit 安装 arc-flatabulous 主题 Arc-Flatabulous Theme 1234567891011# 安装依赖sudo apt install autoconf automake libgtk-3-dev -y# 安装 unity-tweek-toolsudo apt install unity-tweak-tool -y# 官方安装方式sudo rm -rf /usr/share/themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;rm -rf ~/.local/share/themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;rm -rf ~/.themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;git clone https://github.com/andreisergiu98/arc-flatabulous-theme &amp;&amp; cd arc-flatabulous-theme# 编译安装，不想见透明效果，编译时加参数 --disable-transparency./autogen.sh --prefix=/usr &amp;&amp; sudo make install 安装 papirus 图标主题 papirus-icon-theme 12sudo apt install wget git libqt4-svg -y wget -qO- https://raw.githubusercontent.com/PapirusDevelopmentTeam/papirus-icon-theme/master/install-papirus-root.sh | sh 安装 Hardcode-Tray 图标修复 对右上角那些图标风格不统一，可以试试，但是只支持部分图标修复，这个软件蛮鸡肋的…… 12345678sudo add-apt-repository ppa:andreas-angerer89/sni-qt-patchedsudo apt updatesudo apt install sni-qt sni-qt:i386 hardcode-tray -y# 使用 Hardcode-Trayhardcode-tray --apply# 如果出现 FileNotFoundError: [Errno 2] ，建一个软链接ln -s /usr/share/icons/ ~/.local/share/iconshardcode-tray --apply 更改鼠标指针样式 123下载 Breeze-Hacked 并解压cp -a Breeze-Hacked/ /usr/share/icons/在 unity-tweek-tool 里更换 使用terminator及ZSH 普通用户 1234567sudo apt-get install terminator zsh -ychsh -s /bin/zshwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | shvim ~/.zshrc # 添加以下内容# ZSH_THEME="agnoster"# DEFAULT_USER="shank"# COMPLETION_WAITING_DOTS="true" root用户 1234567sudo suwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | shvim ~/.zshrc # 添加以下内容# ZSH_THEME="agnoster"# DEFAULT_USER="root"# COMPLETION_WAITING_DOTS="true"exit 安装PowerLine字体 1234cd ~/Downloadsgit clone https://github.com/powerline/fontscd fonts./install.sh 常规更新 12sudo apt updatesudo apt upgrade 安装 Deluge 下载工具，带有BT和磁链下载 1sudo apt install deluge -y 安装 caffeine 用于暂时取消屏保和睡眠模式，用linux看视频时记得把它设为Active 123sudo apt install caffeine -y# 在 gnome-session-properties 开机启动中添加或修改Caffeine的命令为下面这句# /usr/bin/caffeine-indicator 安装 mpv 简介而强大的播放器，不用VLC因为它对字幕支持不好！ 1sudo apt-get install mpv -y 安装 flash 支持 B站的Html5播放器总是没速度，所以flash还是必需的！ 12#先在设置中允许 Canonical Partners 打包的应用sudo apt install adobe-flashplugin -y 解决待机后重启会自动断线的 Bug 1sudo systemctl enable NetworkManager.service 使用 Canonical Livepatch Service Canonical Livepatch Service 免重新开机做核心 12sudo snap install canonical-livepatchsudo canonical-livepatch enable XXX #XXX从官方获取 安装指纹识别支持 这个可以用，但是会觉得的有点烦，因为这个软件有个bug，刷指纹一定要刷两下，验证成功，还要再刷一下指纹灯才会灭，所以我已经不用了…… 12sudo add-apt-repository ppa:fingerprint/fprint -y &amp;&amp; sudo apt-get updatesudo apt-get install libfprint0 fprint-demo libpam-fprintd gksu -y Fcitx 输入法换回原生 indicator，不用那个 qim 1sudo apt remove fcitx-ui-qimpanel -y 安装 android studio 官方链接下载zip安装包 123456789101112# 安装 jdksudo apt install openjdk-8-jdk -y# 安装依赖sudo apt-get install lib32z1 lib32ncurses5 lib32stdc++6 -y# 解决无 pixmap 问题sudo apt-get install gtk2-engines-pixbuf -y# 解决无 adwaita 问题sudo apt-get install gnome-themes-standard gnome-themes-standard-data -y# 安装a.s.，我习惯把a.s.装到 /opt 目录sudo unzip -q ~/Downloads/android-studio……… -d /opt # 省略号部分自己按TAB替换cd /opt/android-studio/bin/./studio.sh Firefox 字体问题 （不用改了，新版本好像解决了这个问题） 123地址栏输入 about:config找到 gfx.font_rendering.fontconfig.fontlist.enabled设置为 false 安装 typola ,本人最喜欢的 markdown 编辑器 typola官方链接 1234567# optional, but recommendedsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE# add Typora's repositorysudo add-apt-repository 'deb https://typora.io ./linux/' -ysudo apt-get update# install typorasudo apt-get install typora -y rEFIndrEFInd官方链接 123456789101112sudo apt-add-repository ppa:rodsmith/refind -y sudo apt-get updatesudo apt-get install refind -ysudo cd /boot/eft/EFI/refindsudo sumkdir themescd themes# 下载新主题git clone https://github.com/EvanPurkhiser/rEFInd-minimal.gitcd ..cp refind.conf refind.conf.bakgedit refind.conf 添加设置到文件结尾，具体看配置文件或者Google 12345resolution 1920 1080scan_all_linux_kernels falsedefault_selection Microsoft# 导入主题配置：include themes/rEFInd-minimal/theme.conf 这个时候重启是使用不了rEFInd的，因为开了Secure Boot的缘故。那么要解决允许Secure Boot的问题，就要给他授权。官方提供的方案有 Shim 和 PreLoader，外文博客基本介绍的也是Shim。都比较麻烦，不愿看也不愿做（—。—），偶然发现了 boot-repair 。这个软件是傻瓜化修复启动引导用的，它解决安全引导的同时也会装 Shim，正好省得我动手。先装 boot-repair 123sudo add-apt-repository ppa:yannubuntu/boot-repairsudo apt-get updatesudo apt-get install -y boot-repair &amp;&amp; boot-repair 选择推荐方案(Recommended repair)，接着都是“yes”引导修复后，可以apt重装下refind，应该同时会申请 *.cer 文件然后重启，和官方 Slim授权的方式一样，Select key选第一个，给EFI/refind/key目录下的refind.cer和refind_local.cer文件授权，然后选择重启。 授权后的一些调整 12345678sudo su# 删除一个多余启动文件rm -f /boot/efi/EFI/Boot/bkpbootx64.efi# 想要refind选择ubuntu就直接进系统，不用再显示grub2菜单vim /etc/default/grub # 修改 GRUB_TIMEOUT=0rm -f /etc/grub.d/30_os-prober # grub不记录win10引导# 更新gurbupdate-grub]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>EFI</tag>
        <tag>rEFInd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从放弃Windows到使用IRC]]></title>
    <url>%2F2017%2F01%2F09%2F%E4%BB%8E%E6%94%BE%E5%BC%83Windows%E5%88%B0%E4%BD%BF%E7%94%A8IRC%2F</url>
    <content type="text"><![CDATA[前情提要Windows 已经删了，最近都在 Ubuntu 上，不小心接触了IRC这个古老的东西，研究了一晚上，给破站加点新玩意。 博客迁移后，聊天室已不存在。 IRC（Internet Relay Chat的缩写，“因特网中继聊天”）是一种通过网络的即时聊天方式。 见Wiki 讲故事 背景 准备好好适应使用linux来编程，趁着假期，打算完全不去碰windows，重新安装了双系统，这次仗着内存8G够用，swap分区就不要了，全部40G都挂到 / 目录上。 问题 觉得跟外界联系还是挺重要的，虽然QQ可以挂在手机上，但是用着linux要分享个链接什么的麻烦的要死，没法好好聊天啊。 Telegram 看别人用着Telegram好好的，可是到我想用时，GFW就让它失联了。而且为了找人聊天让别人在装个软件也麻烦。 IRC 第一次见IRC还是上次整越狱的老iTouch时，搜资料偶然发现了Kiwi IRC。正好是开源的，这次拿来练手。 说正事其实安装过程官方给的太详细了，没什么好说的 (-_-||| Kiwi的安装过程参考官方教程： 传送门 务必先装好 openssl 和 openssl-dev | openssl-devel 参考另一款老牌IRC （UnrealIRCd）的安装，就可以理解配置文件的设置，下面推荐两个博客 博客1 博客2 讲废话为什么我不用 UnrealIRCd 呢？因为只有一个服务端，客户端还要自己另外找。 Kiwi IRC 的易用在于，它把服务端和客户端整合了，在云主机上装好后，直接从端口进入客户端，直接连接另一端口的服务端。 去看看本站的聊天室吧： Chatting Room 来自2018/10/29：“ 放弃 Windows… Steam on linux… 真香~ ”]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>IRC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一点数据库笔记]]></title>
    <url>%2F2017%2F01%2F03%2F%E4%B8%80%E7%82%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Markdown 是个好东西，用了一段时间，这次把自己一点数据库课的笔记放上来，练习下 Markdown 。 函数介绍数据语句 DECLARE 声明若干局部变量 SET 一个变量赋值 SELECT 多个变量赋值 PRINT 返回用户自定义信息 循环控制语句 BEGIN END 语句块 GOTO 跳转到标签 123456BEGINGOTO skipselect * from studentskip:PRINT 'hello'END IF ELSE 条件判断 CASE 多分支选择 12345678select score,(casewhen score &gt; 90 then 'excellent'when score &gt; 80 then 'good'when score &gt; 60 then 'ok'else 'not well'end) as ratefrom student WHILE _循环_ 1234whilebegin--code hereend WAITFOR _暂停_ 12WAITFOR DELAY '11:00'WAITFOR TIME '01:00' 聚合函数 AVG COUNT MAX MIN SUM DISTINCT 数学函数 ABS 绝对值 ceiling 大于或等于 floor 小于或等于 rand 返回0-1的随机数 round 四舍五入到指定精度 字符串函数 ascii 第一字符的ascii值 char 返回ascii对应字符 charindex 返回匹配位置 itrim 去除左空格 rtrim 去除右空格 left 截断左侧指定长度字符 right 截断右侧指定长度字符 len 返回长度 lower _小写_ upper _大写_ reverse _转置_ replace 指定字符替换 space 指定空格数 stuff 替换字符串的指定范围 substring 返回指定范围字符串 日期和时间函数 dateadd 给指定日期添加一段时间 datediff 两日期相减 datename 返回指定日期的部分 day 指定日期的天数 dayofyear 年内天数 month 返回日期的月份 year 返回日期的年份 getdate 返回系统时间 datepart 返回指定部分整数 isDate 检测日期有效性 语句提升约束与规则规则 规则只允许在当前数据库创建 规则不能绑定到数据类型 char、 int、 image、 text 中 创建规则 123create rule 规则名as 规则/* 规则可以是where语句任何有效的表达式 */ 绑定规则 12use 数据库名exec sp_bindrule '规则名','数据库表字段' 解绑规则 12use 数据库名exec sp_unbindrule '数据库表字段' 删除规则 1drop rule '规则名' 约束 添加check约束 12alter table 表名add [constraint 约束名] check(约束) 删除check约束 12alter table 表名drop constraint 约束名 区别 约束和表的定义联系，删除表的同时约束也删除。规则是单独存储的数据库对象，独立于表外，删除表时并不能删除规则。 一个字段可有多个约束，但只能有一个规则。 SELECT高级查询IN, NULL IN 查询符合列表中任何一个值的记录 12select * from table1 where score in (70,80,90);select * from table2 where score in (select score from table1); NULL | NOT NULL 字段是否为空 1select * from table1 where items in null; SELECT 用于将查询结果存储到另一个表 123select top 5 *into table3from table2; GROUP BY 用于数据汇总 123select name,avg(age) as avg_agefrom studentgroup by name; 嵌套查询 子查询作为新增列 作为外层select语句的列值 12345select avg_score = (select avg(score) from score)from scoreorder by score.id; 使用IN关键字 主要用于where子句后面的子查询。 1234567select a.namefrom student as awhere a.id in(select b.id from score as bwhere b.score = 80)order by a.id; 比较运算符 1234567select a.namefrom student as awhere a.id in(select b.idfrom score as bwhere b.score &lt;= 80) order by a.id; BETWEEN 12345678select a.namefrom student as awhere a.id in(select b.id from score as bwhere b.scorebetween 80 and 90) order by a.id; EXISTS 1234567select *from table1where exists(select scorefrom table1where score = 80)/* IN和EXISTS都代表的是子查询存在某个值，但是IN用的时候，子查询只能是一个字段，但是EXISTS可以用多个字段。 */ 多表连接JOIN…ON举例 表A snum name age sex 1 AA 12 M 2 BB 13 F 3 CC 24 M 4 DD 21 F 表B snum score 1 10 2 20 5 40 inner join snum name age sex snum score 1 AA 12 M 1 10 2 BB 13 F 2 20 left join snum name age sex snum score 1 AA 12 M 1 10 2 BB 13 F 2 20 3 CC 24 M null null 4 DD 21 F null null right join snum score snum name age sex 1 10 1 AA 12 M 2 20 2 BB 13 F 5 40 null null null null full join snum name age sex snum score 1 AA 12 M 1 10 2 BB 13 F 2 20 3 CC 24 M null null 4 DD 21 F null null null null null null 5 40 UNION 拼接字段相同的表 123select * from student as aunionselect * from student as b 数据操纵进阶insert插入多行123insert into table2select name,sex,phone,emailfrom table2 select … into1select * into table1 from table2 update基于级联1234update table1 set table1.c = table2.cfrom table1 inner join table2on table1.a = table2.awhere table1.c is null 带有output12345678-- 查询新行的属性insert into table1(a) output inserted.a values('123')-- 查询旧行的属性delete into table1 output deleted.a where a = '123'-- 返回修改后的值update table1 set a = 'b' output inserted.a where a = '123'-- 返回修改前的值update table1 set a = 'b' output deleted.a wherer a = '123' 视图、索引、触发器视图 创建视图 123create view 视图名asselect语句 视图结果集排序 1234create view stu1asselect top 3 * from table2order by id 多张表进行视图查询 1234567create view stu2asselect b.score,b.name,a.name,sex,agefrom student as ainner joinscore as bon a.id = b.id 修改视图 123alter view 视图名asselect语句 删除视图 1drop view 视图名 增删改 视图可以对基本表的数据进行查询，还可以向基本表增删改 select 子句不可用聚合函数 不能包含算式表达式结果的列 视图引用多表，无法使用delete 索引优点 通过创建唯一索引，可以保证数据记录的唯一性。 可以大大加快数据检索速度。 可以加速表与表之间的连接，这一点在实现数据的参照完整性方面有特别的意义。 在使用order by和group by子句中进行检索数据时，可以显著减少查询中分组和排序的时间。 使用索引可以在检索数据的过程中使用优化隐藏，提高系统性能。 缺点 创建索引要花费时间和占用存储空间。 建立索引加快了数据检索速度，但是减慢了数据修改速度。 不应创建索引列的情况 很少或从来不在查询中引用的列，因为系统很少或从来不根据这个列的值去查找数据行。 只有两个或很少几个值的列，例如性别。 以bit、text、image数据类型定义的列。 数据行输很少的表一般也没有必要创建索引。 触发器DML触发器 after触发器 记录改变后才激活触发器 after触发器包括 insert、delete、update触发器 1234567after insertasbeginSET NOCOUNT ON;/* process */endgo instead of 触发器 直接执行触发器，不执行sql语句 instead of 触发器包括insert、delete、update触发器 1234567891011instead of insertasbeginSET NOCOUNT ON;/* process */if @age &gt; 25print 'Too old!'elseinsert into score(name,age) values(@name,@age)endgo]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iPod touch 上搭建开发环境]]></title>
    <url>%2F2017%2F01%2F01%2FiPod%20touch%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[前言老touch在抽屉里躺了好几年，偶然把它翻出来，这么一个PDA，现在顶多用来听歌，怪可惜的，好像用它搞事情啊。 正题闲来无事google了一下”iTouch c++”，发现一个大神的博客 博客传送门 这么详细的教程，妥妥的要动手试一试啊。 过程抄别人的没意思，自己又不愿写，毕竟大神写得太完整了！ 虽然有些小问题，我就说说我碰到的问题: 测试 nic 时，输入nic提示没有找到perl 解决：估计是版本升级后安装位置改了，为了不影响老的配置文件，直接建个软链接解决问题 1ln -s /usr/local/bin/perl /usr/bin/ 测试mysql时，我在设置里找半天没看到mysql 解决：原来博客未提到要装mysql，直接在cydia里搜索安装就好 结果 后记 轻量级webserver 话说在cydia里搜索”mysql”时，看到还有个搜索结果 “touch-lighttpd-php-mysql”，这个玩意有趣了，轻量级的webserver整合，有了它，可以在touch里搭个wordpress了，哈哈。安装好插件，浏览器访问touch的ip，精简的”is works”页面…… 然后装wordpress我就不在这谈了，直接上结果 但是装好的wordpress遇到点小问题，进入”仪表盘”会出现 服务器500 错误，这个貌似是内存不足，唉~touch的硬伤，写文章是没有问题的，所以不管了。 apt 工具 按照博客装了 apt 的插件后，装其他插件完全可以向用 linux 一样爽啊但是同样遇到一个小问题，我使用 “sudo apt-get install XXX” 安装软件时，出现了 “segmentation fault 11…”google了一番，解决方案是： 1sudo rm -rf /var/cache/apt/*.bin 再推荐大家装些常用插件，内容见另一篇的博客 博客传送门 最后感谢 iOS JailbreakiOS Jailbreak]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将UWP应用部署到其他win10设备]]></title>
    <url>%2F2016%2F12%2F20%2F%E5%B0%86UWP%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E4%BB%96win10%E8%AE%BE%E5%A4%87%2F</url>
    <content type="text"><![CDATA[What老夫有台VenuePro8，系统是win10，所以想把它作为UWP测试机，一直不知道怎么把应用部署到平板上。 最近才发现，原来vs2015早就有这个功能了，下面来讲一讲具体的操作。 How 首先在开发机上打开vs2015，打开项目 视线先切换到win10平板，cmd -&gt; ipconfig 默默记下它的ip，打开设置 -&gt; 更新和安全 -&gt; 针对开发者 -&gt; 打开“设备发现” 接着出现一个配对按钮，点击。默默记下PIN码。 视线切回开发机，右键vs菜单栏底部，勾上“标准”（默认那个是勾上的……） 选择你需要的解决方案平台，然后部署设备切换到远程计算机 输入平板的ip，再点击“选择”。 Ctrl+F5，开始执行项目。 编译过程中会弹出对话框，要求输入另一台主机的PIN，输入上面的找到的PIN即可。 然后你的UWP项目就会在你的平板上安装了。(-_-||) 请无视我的low逼课程表UWP……]]></content>
      <categories>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>UWP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【C++】时间片轮转算法模拟]]></title>
    <url>%2F2016%2F11%2F20%2F%E3%80%90C%2B%2B%E3%80%91%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E7%AE%97%E6%B3%95%E6%A8%A1%E6%8B%9F%2F</url>
    <content type="text"><![CDATA[就一个链式队列实现进程控制块的扔来扔去 主要代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;bits/stdc++.h&gt;using namespace std;typedef struct pcb&#123; char Name[256]; //进程名 int ArriveTime; //到达时间 int ServeTime; //服务时间 int cpuTime; //cpu执行时间 char status; //进程状态 C-Coming, W-Wait, R-Run, F-Finish struct pcb *next; //向下一个pcb int finishTime; //完成时间 int RoundTime; //周转时间 double WRoundTime; //带权周转时间&#125;*PCB;struct LinkPCB&#123; PCB Front; PCB Rear;&#125;;int pTime; //时间片大小int now; //时间线void PrintPCB(pcb* k); //打印pcbvoid PrintTitle(); //打印表头void PrintLinkPCB(LinkPCB* k); //打印pcb队列void InitQueue(LinkPCB* p); //初始化队列bool isEmpty(LinkPCB* p); //判断队列是否为空bool EnQueue(LinkPCB* p, pcb* e); //入队，将e入队bool DeQueue(LinkPCB* p, pcb* e); //出队，出队到evoid FromA2B(LinkPCB* a, LinkPCB* b, char st); //出队列a，进队列b，改变状态为stvoid create(LinkPCB* head); //创建pcb列表void Test(LinkPCB* head); //队列测试函数void RoundRobin(LinkPCB *head); //时间片轮转调度模拟LinkPCB HEAD;int main()&#123; create(&amp;HEAD); RoundRobin(&amp;HEAD); return 0;&#125; 函数实现void PrintPCB(pcb* k)&#123; printf("%s\t%c\t%d\t%d\n", k-&gt;Name, k-&gt;status, k-&gt;ServeTime, k-&gt;cpuTime);&#125;void PrintTitle()&#123; cout &lt;&lt; "name\tstatus\tserve\tcpu\n";&#125;void PrintLinkPCB(LinkPCB* k)&#123; pcb* p = k-&gt;Front-&gt;next; while (p) &#123; PrintPCB(p); p = p-&gt;next; &#125;&#125;void InitQueue(LinkPCB* p)&#123; p-&gt;Front = p-&gt;Rear = new pcb; p-&gt;Front-&gt;next = NULL; p-&gt;Rear-&gt;next = NULL;&#125;bool isEmpty(LinkPCB* p)&#123; return p-&gt;Front == p-&gt;Rear;&#125;bool EnQueue(LinkPCB* p, pcb* e)&#123; if (e) &#123; e-&gt;next = NULL; p-&gt;Rear-&gt;next = e; p-&gt;Rear = e; return true; &#125; else return false;&#125;bool DeQueue(LinkPCB* p, pcb* e)&#123; if (p-&gt;Rear == p-&gt;Front) return false; pcb* top = p-&gt;Front-&gt;next; *e = *top; // important p-&gt;Front-&gt;next = top-&gt;next; if (p-&gt;Rear == top) &#123; p-&gt;Rear = p-&gt;Front; &#125; return true;&#125;void FromA2B(LinkPCB* a, LinkPCB* b, char st)&#123; pcb* p = new pcb; DeQueue(a, p); p-&gt;status = st; EnQueue(b, p); switch (st) &#123; case 'W': cout &lt;&lt; p-&gt;Name &lt;&lt; " is waiting\ttime: " &lt;&lt; now &lt;&lt; "\n"; break; case 'R': cout &lt;&lt; p-&gt;Name &lt;&lt; " is running\ttime: " &lt;&lt; now &lt;&lt; "\n"; break; case 'F': cout &lt;&lt; p-&gt;Name &lt;&lt; " is finish\ttime: " &lt;&lt; now &lt;&lt; "\n"; p-&gt;finishTime = now; p-&gt;RoundTime = p-&gt;finishTime-p-&gt;ArriveTime; p-&gt;WRoundTime = 1.0*p-&gt;RoundTime/p-&gt;ServeTime; break; case 'C': default: cout &lt;&lt; "......" &lt;&lt; endl; &#125;&#125;void create(LinkPCB* head)&#123; InitQueue(head); cout &lt;&lt; "请输入时间片大小："; cin &gt;&gt; pTime; cout &lt;&lt; "请输入要创建的进程数："; int n; cin &gt;&gt; n; for (int i = 1; i &lt;= n; i++) &#123; pcb* ft = head-&gt;Front-&gt;next; pcb* p = new pcb; // important printf("输入第%d个进程的“ 进程名 到达时间 服务时间” （以空格隔开）", i); char Name[256]; int Atime, Stime; cin &gt;&gt; Name &gt;&gt; Atime &gt;&gt; Stime; if (Atime &gt;= 0 &amp;&amp; Stime &gt;= 0) &#123; strcpy(p-&gt;Name, Name); p-&gt;ArriveTime = Atime; p-&gt;ServeTime = Stime; p-&gt;cpuTime = 0; p-&gt;status = 'C'; p-&gt;next = NULL; // sort if (ft == NULL) &#123; EnQueue(head, p); &#125; else if (p-&gt;ArriveTime &lt; ft-&gt;ArriveTime) &#123; p-&gt;next = ft; head-&gt;Front-&gt;next = p; &#125; else &#123; pcb* a = ft; pcb* b = a-&gt;next; bool flag = true; while (b) &#123; if (p-&gt;ArriveTime &lt; b-&gt;ArriveTime) &#123; p-&gt;next = b; a-&gt;next = p; b = NULL; flag = false; break; &#125; else &#123; a = a-&gt;next; b = b-&gt;next; &#125; &#125; if (flag) &#123; EnQueue(head, p); &#125; &#125; &#125; else &#123; cout &lt;&lt; "输入错误,请重输!" &lt;&lt; endl; i--; continue; &#125; // PrintLinkPCB(head); &#125;&#125;void Test(LinkPCB* head)&#123; InitQueue(head); while (true) &#123; cout &lt;&lt; "1.EnQueue 2.DeQueue 3.Print"; int ch; cin &gt;&gt; ch; pcb* p = new pcb; switch (ch) &#123; case 1: cout &lt;&lt; "input: name atime stime" &lt;&lt; endl; char Name[256]; int Atime, Stime; cin &gt;&gt; Name &gt;&gt; Atime &gt;&gt; Stime; strcpy(p-&gt;Name, Name); p-&gt;ArriveTime = Atime; p-&gt;ServeTime = Stime; p-&gt;cpuTime = 0; p-&gt;status = 'W'; p-&gt;next = NULL; EnQueue(head, p); break; case 2: if (DeQueue(head, p)) PrintPCB(p); break; case 3: default: PrintLinkPCB(head); &#125; &#125;&#125;void RoundRobin(LinkPCB *head)&#123; LinkPCB *ready = new LinkPCB; LinkPCB *run = new LinkPCB; LinkPCB *finish = new LinkPCB; InitQueue(ready); InitQueue(run); InitQueue(finish); now = head-&gt;Front-&gt;next-&gt;ArriveTime; //开始时刻 FromA2B(head, ready, 'W'); while (!(isEmpty(head) &amp;&amp; isEmpty(ready))) &#123; int Tnow = now; //备份开始时刻 while (!isEmpty(head)) &#123; pcb* t = head-&gt;Front-&gt;next; if (now &gt;= t-&gt;ArriveTime) &#123; FromA2B(head, ready, 'W'); &#125; else break; &#125; if (!isEmpty(ready)) &#123; FromA2B(ready, run, 'R'); pcb* p = run-&gt;Front-&gt;next; if (p-&gt;ServeTime - p-&gt;cpuTime &lt;= pTime) //时间片内完成 &#123; now += p-&gt;ServeTime - p-&gt;cpuTime; p-&gt;cpuTime = p-&gt;ServeTime; FromA2B(run, finish, 'F'); &#125; else &#123; now += pTime; p-&gt;cpuTime += pTime; FromA2B(run, ready, 'W'); &#125; &#125; if (Tnow == now) //若没发生轮转，时间继续推移 &#123; now++; continue; &#125; PrintTitle(); PrintLinkPCB(head); PrintLinkPCB(run); PrintLinkPCB(ready); PrintLinkPCB(finish); cout &lt;&lt; "time: " &lt;&lt; now &lt;&lt; endl; &#125; // result pcb* p = finish-&gt;Front-&gt;next; cout &lt;&lt; "Result:\n"; while (p) &#123; printf("Name: %s\tFinishtime: %d\tRoundtime: %d\twRoundtime: %.2f\n", p-&gt;Name, p-&gt;finishTime, p-&gt;RoundTime, p-&gt;WRoundTime); p = p-&gt;next; &#125;&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>System</tag>
        <tag>Round Robin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thinkpad X250 安装ubuntu16.04.1LTS 的记录]]></title>
    <url>%2F2016%2F10%2F01%2FThinkpad%20X250%20%E5%AE%89%E8%A3%85ubuntu16.04.1LTS%20%E7%9A%84%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[X250 上有两块硬盘，sda有win10，sdb一直坐为数据盘，打算安装一个ubuntu16.04.01LTS。因为轻度使用所以sdb上切20G的分区给ubuntu，压缩卷后不需要新建分区。U盘制作ubuntu安装盘，开机启动到U盘。 安装时，对空闲20G手动分区 ： 分区类型 挂载点 大小 位置 主分区 /boot 400M 起始 逻辑区 / 15000M 起始 逻辑区 swap 512M 末尾 逻辑区 /home 剩余所有 起始 因为我不希望ubuntu覆盖我的windows引导，所以启动选择器 sdb（因为内存有8G，交换空间就不分那么多了。启动选择在第二快盘，就不会覆盖win的引导，倒时开机bios改下硬盘启动顺序就行了。我可能随时会把ubuntu的分区格掉，毕竟ssd空间有限，到时候不至于用easybcd或者PE重做引导）安装完成后，重启。 安装burg，美化开机选择界面： 12sudo add-apt-repository ppa:n-muench/burg &amp;&amp; sudo apt-get updatesudo apt-get install burg burg-themes burg-emu 安装过程可以一路回车，注意在Configuring burg-pc时选择sdb。更换burg themes ，下载Lightness BURG Theme by SWOriginal解压后cp到/boot/burg/themes里。 12sudo update-burggedit /boot/burg/burg.cfg 删除一个recoverymode引导，提前win引导项sudo burg-emu -&gt; F2 -&gt; 选择Lightness(每次grub更新后都要重置burg sudo burg-install /dev/sdx ) 安装指纹识别fingerprint： 12sudo add-apt-repository ppa:fingerprint/fprint &amp;&amp; sudo apt-get updatesudo apt-get install libfprint0 fprint-demo libpam-fprintd gksu 在 “系统设置” -&gt; “用户账户” 里会多一个 “指纹登录”，照着提示进行设置就可以了。 关闭鼠标加速：在Dashboard里搜索:gnome-session-properties点击添加：名称：setmouse命令：xset m 0 或者 xset m default重启。 安装TLP电源管理： 1234sudo apt-get install tlp tlp-rdwsudo apt-get install tp-smapi-dkms acpi-call-dkmssudo apt-get install thermaldsudo apt-get install powertop 配置 TLP 12sudo vim /etc/default/tlpsudo tlp start 使用 terminator 替换默认终端以及使用zsh (另外写一篇介绍这个) 安装Arc GTK主题： 12345sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /' &gt;&gt; /etc/apt/sources.list.d/arc-theme.list"wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.keysudo apt-key add - &lt; Release.keysudo apt updatesudo apt install arc-theme 安装Unity Tweak Tool管理主题： 1sudo apt install unity-tweak-tool 个人觉得Arc-darker 好看，更换之。 安装Deadbeef，播放更多音频： 123sudo add-apt-repository ppa:starws-box/deadbeef-playersudo apt-get updatesudo apt-get install deadbeef 安装MPV播放器： 1sudo apt-get install mpv 安装cherrytree笔记本： 1sudo apt-get install cherrytree 安装lantern翻墙：传送门]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminator</tag>
        <tag>ZSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Terminator & ZSH的配置]]></title>
    <url>%2F2016%2F10%2F01%2F%E4%BD%BF%E7%94%A8%20Terminator%20%20%26%20ZSH%E7%9A%84%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 在别人博客里看到 Terminator 挺好用的，特别是和zsh搭配真是漂亮，这里总结下怎么弄吧。 安装 Terminator1sudo apt-get install terminator 利用 Debian 的重新配置命令选择默认终端： 1sudo update-alternatives --config x-terminal-emulator 非ubuntu系统设置terminator快捷键 Setting -&gt; Keyboard -&gt; Shortcuts -&gt; Custom Shortcuts -&gt; add(+)Name : TerminalCommand : /usr/bin/terminatorApplyClick “Disable”press Ctrl + Alt + T 更换主题12345/* 打开Terminator ，进行如下操作 */Preferenvces -&gt; GeneralDisable ‘Show titlebar’Preferenvces -&gt; Profiles -&gt; Colors -&gt; Foreground and Background -&gt; Build-in schemesChoose ‘Solarized dark’ 安装zsh1sudo apt-get install zsh 设置当前用户使用zsh 1chsh -s /bin/zsh 安装 on my zsh 自动安装：(推荐) 1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 手动安装： 12git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc 安装powerline字体123git clone https://github.com/powerline/fontscd fonts./install.sh 然后在终端中使用powerline字体 编辑： ~/.zshrc 增加自己的用户名： 1DEFAULT_USER="Shank" PS：上面 Shank 替换成你当前的用户名，用whoami查看你的用户名 修改主题： 1ZSH_THEME="agnoster" 启用几个功能： 1COMPLETION_WAITING_DOTS="true" 或者用以下简单粗暴的方式屏蔽zsh中的用户名：12cd ~/.oh-my-zsh/themessudo vim 当前主题名称 找到最下面对build_prompt的定义，把prompt_context用#注释掉即可 来自2018/10/29：“以前的自己 Markdown 写得这么烂还敢贴出来。”]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminator</tag>
        <tag>ZSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闲来无事，做个课表UWP练练手]]></title>
    <url>%2F2016%2F08%2F30%2F%E9%97%B2%E6%9D%A5%E6%97%A0%E4%BA%8B%EF%BC%8C%E5%81%9A%E4%B8%AA%E8%AF%BE%E8%A1%A8UWP%E7%BB%83%E7%BB%83%E6%89%8B%2F</url>
    <content type="text"><![CDATA[→_→ 为什么我总是这么闲…… 正好学了一段时间UWP，我觉得我可以做一个自己用啊。目前是自用版本，等我写好爬虫和教务登录，试试放到微软商店怎样？ 尽管很low，但还是放自己网站上秀一下吧。git@github.com:sko00o/ClassSchedule.git 辣鸡代码别秀了]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>好闲啊</tag>
        <tag>课表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沙雕黑历史]]></title>
    <url>%2F2016%2F04%2F17%2F%E5%A4%AA%E4%B9%85%E4%B8%8D%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%88%91%E9%83%BD%E5%BF%AB%E5%BF%98%E4%BA%86%E8%BF%99%E4%B8%AA%E7%AB%99%E7%82%B9%E4%BA%86%2F</url>
    <content type="text"><![CDATA[做了一段视频来恶搞我的室友凯子同学，插进来看看效果]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[画一个微软标志]]></title>
    <url>%2F2015%2F12%2F15%2F%E7%94%BB%E4%B8%80%E4%B8%AA%E5%BE%AE%E8%BD%AF%E6%A0%87%E5%BF%97%2F</url>
    <content type="text"><![CDATA[闲来无事，玩了会CSS，所以画一个微软标志展示我的信仰信仰田牌 index.html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;link href="use.css" rel="stylesheet" type="text/css"&gt;&lt;title&gt;画一个微软标志&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="icon"&gt; &lt;div class="text"&gt;Microsoft&lt;/div&gt; &lt;div class="zz"&gt; &lt;div class="s1"&gt;&lt;/div&gt; &lt;div class="s2"&gt;&lt;/div&gt; &lt;div class="s3"&gt;&lt;/div&gt; &lt;div class="s4"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; use.css 12345678910111213141516171819202122232425262728293031323334353637383940414243444546@CHARSET "UTF-8";#icon&#123; height: 420px; width:1500px;&#125;.text&#123; width: 1000px; height: 420px; line-height:420px; font-size: 340px; float: right; font-family: "Microsoft YaHei"! important; font-weight:bold; letter-spacing: -10px; color: rgb(119,119,119);&#125;.zz &#123; width: 420px; height: 420px;&#125;.s1 &#123; width: 200px; height: 200px; background: rgb(243,100,34); float: left;&#125;.s2 &#123; width: 200px; height: 200px; background: rgb(141,197,62); float: right;&#125;.s3 &#123; width: 200px; height: 200px; background: rgb(0,173,239); float: left; margin-top: 20px;&#125;.s4 &#123; width: 200px; height: 200px; background: rgb(255,195,13); float: right; margin-top: 20px;&#125; 后记现在是2018年，再看此文，感觉当年真傻逼…… ​ 来自2018/10/29：“是啊，真幼稚。”]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇就谈谈这个吧]]></title>
    <url>%2F2015%2F12%2F01%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%B0%B1%E8%B0%88%E8%B0%88%E8%BF%99%E4%B8%AA%E5%90%A7%2F</url>
    <content type="text"><![CDATA[当前博客放在 Github Page 与本文无关 旧博客已删除，本文仅作记录 这网站怎么建的准备好云空间和域名云解析，Xshell 和 Xftp本站运行于CentOS 7，使用阿里云ecs用ssh客户端(xshell,putty等)连接你的服务器，root下执行以下命令行操作： 安装mqsql （mariadb）、apache、php1234yum install mariadb-server mariadb-clientyum install httpd httpd-develyum install php php-devel php-mysql /php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc 重设mysql root用户密码1mysqladmin -u root password 'PASSWORD' 登陆mysql1mysql -u root -p # 新建一个wordpress的数据库 配置 wordpress使用ftp上传wordpress到 /var/www/html/ 并解压根据readme.html 中的说明配置 wordpress 安装插件在wordpress管理页面直接搜索插件安装即可 Useso take over Google替换所有的Google字体、谷歌JS公用库、Gravatar头像的源(解决页面访问慢的问题，必装！) JP Markdown使页面支持Markdown，Markdown是个好东西，Geek嘛，谁愿意拿着鼠标改格式，但要注意编辑文章不要用可视化视图 Crayon Syntax Highlighter代码格式化插件，安装后文章编辑器多了个crayon标签，把代码选择然后点标签，你就会用了 解决插件或主题更新/安装失败的问题 方法1 123456# www目录及文件所有者设置为你apache的用户和组sudo chown -R apache:apache /var/www/# 如果你改过wordpress里文件的权限，最好改回来find $path -type f -exec chmod 644 &#123;&#125; \; #设置文件权限为644find $path -type d -exec chmod 755 &#123;&#125; \; #设置目录权限为755#PS: $path 处填你的wordpress路径 方法2 (PS:不推荐) 1234# 直接简单粗暴改权限sudo chmod -R 777 /var/www/html/wp-content/# 更新完成后再改回来sudo chmod -R 751 /var/www/html/wp-content/]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
</search>
