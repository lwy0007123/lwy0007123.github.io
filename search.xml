<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go 私网开发服务搭建记录</title>
    <url>/2019/10/29/Go-%E7%A7%81%E7%BD%91%E5%BC%80%E5%8F%91%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>本文记录了私网 Go 开发所需的所有相关服务，包括版本管理，模块代理，持续集成。</p>
<p>涉及服务如下：</p>
<ul>
<li>Gogs</li>
<li>goproxy</li>
<li>Jenkins</li>
</ul>
<a id="more"></a>
<p>系统配置：</p>
<ul>
<li>CentOS 7</li>
</ul>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>搭建版本管理系统（VCS）的目的：一方面是为私有项目提供版本管理，一方面是托管修改过的开源项目。</p>
<h3 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h3><p>私网环境开发，项目源码可以托管于任何版本管理系统，但是 Go 对 Git 的支持更好，优先考虑搭建 Git 服务作为版本管理。</p>
<p>Go 要求版本管理系统实现 <code>go-get</code> 接口。我们选择了 <a href="https://gogs.io/" target="_blank" rel="noopener">Gogs</a> 。它是由 Go 语言编写的开源 Git 服务，搭建十分便捷 。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>详见 <a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">官方搭建指南</a> ，以下仅作记录。</p>
<blockquote>
<p>如果使用 MySQL ，要求版本不低于 5.7 。参考这篇 <a href="/2019/10/28/Install-MySQL-8-0-on-CentOS-7/">安装 MySQL 8.0</a></p>
</blockquote>
<h4 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h4><p>名称： gogs</p>
<p>编码： utf8mb4</p>
<p>数据库中通过以下脚本新建数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> gogs <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>
<h4 id="下载最新二进制程序包"><a href="#下载最新二进制程序包" class="headerlink" title="下载最新二进制程序包"></a>下载最新二进制程序包</h4><p>下载<a href="https://gogs.io/docs/installation/install_from_binary.html" target="_blank" rel="noopener">官网</a>提供的二进制文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://cdn.gogs.io/0.11.91/gogs_0.11.91_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<h4 id="解压运行"><a href="#解压运行" class="headerlink" title="解压运行"></a>解压运行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xf gogs_0.11.91_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> gogs</span><br><span class="line">./gogs web</span><br></pre></td></tr></table></figure>
<h4 id="按照提示进行配置"><a href="#按照提示进行配置" class="headerlink" title="按照提示进行配置"></a>按照提示进行配置</h4><blockquote>
<p>配置前确保 Git 已安装</p>
</blockquote>
<details><br><summary>安装 Git</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install git</span><br></pre></td></tr></table></figure><br><br></details>

<p>浏览器访问当前主机的 3000 端口，开始配置。</p>
<p>有几个配置项需要注意：</p>
<ul>
<li><p>域名：建议填域名，不然引用地址会很奇怪，即使没有真实域名也可以再客户端上做个 host 映射。例如：<code>go.findshank.com</code>。</p>
</li>
<li><p>HTTP 端口号：可以使用任意未占用的端口号，之后通过 nginx 映射到 80 端口。</p>
</li>
<li><p>应用 URL：必须启用 HTTPS，例如：<code>https://go.findshank.com</code> 。之后反向代理配置好 HTTPS 即可。</p>
</li>
<li><p>禁止用户注册：建议勾选，之后统一由管理员分配账号。</p>
</li>
</ul>
<h4 id="配置守护进程"><a href="#配置守护进程" class="headerlink" title="配置守护进程"></a>配置守护进程</h4><p>修改 <code>./scripts/systemd/gogs.service</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Gogs</span><br><span class="line"><span class="attr">After</span>=syslog.target</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">LimitMEMLOCK</span>=infinity</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65535</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/shank/gogs</span><br><span class="line"><span class="attr">ExecStart</span>=/home/shank/gogs/gogs web</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">Environment</span>=USER=shank HOME=/home/shank</span><br><span class="line"></span><br><span class="line"><span class="attr">ProtectSystem</span>=full</span><br><span class="line"><span class="attr">PrivateDevices</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">NoNewPrivileges</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意修改为实际的用户目录</p>
</blockquote>
<p>复制到系统目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp ./scripts/systemd/gogs.service /usr/lib/systemd/system/</span><br></pre></td></tr></table></figure>
<h4 id="启用守护进程"><a href="#启用守护进程" class="headerlink" title="启用守护进程"></a>启用守护进程</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> gogs</span><br><span class="line">sudo systemctl start gogs</span><br></pre></td></tr></table></figure>
<h2 id="模块代理"><a href="#模块代理" class="headerlink" title="模块代理"></a>模块代理</h2><h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><p>Go 1.11 之后推荐使用 <code>go mod</code> 作为依赖管理，使用 <code>go mod</code> 可以通过配置模块代理服务加快依赖包的下载。这类代理服务通过环境变量 <code>GOPROXY</code> 进行指定，只要实现了模块代理协议（Module proxy protocol）的服务都称为模块代理服务。</p>
<p>因为公有网络的不确定性（比如开源作者删除了代码仓库或者网络被防火墙劫持），可以考虑自己维护一个代理服务，方便私网内构建时拉取常用第三方代码依赖。</p>
<h3 id="选型-1"><a href="#选型-1" class="headerlink" title="选型"></a>选型</h3><p>目前有许多开源项目实现了 goproxy 服务，我们选择了社区活跃且版本稳定的 <a href="https://github.com/goproxyio/goproxy" target="_blank" rel="noopener">goproxyio/goproxy</a>。</p>
<h3 id="源码构建及部署"><a href="#源码构建及部署" class="headerlink" title="源码构建及部署"></a>源码构建及部署</h3><blockquote>
<p>Go 版本不低于 1.11</p>
</blockquote>
<details><br><summary>配置 Go 1.13.3 编译环境</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz</span><br><span class="line">sudo tar -C /usr/<span class="built_in">local</span> -xzf go1.13.3.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:/usr/local/go/bin'</span> &gt;&gt; <span class="variable">$HOME</span>/.profile</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.profile</span><br></pre></td></tr></table></figure><br><br></details>

<details><br><summary>安装 make</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install make</span><br></pre></td></tr></table></figure><br><br></details>

<h4 id="下载一份稳定版版本的源码"><a href="#下载一份稳定版版本的源码" class="headerlink" title="下载一份稳定版版本的源码"></a>下载一份稳定版版本的源码</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/goproxyio/goproxy/archive/v2.0.1.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p>v2.0.0 版本有 BUG 。<br>我遇到如下问题 <code>go get golang.org/x/tools/cmd/present: no matching versions for query &quot;upgrade&quot;</code> 。<br>故此处已更新。</p>
</blockquote>
<h4 id="解压-amp-编译"><a href="#解压-amp-编译" class="headerlink" title="解压 &amp; 编译"></a>解压 &amp; 编译</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar xf v2.0.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> goproxy-2.0.1</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你使用的是 go 1.13 以下版本， make 可能因网络问题耗时严重，你需要设置环境变量 GOPROXY 加速构建，例如： <code>export GOPROXY=https://goproxy.io</code>。因为 go 1.13 指定了默认的 GOPROXY 可以不需要另外配置。</p>
</blockquote>
<h4 id="添加二进制文件到系统目录"><a href="#添加二进制文件到系统目录" class="headerlink" title="添加二进制文件到系统目录"></a>添加二进制文件到系统目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp ./bin/goproxy /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>
<h4 id="配置守护进程-1"><a href="#配置守护进程-1" class="headerlink" title="配置守护进程"></a>配置守护进程</h4><p>修改 <code>./scripts/goproxy.service</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=goproxy service</span><br><span class="line"><span class="attr">Documentation</span>=https://goproxy.io</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"><span class="attr">Environment</span>=PATH=/usr/bin:/usr/local/go/bin</span><br><span class="line"><span class="attr">Environmnet</span>=GO111MODULE=<span class="literal">on</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/goproxy -listen=<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span> -proxy=https://goproxy.io -exclude=go.findshank.com</span><br><span class="line"><span class="attr">KillMode</span>=control-group</span><br><span class="line"><span class="attr">SuccessExitStatus</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"><span class="attr">Alias</span>=goproxy.service</span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<ul>
<li><code>-listen</code>：服务监听地址。</li>
<li><code>-proxy</code>：上游代理模块，不配置则直接请求目的地址。</li>
<li><code>-exclude</code>：不走代理的域名，私网域名公网无法访问应直接请求。</li>
</ul>
<p>复制到系统目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp ./scripts/goproxy.service /usr/lib/systemd/system/</span><br></pre></td></tr></table></figure>
<h4 id="启用守护进程-1"><a href="#启用守护进程-1" class="headerlink" title="启用守护进程"></a>启用守护进程</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> goproxy</span><br><span class="line">sudo systemctl start goproxy</span><br></pre></td></tr></table></figure>
<h2 id="持续集成（可选）"><a href="#持续集成（可选）" class="headerlink" title="持续集成（可选）"></a>持续集成（可选）</h2><h3 id="目的-2"><a href="#目的-2" class="headerlink" title="目的"></a>目的</h3><p>开发者将代码提交到版本管理系统，之后的编译构建，自动化测试，打包，发布，部署等都是固定流程，应该由持续集成系统去完成。</p>
<p>使用持续集成，可以降低重复繁琐操作的出错率。</p>
<h3 id="选型-2"><a href="#选型-2" class="headerlink" title="选型"></a>选型</h3><p>有许多在线的持续集成服务，由于我们是私网部署，我们选择了 <a href="https://jenkins.io" target="_blank" rel="noopener">Jenkins</a> ,它是由 Java 语言编写的开源 CI&amp;CD 服务，搭建十分便捷 。</p>
<h3 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h3><p>详见 <a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">官方搭建指南</a> ，以下仅作记录。</p>
<h4 id="安装-Java-1-8-运行环境"><a href="#安装-Java-1-8-运行环境" class="headerlink" title="安装 Java 1.8 运行环境"></a>安装 Java 1.8 运行环境</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>
<h4 id="启用-Jenkins-存储库"><a href="#启用-Jenkins-存储库" class="headerlink" title="启用 Jenkins 存储库"></a>启用 Jenkins 存储库</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br><span class="line">sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>
<h4 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 Jenkins</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install jenkins</span><br></pre></td></tr></table></figure>
<h4 id="启用守护程序"><a href="#启用守护程序" class="headerlink" title="启用守护程序"></a>启用守护程序</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jenkins</span><br></pre></td></tr></table></figure>
<h4 id="按照提示进行配置-1"><a href="#按照提示进行配置-1" class="headerlink" title="按照提示进行配置"></a>按照提示进行配置</h4><p>浏览器访问当前主机的 8080 端口，开始配置。</p>
<p>安装建议的插件，按需求以后添加插件。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>这里我们选用使用最广泛的 NGINX 作为反向代理服务。</p>
<blockquote>
<p>鉴于篇幅，仅介绍对于 Gogs 的反向代理。</p>
</blockquote>
<h3 id="安装-NGINX"><a href="#安装-NGINX" class="headerlink" title="安装 NGINX"></a>安装 NGINX</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure>
<h3 id="HTTPS-证书"><a href="#HTTPS-证书" class="headerlink" title="HTTPS 证书"></a>HTTPS 证书</h3><p>获取证书的途径有很多，可以购买商业证书，或者申请免费证书，私网环境为了简单，我就选择自签证书。</p>
<p>使用 openssl 自签证书可以 <a href="/2019/06/26/enable-https-for-private-network/">参考这篇</a></p>
<p>也可以用 Gogs 可执行程序提供的子命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./gogs cert -ca=<span class="literal">true</span> -duration=8760h0m0s -host=go.findshank.com</span><br></pre></td></tr></table></figure>
<p>会在执行目录下得到两个文件： <code>cert.pem</code> 和 <code>key.pem</code> 。</p>
<h3 id="Gogs-配置"><a href="#Gogs-配置" class="headerlink" title="Gogs 配置"></a>Gogs 配置</h3><p>找到 Gogs 的配置文件 <code>gogs/custom/conf/app.ini</code> ，确保 <code>ROOT_URL</code> 为 https 协议，比如： <code>https://go.findshank.com</code> 。其他的配置都不用改。</p>
<h3 id="NGINX-配置"><a href="#NGINX-配置" class="headerlink" title="NGINX 配置"></a>NGINX 配置</h3><p>先把 <code>/etc/nginx/nginx.conf</code> 中的默认 <code>server</code> 配置删除，你也可以把它注释掉，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#server &#123;</span><br><span class="line">#    listen       80 default_server;</span><br><span class="line">#    listen       [::]:80 default_server;</span><br><span class="line">#    server_name  _;</span><br><span class="line">#    root         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">#    # Load configuration files for the default server block.</span><br><span class="line">#    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">#    location / &#123;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">#    error_page 404 /404.html;</span><br><span class="line">#        location = /40x.html &#123;</span><br><span class="line">#    &#125;</span><br><span class="line"></span><br><span class="line">#    error_page 500 502 503 504 /50x.html;</span><br><span class="line">#        location = /50x.html &#123;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure>
<p>新建配置文件 <code>/etc/nginx/conf.d/default.conf</code>，填入如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        listen [::]:443 ssl;</span><br><span class="line">        server_name go.findshank.com;</span><br><span class="line">        ssl_certificate &quot;/home/shank/gogs/keys/cert.pem&quot;;</span><br><span class="line">        ssl_certificate_key &quot;/home/shank/gogs/keys/key.pem&quot;;        </span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;      </span><br><span class="line">                proxy_pass http://127.0.0.1:3000$request_uri; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">        server_name go.findshank.com;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>验证配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
<h3 id="启用守护程序-1"><a href="#启用守护程序-1" class="headerlink" title="启用守护程序"></a>启用守护程序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>
<h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><ul>
<li>无法外部访问服务：检查 CentOS 的防火墙策略，放行特定端口。安全性要求不高甚至可以关闭防火墙。</li>
<li>私网仓库通过模块代理 go get 失败：<ul>
<li><code>...exec: &quot;git&quot;: executable file not found in $PATH...</code>： 确保 <code>git</code> 已安装。</li>
<li><code>... reading https://sum.golang.org/lookup/... 410 Gone</code>： 本地添加环境变量 <code>GOSUMDB=off</code></li>
</ul>
</li>
<li>NGINX 启动失败：<ul>
<li><code>...SSL: error:0200100D:system library:fopen:Permission denied...</code>： 对证书文件无访问权限，这是 SELinux 的强制模式导致的。解决办法就是 <code>restorecon -v -R /path/to/keys</code>。</li>
<li><code>...[emerg] bind() to 0.0.0.0:XXXX failed...</code>： 也可能表现为 NGINX 反代的端口返回 502 错误，这也是 SELinux 的坑。使用 semanage 添加 HTTP 端口即可，详见参考资料。</li>
</ul>
</li>
<li>各种 ssl 验证出错的问题： 使用自签证书，要在所有客户端的系统上都信任自签的证书。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.liquidweb.com/kb/how-to-stop-and-disable-firewalld-on-centos-7/" target="_blank" rel="noopener">How to Stop and Disable Firewalld on CentOS 7</a></li>
<li><a href="https://www.findshank.com/2019/06/26/setup-private-goproxy-server/">部署 goproxy 服务</a></li>
<li><a href="https://linuxize.com/post/how-to-install-jenkins-on-centos-7/" target="_blank" rel="noopener">How To Install Jenkins on CentOS 7</a></li>
<li><a href="https://github.com/Unknwon/wuwen.org/issues/12" target="_blank" rel="noopener">使用 HTTPS 部署 Gogs</a></li>
<li><a href="https://serverfault.com/questions/540537/nginx-permission-denied-to-certificate-files-for-ssl-configuration" target="_blank" rel="noopener">nginx permission denied to certificate files for ssl configuration
</a></li>
<li><a href="https://blog.csdn.net/RunSnail2018/article/details/81185653" target="_blank" rel="noopener">CentOS7 中 semanage 命令的安装</a></li>
<li><a href="https://blog.csdn.net/RunSnail2018/article/details/81185138" target="_blank" rel="noopener">Nginx 启动报 [emerg] bind() to 0.0.0.0:XXXX failed (13: Permission denied)错误处理</a></li>
</ul>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>Gogs</tag>
        <tag>goproxy</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装 MySQL 8.0</title>
    <url>/2019/10/28/Install-MySQL-8-0-on-CentOS-7/</url>
    <content><![CDATA[<p>记录下在 CentOS 7 上安装 MySQL 8.0 ，并启用兼容性的密码验证。</p>
<a id="more"></a>
<h2 id="安装记录"><a href="#安装记录" class="headerlink" title="安装记录"></a>安装记录</h2><p>查看当前 linux 版本，执行 <code>uname -a</code>，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux localhost.localdomain 3.10.0-1062.el7.x86_64 #1 SMP Wed Aug 7 18:08:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>
<p>访问官网获取 linux 7 版本的仓库安装包。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>MD5 校验</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">md5sum mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>对照输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">893b55d5d885df5c4d4cf7c4f2f6c153  mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>添加官方仓库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>替换阿里云镜像加速下载（可选）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<p>安装 MySQL </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mysql-server</span><br></pre></td></tr></table></figure>
<p>添加并启动守护进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p>检查运行状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>
<p>查找临时 root 密码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>
<p>密码在行末</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-29T06:28:08.128300Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: Z-_%r1L3PRuJ</span><br></pre></td></tr></table></figure>
<p>配置 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>按提示，输入刚才找到的密码，然后变更为新密码（要求足够复杂，包含大小写字母数字及特殊字符）。</p>
<p>登录数据库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>新建用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">CREATE USER <span class="string">'appuser'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'P@ssw0rd'</span>;</span><br><span class="line">FLUSH PRIVILEGES; </span><br><span class="line">ALTER USER <span class="string">'appuser'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'P@ssw0rd'</span>;</span><br></pre></td></tr></table></figure>
<p>启用密码验证插件与旧版兼容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 末尾添加一行</span></span><br><span class="line">default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure>
<p>重启 MySQL</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p>防火墙设置（可选）</p>
<p>CentOS 默认启用防火墙进程（firewalld）</p>
<p>为 MySQL 开放全 IP 端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-service=mysql --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-7" target="_blank" rel="noopener">How To Install MySQL on CentOS 7</a></li>
<li><a href="https://wiki.mikejung.biz/Firewalld" target="_blank" rel="noopener">How to Allow MySQL Traffic using firewalld on CentOS 7</a></li>
</ul>
]]></content>
      <tags>
        <tag>CentOS</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>私网 git 仓库 go mod 实践</title>
    <url>/2019/08/07/%E7%A7%81%E7%BD%91-git-%E4%BB%93%E5%BA%93-go-mod-%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>使用 gogs 搭建私网 git 服务器，搭建十分便捷，参考<a href="https://gogs.io/docs/installation" target="_blank" rel="noopener">官方文档</a></p>
<p>本文旨在探究私网 git 服务对 <code>go get</code> 支持的问题。</p>
<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>使用 go mod 获取依赖，实际也是调用 go get，但是 go mod 中获取依赖必须要 vcs 服务开启 https，如何启用 https 见<a href="https://www.findshank.com/2019/06/26/enable-https-for-private-network/">之前的文章</a>，本文简单起见使用 go get 的方式获取依赖。</p>
<p>结论：</p>
<p>gogs 中要配置好 <code>DOMAIN</code> 及 <code>ROOT_URL</code> 。</p>
<h2 id="初次尝试"><a href="#初次尝试" class="headerlink" title="初次尝试"></a><del>初次尝试</del></h2><details><br><br><summary>展开</summary><br><br>### 准备实验环境<br><br>本地机器 host 里添加一条记录。<br><br>&gt; git 服务的实际局域网 IP 为 <code>192.168.20.44</code>。<br><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.20.44 vcs.private.org</span><br></pre></td></tr></table></figure><br><br>配置 git 服务的域名，在 gogs 配置文件中修改如下行：<br><br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">DOMAIN</span> = vcs.private.org</span><br></pre></td></tr></table></figure><br><br>重启 gogs 服务。<br><br>使用 <code>sko00o</code> 用户新建一个仓库，名叫 <code>demo</code> 。<br><br>上传一个由 go mod 管理的项目。<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir demo &amp;&amp; <span class="built_in">cd</span> demo</span><br><span class="line">go mod init vcs.private.org/sko00o/demo</span><br><span class="line">touch main.go</span><br><span class="line"><span class="built_in">echo</span> package main &gt; main.go</span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"initial commit"</span></span><br><span class="line">git remote add origin gogs@vcs.private.org:sko00o/demo.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><br><br>### clone 测试<br><br>直接使用 git clone vcs.private.org/sko00o/demo 仓库拉取成功。<br><br>### go get 测试<br><br>尝试 go get 拉取 sko00o/demo 仓库。<br><br>&gt; 服务未配置 https ，故添上 <code>-insecure</code> 参数。<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get -v -insecure vcs.private.org/sko00o/demo</span><br></pre></td></tr></table></figure><br><br>拉取失败，错误提示：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Parsing meta tags from https://vcs.private.org?go-get=1 (status code 502)</span><br><span class="line">go get vcs.private.org/sko00o/demo: unrecognized import path <span class="string">"vcs.private.org/sko00o/demo"</span> (parse https://vcs.private.org/sko00o/demo?go-get=1: no go-import meta tags</span><br></pre></td></tr></table></figure><br><br>再次尝试：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get -v -insecure vcs.private.org/sko00o/demo.git</span><br></pre></td></tr></table></figure><br><br>拉取失败，错误提示：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go: vcs.private.org/sko00o/demo.git@v0.0.0-20190624043337-f2473e290d4d: parsing go.mod: unexpected module path <span class="string">"vcs.private.org/sko00o/demo"</span></span><br></pre></td></tr></table></figure><br><br>将 demo 仓库中的 go.mod 改为 <code>module vcs.private.org/sko00o/demo.git</code><br><br>再次尝试：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get -v -insecure vcs.private.org/sko00o/demo.git</span><br></pre></td></tr></table></figure><br><br>成功。<br><br></details>

<h2 id="更合理的办法"><a href="#更合理的办法" class="headerlink" title="更合理的办法"></a>更合理的办法</h2><p>因为要修改 module 名字，以上处理方式显然不合理。</p>
<p>参考官方文档后， 得知 go 要求版本管理系统的服务端实现 go-get=1 的请求，恰好 gogs 是支持这个请求的。</p>
<p>尝试直接访问这个 API。</p>
<p><code>curl &quot;http://vcs.private.org/sko00o/demo?go-get=1&quot;</code></p>
<p>返回内容如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"go-import"</span> <span class="attr">content</span>=<span class="string">"192.168.20.44/sko00o/demo git http://192.168.20.44/sko00o/demo.git"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"go-source"</span> <span class="attr">content</span>=<span class="string">"192.168.20.44/sko00o/demo _ http://192.168.20.44/sko00o/demo/src/master&#123;/dir&#125; http://192.168.20.44/sko00o/demo/src/master&#123;/dir&#125;/&#123;file&#125;#L&#123;line&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                go get --insecure 192.168.20.44/sko00o/demo</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>问题应该出在这里，说明 gogs 服务端的配置还存在问题，接着修改：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ROOT_URL</span> = http://vcs.private.org</span><br></pre></td></tr></table></figure>
<p>重启 gogs 。 <code>service gogos restart</code></p>
<p>再次请求，返回内容符合要求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"go-import"</span> <span class="attr">content</span>=<span class="string">"vcs.private.org/sko00o/demo git http://vcs.private.org/sko00o/demo.git"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"go-source"</span> <span class="attr">content</span>=<span class="string">"vcs.private.org/sko00o/demo _ http://vcs.private.org/sko00o/demo/src/master&#123;/dir&#125; http://vcs.private.org/sko00o/demo/src/master&#123;/dir&#125;/&#123;file&#125;#L&#123;line&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                go get --insecure vcs.private.org/sko00o/demo</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>仓库回滚到没有修改 go.mod module 的版本，并强制提交。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;SHA1&gt; <span class="comment"># must replace SHA1</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>
<p>再次 <code>go get -v -insecure vcs.private.org/sko00o/demo</code></p>
<p>成功。</p>
<h2 id="还可能遇到的问题"><a href="#还可能遇到的问题" class="headerlink" title="还可能遇到的问题"></a>还可能遇到的问题</h2><p>如果你设置了环境变量 <code>http_proxy</code>， 你可能遇到下面的问题。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Fetching https://vcs.private.org/sko00o/demo?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org/sko00o/demo?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org/sko00o/demo?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org/sko00o/demo?go-get=1 (status code 500)</span><br><span class="line">Fetching https://vcs.private.org/lowan?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org/lowan?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org/lowan?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org/lowan?go-get=1 (status code 500)</span><br><span class="line">Fetching https://vcs.private.org?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org?go-get=1 (status code 500)</span><br><span class="line">go get vcs.private.org/sko00o/demo: unrecognized import path <span class="string">"vcs.private.org/sko00o/demo"</span> (parse http://vcs.private.org/sko00o/demo?go-get=1: no go-import meta tags ())</span><br></pre></td></tr></table></figure>
<p>解决办法：取消代理配置 <code>export http_proxy=</code> 。</p>
<p>如果你设置了 git 代理，你可能遇到下面的问题。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Fetching https://vcs.private.org/sko00o/demo?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org/sko00o/demo?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org/sko00o/demo?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org/sko00o/demo?go-get=1 (status code 200)</span><br><span class="line">get <span class="string">"vcs.private.org/sko00o/demo"</span>: found meta tag get.metaImport&#123;Prefix:<span class="string">"vcs.private.org/sko00o/demo"</span>, VCS:<span class="string">"git"</span>, RepoRoot:<span class="string">"http://vcs.private.org/sko00o/demo.git"</span>&#125; at http://vcs.private.org/sko00o/demo?go-get=1</span><br><span class="line">Fetching https://vcs.private.org/lowan?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org/lowan?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org/lowan?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org/lowan?go-get=1 (status code 200)</span><br><span class="line">Fetching https://vcs.private.org?go-get=1</span><br><span class="line">https fetch failed: Get https://vcs.private.org?go-get=1: EOF</span><br><span class="line">Fetching http://vcs.private.org?go-get=1</span><br><span class="line">Parsing meta tags from http://vcs.private.org?go-get=1 (status code 404)</span><br><span class="line">go get vcs.private.org/sko00o/demo: git ls-remote -q http://vcs.private.org/sko00o/demo.git <span class="keyword">in</span> /mnt/d/GoDev/pkg/mod/cache/vcs/3172f8a70a0665ea75a1e7fb868f761ef269470c22b6a85cbe78b19c5608fbee: <span class="built_in">exit</span> status 128:</span><br><span class="line">        fatal: unable to access <span class="string">'http://vcs.private.org/sko00o/demo.git/'</span>: The requested URL returned error: 500</span><br></pre></td></tr></table></figure>
<p>解决办法：取消 git 中的 http 代理 <code>git config --global --unset http.proxy</code> 。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies" target="_blank" rel="noopener">Download and install packages and dependencies</a></p>
</li>
<li><p><a href="https://golang.org/cmd/go/#hdr-Remote_import_paths" target="_blank" rel="noopener">Remote import paths</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 git 管理 svn</title>
    <url>/2019/07/31/%E4%BD%BF%E7%94%A8-git-%E7%AE%A1%E7%90%86-svn/</url>
    <content><![CDATA[<p>习惯于使用 git 的你，可能会受不了 svn 残缺的功能。</p>
<p>还好 git 拥有一个十分好用的命令 <code>git svn</code>。</p>
<p>本文仅记录普通场景的使用，详细内容见<a href="https://git-scm.com/docs/git-svn" target="_blank" rel="noopener">官方文档</a>。</p>
<a id="more"></a>
<h2 id="新建-svn-仓库"><a href="#新建-svn-仓库" class="headerlink" title="新建 svn 仓库"></a>新建 svn 仓库</h2><p>主干代码放在 trunk 目录下，即 git 中的 master 分支。</p>
<p>分支代码按分支命名的目录放在 branches 目录下，假如有个分支是 bra1 那么它将在 branches/bra1 下。</p>
<p>标签代码分支代码目录结构一致，排布在 tags 目录下，子目录为标签名称，一般为版本号，类似于 tags/v1.0.0 。</p>
<p>所以一般 svn 仓库的标准目录结构如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">├── branches</span><br><span class="line">│   ├── bra1</span><br><span class="line">│   └── bra2</span><br><span class="line">├── tags</span><br><span class="line">│   ├── v1.0.0</span><br><span class="line">│   └── v1.1.0</span><br><span class="line">└── trunk</span><br></pre></td></tr></table></figure>
<h2 id="拉取-svn-仓库"><a href="#拉取-svn-仓库" class="headerlink" title="拉取 svn 仓库"></a>拉取 svn 仓库</h2><p>第一步，也是最重要的一步，拉取代码。</p>
<p>咱们使用 <code>git svn</code> 命令管理 svn 仓库就需要区分一下目录结构及目录层级。</p>
<h3 id="项目在根目录"><a href="#项目在根目录" class="headerlink" title="项目在根目录"></a>项目在根目录</h3><p>这种情况，体验相对最舒适，以下命令即可完成：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn <span class="built_in">clone</span> -s svn://host/project</span><br></pre></td></tr></table></figure>
<p><code>-s</code> 让工具知道这是一个标准目录结构。</p>
<details><br><summary>可能遇到的问题</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Can<span class="string">'t locate Term/ReadKey.pm in @INC (you may need to install the Term::ReadKey module)</span></span><br></pre></td></tr></table></figure><br><br>该问题是缺少 perl 模块，无法读取 svn 密码<br><br>解决办法：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cpan Term::ReadKey</span><br></pre></td></tr></table></figure><br><br></details>

<details><br><summary>如果不是标准目录命名</summary><br><br>假如目录结构是这样的：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">├── branches1</span><br><span class="line">├── tags2</span><br><span class="line">└── trunk0</span><br></pre></td></tr></table></figure><br><br>就自己指定下各类目录的实际名称：<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn <span class="built_in">clone</span> svn://host/project -T trunk0 -b branches1 -t tags2</span><br></pre></td></tr></table></figure><br><br>- <code>-T</code> 主干目录<br>- <code>-b</code> 分支目录<br>- <code>-t</code> 标签目录<br><br></details>

<h3 id="项目不在根目录"><a href="#项目不在根目录" class="headerlink" title="项目不在根目录"></a>项目不在根目录</h3><blockquote>
<p>但现实可能没这么美好。</p>
</blockquote>
<p>此时我们的实际项目可能在： <code>svn://host/s001/p002/project</code></p>
<p>咱们不能直接 <code>git svn clone</code>，因为会出问题。咱们要把这个命令拆成几步来完成。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir project &amp;&amp; <span class="built_in">cd</span> project</span><br><span class="line">git svn -s init svn://host/s001/p002/project</span><br></pre></td></tr></table></figure>
<p>接着你会看到：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository <span class="keyword">in</span> ~/project/.git/</span><br><span class="line">Using higher level of URL: svn://host/s001/p002/project =&gt; svn://host/s001</span><br></pre></td></tr></table></figure>
<p>它默认去使用了根目录，如果我们有根目录的修改权限，这样也能用，但是我们一般只有 project 那层的权限，所以咱们要修改下当前目录的 git 配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config -e</span><br></pre></td></tr></table></figure>
<p>配置文件大概是这样的：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line"><span class="section">[svn-remote "svn"]</span></span><br><span class="line">    url = svn://host/s001</span><br><span class="line">    fetch = p002/project/trunk:refs/remotes/origin/trunk</span><br><span class="line">    branches = p002/project/branches/*:refs/remotes/origin/*</span><br><span class="line">    tags = p002/project/tags/*:refs/remotes/origin/tags/*</span><br></pre></td></tr></table></figure>
<p>修改如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[core]</span></span><br><span class="line">    <span class="comment"># 省略</span></span><br><span class="line"><span class="section">[svn-remote "svn"]</span></span><br><span class="line">    url = svn://host/s001/p002/project</span><br><span class="line">    fetch = trunk:refs/remotes/origin/trunk</span><br><span class="line">    branches = branches/*:refs/remotes/origin/*</span><br><span class="line">    tags = tags/*:refs/remotes/origin/tags/*</span><br></pre></td></tr></table></figure>
<details><br><summary>如果不是标准目录命名</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn init svn://host/s001/p002/project -T trunk0 -b branches1 -t tags2</span><br><span class="line">git config -e</span><br></pre></td></tr></table></figure><br><br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[svn-remote "svn"]</span></span><br><span class="line">    url = svn://host/s001/p002/project</span><br><span class="line">    fetch = trunk0:refs/remotes/origin/trunk</span><br><span class="line">    branches = branches1/*:refs/remotes/origin/*</span><br><span class="line">    tags = tags2/*:refs/remotes/origin/tags/*</span><br></pre></td></tr></table></figure><br><br></details>

<p>配置文件保存后，拉取代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn fetch</span><br></pre></td></tr></table></figure>
<h2 id="递交版本"><a href="#递交版本" class="headerlink" title="递交版本"></a>递交版本</h2><p>一般流程如下：</p>
<p><strong>步骤一:</strong></p>
<p>正常的 git 的方式提交本地记录</p>
<p>当需要将本地记录推送到 svn 服务的时候，使用以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn dcommit</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令强制要求，版本管理中的文件的更改都已提交到本地记录。</p>
</blockquote>
<p><strong>步骤二:</strong></p>
<p>当遇到远程仓库已经存在别的提交时，会提交失败，咱们需要先拉取最新版本，但不是用 <code>git pull</code>，而是用以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn rebase</span><br></pre></td></tr></table></figure>
<p><strong>步骤三:</strong></p>
<p>如果有冲突，手动解决冲突，再进行<code>步骤一</code>。</p>
<h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><p>假如要新建一个分支叫 bra6</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn branch -m <span class="string">"new branch bra6"</span> bra6</span><br></pre></td></tr></table></figure>
<p>检查所有分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>你能发现有个新的远程分支叫 <code>remotes/origin/bra6</code> 。</p>
<blockquote>
<p>但是当前的活动分支还是指向 <code>remotes/origin/trunk</code> 。</p>
</blockquote>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>新建一个本地分支映射远程分支，再切换到新的本地分支：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch bra6 remotes/origin/bra6</span><br><span class="line">git checkout bra6</span><br></pre></td></tr></table></figure>
<p>模拟提交一次，确认当前活动分支推送到对应的 svn 分支目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git svn dcommit --dry-run</span><br><span class="line"><span class="comment"># Committing to svn://host/s001/p002/project/branches/bra6 ...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>你还可以通过 <code>git svn info</code> 查看详情</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://git-scm.com/docs/git-svn" target="_blank" rel="noopener">Reference/External Systems/svn</a></li>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F-%E4%BD%9C%E4%B8%BA%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84-Git" target="_blank" rel="noopener">Git 与其他系统 - 作为客户端的 Git</a></li>
<li><a href="https://stackoverflow.com/questions/728931/how-to-switch-svn-branches-using-git-svn" target="_blank" rel="noopener">How to switch svn branches using git-svn?</a></li>
</ul>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>LoRaWAN Backend Interfaces v1.0 学习 (p3)</title>
    <url>/2019/07/16/LoRaWAN-Backend-Interfaces-v1-0-%E5%AD%A6%E4%B9%A0-p3/</url>
    <content><![CDATA[<p>接上一篇。</p>
<p><a href="https://lora-alliance.org/resource-hub/lorawantm-back-end-interfaces-v10" target="_blank" rel="noopener">原文档链接</a></p>
<p>本部分主要介绍漫游过程。</p>
<a id="more"></a>
<h2 id="11-漫游过程"><a href="#11-漫游过程" class="headerlink" title="11. 漫游过程"></a>11. 漫游过程</h2><h3 id="11-1-漫游类型"><a href="#11-1-漫游类型" class="headerlink" title="11.1 漫游类型"></a>11.1 漫游类型</h3><p>有两种 LoRa 漫游类型，名为被动漫游（Passive Roaming）和切换漫游（Handover Roaming）。被动漫游使终端设备能够受益于 NS 的 LoRaWAN 网络服务，处于两个网络的终端设备即使在重叠 RF 功能受限（即信道）范围内在另一个 NS 的控制下使用网关（Gateways）时也能工作。LoRa 会话和终端设备的 MAC 层控制由前 NS 维护，称为 sNS ，而往返于空中接口的帧由后 NS 处理，后者称为 fNS （转发 NS ）。对于给定的 LoRa 会话，只能有一个 sNS，而同一个会话可能涉及零个或多个 fNS 。</p>
<p>有两种类型的 fNS ：有状态和无状态。有状态 fNS 在终端设备的被动漫游开始时创建上下文（context），并利用该上下文来处理相同终端设备的任何后续上行链路/下行链路分组（subsequent）。无状态 fNS 不会创建任何上下文，因此最终必须彼此独立地处理任何上行链路/下行链路分组。假设某个超范围机制漫游伙伴知道给定的 fNS 是无状态还是有状态的。</p>
<p>即使在终端设备执行从一个 NS 到另一个 NS 的切换漫游之后， hNS 仍然使用 JS 和 AS 维护控制平面（control-plane）和数据平面（data-plane）。对于给定 LoRa 会话， hNS 保持不变，直到终端设备执行下一个入网过程。与 fNS 不同， sNS 具有控制终端设备 RF 设置的能力，这允许更灵活的漫游场景。</p>
<p><img src="f6.png" alt="Figure 6 Use of Handover and Passive Roaming"></p>
<p>f6. 使用切换漫游和被动漫游</p>
<p>图 f6 所示，其中切换漫游和被动漫游同时用于 LoRa 会话。这个例子中，终端设备通过 NS1 激活， NS1 充当 hNS。随后，当 NS2 成为 sNS 时，漫游设备执行了从 NS1 到 NS2 的切换漫游，并且当 NS3 成为终端设备的 fNS 时，还从 NS2 到 NS3 进行被动漫游。</p>
<p>漫游激活是终端设备在 vNS 的覆盖范围内激活的能力。</p>
<p>本规范描述了下列漫游情况的过程：</p>
<ul>
<li>正在进行的 LoRa 会话期间的被动漫游</li>
<li>正在进行的 LoRa 会话期间的切换漫游</li>
<li>基于 hNS 和 vNS 之间的切换漫游，漫游激活新的 LoRa 会话</li>
<li>基于 hNS 和 vNS 之间的被动漫游，漫游激活新的 LoRa 会话</li>
</ul>
<p>当 hNS 和 vNS 没有任何漫游协议时激活新的 LoRa 会话超出了本规范的范围。这包含两种 NS 可能与第三个 NS 签订漫游协议的情况（例如， hNS 和第三个 NS 具有切换漫游协议，第三个 NS 和 vNS 具有被动漫游协议）。</p>
<h3 id="11-2-漫游策略"><a href="#11-2-漫游策略" class="headerlink" title="11.2 漫游策略"></a>11.2 漫游策略</h3><p>每个网络运营商（network operator）都应该（SHALL）配置漫游策略，该漫游可以单独允许/禁止被动漫游、切换漫游、基于被动漫游的激活、基于其 NetID 识别的其他网络运营商的基于切换漫游的激活。对于被动漫游，策略还应该（SHALL）包括上行链路 MIC 检查是否由 fNS 完成。</p>
<p>每个网络运营商（network operator）都应该（SHALL）配置漫游策略，该漫游可以允许/禁止被动漫游、切换漫游、基于被动漫游的激活、基于其 DevEUI 识别的单独终端设备的基于切换漫游的激活。</p>
<h3 id="11-3-被动漫游"><a href="#11-3-被动漫游" class="headerlink" title="11.3 被动漫游"></a>11.3 被动漫游</h3><p>此过程适用于 R1.0 [LW10, LW102] 和 R1.1 [LW11] 终端设备和网络。</p>
<h4 id="11-3-1-被动漫游开始"><a href="#11-3-1-被动漫游开始" class="headerlink" title="11.3.1 被动漫游开始"></a>11.3.1 被动漫游开始</h4><p>图 f7 所示针对终端设备的正在进行的 LoRa 会话的两个 NS 之间的被动漫游过程的消息流。有关基于被动漫游的新 LoRa 会话的激活，请参阅第 12.2 节。</p>
<p><img src="f7.png" alt="Figure 7 Passive Roaming start"></p>
<p>f7. 被动漫游开始</p>
<p>步骤 0：</p>
<p>终端设备已通过 NS1 激活。</p>
<p>步骤 1：</p>
<p>当终端设备发送一个数据包，它由 NS2 接收， NS2 与终端设备没有任何上下文关联。</p>
<p>步骤 2：</p>
<p>如果 NS2 被其他网络运营商启用了被动漫游，那么 NS2 应该（SHALL）将接收数据包中的 NwkID 映射到具有被动漫游协议的运营商 NetID。如果未查到， NS2 应该（SHALL）忽略这个数据包，程序终止于此。</p>
<p>步骤 3：</p>
<p>如果查到了一个或多个 NetID ，然后如果 NS2 没有通过 out-of-band 机制配置 NS 的 IP 地址/主机名， 它就应该（SHALL）使用 DNS 去查找（见第 19 章）每一个匹配上 NetID 的 NS 的 IP 地址（比如，NS1 处于这种情形）。如果有不止一个匹配项，那么对每一个匹配的 NS 执行步骤 4-6 。</p>
<p>步骤 4：</p>
<p>NS2 应该发送 PRStartReq 消息到 NS1 ，携带收到数据包的 PHYPayload 以及关联的 ULMetadata 。元数据（metadata）的详情见第 16 章。</p>
<p>步骤 5：</p>
<p>NS1 应该（SHALL）检查它是否与收到的 NetID 标识的网络运营商签有被动漫游协议。如果未找到协议，要决定返回携带 Result=NoRoamingAgreement 的 PRStartAns 。</p>
<p>NS1 应该（SHALL）从 PHYPayload 中提取终端设备的 DevAddr ，识别相应的网络会话完整性密钥（R1.1 中为 FNwkSIntKey，在 R1.0/R1.0.2 中为 NwkSKey），并验证 PHYPayload 中的 MIC 。如果未找到密钥或 MIC 验证失败，则 NS1 应决定返回携带 Result=MICFailed 的 PRStartAns 。</p>
<p>步骤 6：</p>
<p>如果识别出的终端设备配置为使用被动漫游并且 NS1 决定通过 NS2 启用被动漫游，则 NS1 应（SHALL）向 NS2 发送携带 Result=Success 以及与被动漫游相关联的生命周期的 PRStartAns。如果 NS2 要作为有状态 fNS 运行，则 NS1 还应（SHALL）包括 DevEUI 和 ServiceProfile 。如果是 NS1-NS2 的被动漫游协议要求 NS2 对上行数据包进行 MIC 检查，则 PRStartAns 消息中还要有的 FCntUp 和 FNwkSIntKey （R1.1 的情况下） 或 NwkSKey （在 R1.0/1.02 的情况下）。</p>
<p>如果 NS1 此时不希望通过 NS2 启用被动漫游，那么它应该（SHALL）将携带 Result=Deferred 和 Lifetime 的 PRStartAns 发送到 NS2 。在收到此消息时， NS2 在生命周期内不应（SHALL not）再向同一终端设备的 NS1 发送 PRStartReq 。</p>
<p>如果步骤 5 失败了，接着 NS1 应该（SHALL）发送带有标识结果的 PRStartAns 给 NS2 。</p>
<p>NS1 可以同时从多个 NS 接收 PRStartReq ，并决定使用零个或多个 NS 来启用被动漫游。</p>
<p>在相关生命周期到期之后， NS1 和 NS2 应自行终止被动漫游（即，不涉及彼此的额外信令），除非在到期之前使用新一轮 PRStartReq/PRStartAns 扩展被动漫游。对于无状态 fNS 操作， NS1 应（SHALL）将与被动漫游关联的 Lifetime 设置为零。</p>
<p>步骤 7：</p>
<p>一旦收到成功的 PRStartAns ，NS2 就会成为该终端设备 LoRa 会话中的一个 fNS 。NS1 继续作为 sNS 服务。</p>
<p>在此之后， NS2 应该（SHALL）将从终端设备接收的数据包转发给 NS1 ， NS1 应（SHALL）接收来自 NS2 的此类数据包。此外， NS1 应（SHALL）记录 NS2 作为用于将数据包发送到终端设备的候选 fNS 。 NS2 应（SHALL）接受 NS1 发送的数据包，通过其中一个网关转发到终端设备。</p>
<h4 id="11-3-2-分组传输（Packet-Transmission）"><a href="#11-3-2-分组传输（Packet-Transmission）" class="headerlink" title="11.3.2 分组传输（Packet Transmission）"></a>11.3.2 分组传输（Packet Transmission）</h4><p>图 f8 展示了终端在被动漫游时收发数据包的消息流。虽然流程图中一个上行包紧跟着一个下行包，其实上下行链路部分可以以终端设备的类型所允许的任何顺序独立执行。</p>
<p>在无状态 fNS 过程的情况下，每个上行链路分组应该（SHALL）根据第 11.3.1 节进行处理（不是根据本节中的步骤 1-4 ，它假定了 fNS 是有状态的）。然而，本节中的步骤 5-11 适用于下行链路跟组处理，即使对无状态的 fNS 过程也是如此。</p>
<p>本节中的所有步骤都适用于有状态 fNS 过程下的上下行链路的分组处理。</p>
<p><img src="f8.png" alt="Figure 8 Packet transmission using Passive Roaming"></p>
<p>f8. 使用被动漫游的分组传输</p>
<p>步骤 0：</p>
<p>在 fNS 和终端设备的 sNS 之间启用有状态被动漫游。</p>
<p>步骤 1：</p>
<p>终端设备发送由 fNS 接收的分组。</p>
<p>步骤 2：</p>
<p>如果 fNS 需要根据 sNS-fNS 被动路由协议对上行数据包进行 MIC 检查，则 fNS 应（SHALL）从数据包中提取终端设备的 DevAddr 并识别 FNwkSIntKey/NwkSKey ，再验证数据包中的 MIC 。若无法找到 FNwkSIntKey/NwkSKey 或者 MIC 验证失败，那么 fNS 应该（SHALL）忽略这个分组。</p>
<p>步骤 3：</p>
<p>如果识别出终端设备，则 fNS 应该（SHALL）向所识别的终端设备的 sNS 发送 XmitDataReq 消息，该 sNS 承载所接收的分组的 PHYPayload 和相关联的 ULMetadata 。</p>
<p>步骤 4：</p>
<p>在收到 XmitDataReq 后， sNS 应该（SHALL）发回一条携带结果的 XmitDataAns 消息给 fNS 。</p>
<p>当 sNS 具有要发送到终端设备的分组时，执行后续步骤，该分组可以或可以不遵循前面的步骤。</p>
<p>步骤 5：</p>
<p>sNS 有分组要发送给终端设备。</p>
<p>步骤 6：</p>
<p>sNS 应该（SHALL）确定是通过其控制下的 GW 之一还是通过 fNS 控制下的 GW 发送数据包。</p>
<p>步骤 7：</p>
<p>如果是 sNS 确定通过 fNS 发送分组，这个 sNS 应该（SHALL）发送 XmitDataReq 消息给 fNS ，消息携带所接收的分组的 PHYPayload 和相关联的 ULMetadata 。</p>
<p>步骤 8：</p>
<p>如果接收到 XmitDataReq 包含错误， fNS 应该（SHALL）发送携带失败值的 XmitDataAns 消息给 sNS，不应该（SHALL NOT）尝试发送这个分组。否则， fNS 将尝试基于其从 sNS 接收的元数据信息将分组发送到终端设备。如果元数据包括 GWInfo.ULToken ，则 fNS 可以使用该元数据来选择下行链路传输的 GW 。由于时序约束（timing constraints）和网络条件， fNS 可能无法发送分组。在这种情况下， fNS 应该（SHALL）不会重试传输。</p>
<p>步骤 9：</p>
<p>在尝试发送数据包之后， fNS 应（SHALL）向携带 DLFreq1 或 DLFreq2 的 sNS 发送 XmitDataAns 消息（取决于数据包是在 RX1 还是 RX2 或两者上发送），Result=Success 表示传输成功，否则结果是 Result=XmitFailed 。</p>
<h3 id="11-3-3-被动漫游停止"><a href="#11-3-3-被动漫游停止" class="headerlink" title="11.3.3 被动漫游停止"></a>11.3.3 被动漫游停止</h3><p>图 f9 和 f10 展示了终止被动漫游的流程。这个过程仅适用于有状态的 fNS 。</p>
<p><img src="f9.png" alt="Figure 9 sNS-initiated Passive Roaming termination"></p>
<p>f9. sNS-发起的 被动漫游的终止</p>
<p>步骤 0：</p>
<p>在 fNS 和终端设备的 sNS 之间启用被动漫游。</p>
<p>步骤 1：</p>
<p>当 sNS 决定在被动漫游生命周期超时前终止与终端设备的被动漫游时， sNS 应该（SHALL）发送一条 PRStopReq 消息给 fNS ，消息携带终端设备的 DevAddr 和 DevEUI，以及可选的生命周期（Lifetime） 。如果 fNS 是有状态的并且 sNS 不希望在规定的时间跨度内从终端设备的 fNS 接收另一个 PRStartReq ，则 sNS 应该（SHALL）应该包含生命周期（Lifetime）。</p>
<p>步骤 2：</p>
<p>fNS 应该（SHALL）校验具有 DevEUI 的终端设备是否已经处于被动漫游并且与 sNS 相关联。如果这两个条件都满足，然后 fNS 应该（SHALL）发送携带 Result=Success 的 PRStopAns 消息给 sNS 。否则， fNS 应该（SHALL）携带 Result=UnknownDevEUI 的 PRStopAns 消息给 sNS 。如果收到的 PRStopReq 消息包含生命周期 ，则 fNS 在生命周期内应该（SHALL）不会向终端设备的 sNS 发送另一个 PRStartReq 。</p>
<p>如果终端设备的被动漫游先前已使用 PRStopReq 消息终止或者被 PRStartAns/Result=Deferred 拒绝，则新来的生命周期为 0 的 PRStopReq 消息使 NS2 能够再次向终端设备发送 PRStartReq 从该终端设备接收数据包。这仅适用于有状态的 fNS 。</p>
<p><img src="f10.png" alt="Figure 10 fNS-initiated Passive Roaming termination"></p>
<p>f10. fNS-发起的 被动漫游的终止</p>
<p>步骤 0：</p>
<p>在 fNS 和终端设备的 sNS 之间启用被动漫游。</p>
<p>步骤 1：</p>
<p>当 fNS 决定在被动漫游生命周期超时前终止与终端设备的被动漫游时， fNS 应该（SHALL）发送一条 PRStopReq 消息给 sNS，该消息携带终端设备的 DevEUI 。</p>
<p>步骤 2：</p>
<p>sNS 应该（SHALL）校验具有 DevEUI 的终端设备是否由自己提供服务并且已经处于与 fNS 的被动漫游。如果两个条件都满足，然后 sNS 应该（SHALL）发送携带 Result=Success 的 PRStopAns 消息给 fNS。否则， sNS 应该（SHALL）发送携带 Result=UnknownDevEUI 的 PRStopAns 消息给 fNS 。</p>
<p>在被动漫游终止后， sNS 和 fNS 之间应该（SHALL）停止为指定的终端设备向彼此转发数据包。</p>
<h3 id="11-4-切换漫游"><a href="#11-4-切换漫游" class="headerlink" title="11.4 切换漫游"></a>11.4 切换漫游</h3><p>这个过程仅适用于 R1.1 [LW11] 终端设备和网络。</p>
<h4 id="11-4-1-切换漫游开始"><a href="#11-4-1-切换漫游开始" class="headerlink" title="11.4.1 切换漫游开始"></a>11.4.1 切换漫游开始</h4><p>图 f11 说明了终端设备正在进行的 LoRa 会话的切换漫游过程的消息流。基于新 LoRa 会话的切换漫游激活参阅第 12.1 节。</p>
<p><img src="f11.png" alt="Figure 11 Handover Roaming start"></p>
<p>f11. 切换漫游开始</p>
<p>步骤 0：</p>
<p>考虑终端设备已在 NS1 上激活的情况。因此， NS1 作为终端设备的 fNS 、 sNS 以及 hNS 。</p>
<p>步骤 1：</p>
<p>终端设备响应收到的 ForceRejoinReq MAC 指令（未示出）或者在没有外部触发的情况下自动地发送 Rejoin-request Type 0 消息。</p>
<p>步骤 2：</p>
<p>如果 NS2 充当由接收到 DevEUI 标识的终端设备的 sNS ，并且 NS2 没有通过发送 ForceRejoinReq 请求 Rejoin-request Type 0 ，那么 NS2 应该（SHOULD）默默地丢弃消息并且流程终止于此。</p>
<p>如果 NS2 不止终端设备的 sNS，那么 NS2 应该（SHALL）在 Rejoin 请求中使用 NetID 标识的操作符查找其漫游策略。如果 NS2 没有被操作者配置成允许切换漫游，那么 NS2 应该（SHALL）忽略 Rejoin-request 并且终止该程序。否则，如果 NS2 没有通过 out-of-band 机制配置 NS1 的 IP 地址/主机名 ，它应该（SHALL）使用 DNS 发现 NS1 的 IP 地址（参见第 19 节）。</p>
<p>步骤 3：</p>
<p>如果 NS2 没有缓存终端设备的设备配置文件（Device Profile），它应该（SHALL）发送一条携带 DevEUI 的 ProfileReq 消息给 NS1 。如果没有发送 ProfileReq 就跳过步骤 4 和 5 。</p>
<p>步骤 4：</p>
<p>NS1 应该（SHALL）通过 NetID 标识的操作符查找其漫游策略。</p>
<p>步骤 5：</p>
<p>如果 NS1 被配置为允许向 NS2 和 终端设备提供切换漫游，NS1 应该（SHALL）发送带有 Result=Success 、 设备配置文件（Device Profile） 以及 Profile Timestamp（设备配置文件最近一次修改的时间戳）的 ProfileAns 消息给 NS2 。如果没有启用切换漫游， ProfileAns 消息中携带 Result=(NoRoamingAgreement 或者 DevRoamingDisallowed) 以及生命周期（Lifetime），然后程序终止。Lifetime 允许 NS1 在生命周期结束前请求 NS2 而不用向终端设备发送额外的 ProfileReq 。</p>
<p>步骤 6：</p>
<p>NS2 应（SHALL）向 NS1 发送携带 PHYPayload 的 HRStartReq 消息， PHYPayload 中包含 Rejoin-request 消息 、 MACVersion 、 ULMetadata 、 设备配置时间戳 （Device Profile Timestamp），以及由 NS2 标识的参数 DevAddr 、 DLSettigns 、 RxDelay 和可选的 CFList 以分配给终端设备。 NS2 应该（SHALL）将 MACVersion 的值设置为终端设备和 NS2 之间的最高通用版本。</p>
<p>步骤 7：</p>
<p>如果 NS2 或终端设备不允许切换漫游，再或者消息的 MIC 校验失败，则 NS1 应该（SHALL）继续执行步骤 9 。切换漫游拒绝可能时由于每个 NS 或每个设备的漫游策略，或者在终端设备已经被另一个 sNS 服务时可能不需要切换漫游。</p>
<p>如果 NS1 确定自从收到的设备配置文件时间戳指示的时间以来设备配置文件已更改，则 NS1 断定 NS2 具有过时的（stale）设备配置文件信息。在这种情况下， NS1 应该（SHELL）继续执行步骤 9 。</p>
<p>否则， NS1 应该（SHALL）转发 RejoinReq 消息给 JS ，消息携带从 NS2 接收的 PHYPayload ，其中包含 Rejoin-request 消息、 MACVersion 、 DevEUI 、 DevAddr 、 DLSettings 、 RxDelay 以及可选的 CFList 。</p>
<p>步骤 8：</p>
<p>如果 JS 接受了 Rejoin-request ，它应该（SHALL）按照 MACVersion 继续执行 Rejoin-request ，即发送 RejoinAns 消息给 NS1， 消息携带 Result=Success 、 PHYPayload (包含 Join-accept 信息、 SNwkSIntKey 、 FNwkSIntKey 、 NwkSEncKey 、 Lifetime)。 否则 JS 应该（SHALL）发送一条 RejoinAns 消息给 NS1， 消息带有 Result=(UnknownDevEUI 或者 MICFailed) 。</p>
<p>NS1 应该（SHALL）将接收的 Lifetime 值视为它分配给 LoRa 会话的会话生存期（session lifetime）的上限（upper-bound）。</p>
<p>步骤 9：</p>
<p>如果 NS1 在步骤 7 中决定不允许切换漫游，那么 NS1 应该（SHALL）发送一条 HRStartAns 消息给 NS2 ，消息带有设置错误值的 Resule （参见表 t24）以及 Lifetime 。Lifetime 允许 NS1 在生命周期结束前请求 NS2 而不用向终端设备发送额外的 HRStartReq 。</p>
<p>如果 NS1 断定 NS2 已知的设备配置文件是过时的，则 NS1 应（SHALL）将 HRStartAns 消息发给 NS2 ，消息携带 Result=StaleDeviceProfile 、最新设备配置文件以及它的设备配置文件时间戳。 NS2 应该（SHALL）跳回步骤 6 去使用刚刚收到的新设备配置文件。</p>
<p>否则， NS1 应该（SHALL）通过还包含 DLMetadata 和服务配置文件（Service Profile）将 HRStartAns 消息的有效载荷发送给 NS2 。 NS1 也应该（SHALL）缓存收到的 SNwkSIntKey ，这样它就可以在决定将它们转发给 JS 之前验证后续 Rejoin-Type 0 消息的 MIC 。</p>
<p>步骤 10：</p>
<p>如果 HRStartAns 指示了成功，NS2 应该（SHALL）转发收到的带有 Join-accept 消息的 PHYPayload 给终端设备。否则 NS2 应该（SHALL）不发送任何会应该终端设备。</p>
<p>如果重新入网过程（Rejoin Procedure）成功，接着 NS2 应该（SHALL）开始转发从终端设备收到的数据包给 NS1 ， NS1 应该（SHALL）接受这种数据包。另外， NS1 应该（SHALL）开始转发从 AS 收到数据包给 NS2 ，并且 NS2 应该（SHALL）接收这种数据包。</p>
<p>步骤 11：</p>
<p>终端设备发送第一次上行链路数据包。NS2 应该（SHALL）发送这个数据包给 NS1 。</p>
<p>步骤 12：</p>
<p>当 NS2 接收到终端设备的第一次上行链路数据包时， NS2 开始充当 sNS， 而 NS1 停止充当 sNS 。同时， NS1 继续作为 hNS 服务于终端设备。</p>
<h4 id="11-4-2-数据包传输"><a href="#11-4-2-数据包传输" class="headerlink" title="11.4.2 数据包传输"></a>11.4.2 数据包传输</h4><p>TODO …</p>
<h4 id="11-4-3-切换漫游停止"><a href="#11-4-3-切换漫游停止" class="headerlink" title="11.4.3 切换漫游停止"></a>11.4.3 切换漫游停止</h4><h4 id="11-4-4-hNS-重获控制权"><a href="#11-4-4-hNS-重获控制权" class="headerlink" title="11.4.4 hNS 重获控制权"></a>11.4.4 hNS 重获控制权</h4>]]></content>
      <categories>
        <category>LoRaWAN</category>
      </categories>
      <tags>
        <tag>LoRaWAN</tag>
      </tags>
  </entry>
  <entry>
    <title>LoRaWAN Backend Interfaces v1.0 学习 (p2)</title>
    <url>/2019/07/11/LoRaWAN-Backend-Interfaces-v1-0-%E5%AD%A6%E4%B9%A0-p2/</url>
    <content><![CDATA[<p>接上一篇。</p>
<p><a href="https://lora-alliance.org/resource-hub/lorawantm-back-end-interfaces-v10" target="_blank" rel="noopener">原文档链接</a></p>
<p>本部分主要介绍终端状态、激活流程以及停用流程。</p>
<a id="more"></a>
<h2 id="4-终端类型和状态"><a href="#4-终端类型和状态" class="headerlink" title="4. 终端类型和状态"></a>4. 终端类型和状态</h2><p>LoRaWAN 终端设备有两种类型：ABP（Activation-by-Personalization，个性化激活） 激活终端设备，以及 OTA (Over-the-Air，空中激活) 激活终端设备。ABP 终端通过跳过入网过程直接绑定到特定网络，OTA 终端执行入网过程以在选定网络上激活。</p>
<p>图 f3 展示了两种类型终端以及与 OTA 终端设备关联的各种终端设备状态。</p>
<p><img src="f3.png" alt="Figure 3 End-Device types and states"></p>
<p>f3. 终端类型和状态</p>
<p>一台 ABP 终端设备离开制造商或之后配置时应该（SHALL）具有以下信息： DevAddr 、 AppSKey 、 网络会话密钥（network session keys）。网络会话密钥在 R1.1 (LoRaWAN1.1) 中是 SNwkSIntKey 、 FNwkSIntKey 、 NwkSEncKey ，在 R1.0/1.0.2 （LoRaWAN1.0/1.0.2）中是 NwkSKey。为了使终端设备能够轻松使用网络，其 hNS （Home NS）应该（SHALL）具有 DevAddr 、 网络会话密钥 、 终端设备的 AS 信息；并且 AS 应该（SHALL）具有终端设备的 DevAddr 、 AppSKey 。</p>
<p>一台 OTA 终端设备离开制造商或之后配置时应该（SHALL）具有以下信息： DevEUI 、 NwkKey (仅限 R1.1) 、 AppKey 、 JoinEUI 。此时，它被称为通用终端设备。关联的 JS (Join Server) 应该（SHALL）具有终端设备的 DevEUI 、 AppKey 、 NwkKey （仅限 R1.1）。在被委托（commissioned）之前，NS 或 AS 可能没有关于通用终端设备的任何信息。</p>
<p>在其生命周期中重新配置终端设备。配置和重新配置过程详细内容超出本文档范围。</p>
<p>委托过程将终端设备关联到其 hNS 和特定 AS 。已委托的 OTA 终端设备的 JS 应该（SHALL）具有终端设备的 hNS 信息。与终端设备关联的 AS 应该（SHALL）具有终端设备的 DevEUI 。hNS 应该（SHALL）具有与终端设备及其订阅相关的各种配置文件信息。用于为 AS 、 JS 和 NS 提供所需信息的机制超出本文档范围。</p>
<p>当一个被委托的 OTA 终端设备成功执行了入网（激活）过程，它能知道 DevAddr 、 网络会话密钥和 AppSKey 。JS 能知道 DevEUI 、 DevAddr 、 网络会话密钥 、AppSKey 和 DevNonce 。JS 将 DevEUI 和 AppSKey 交付给 AS 。JS 将网络会话密钥和可选的加密 AppSKey 传递给 NS 。</p>
<h2 id="5-调试程序（Commissioning-Procedure）"><a href="#5-调试程序（Commissioning-Procedure）" class="headerlink" title="5. 调试程序（Commissioning Procedure）"></a>5. 调试程序（Commissioning Procedure）</h2><p>调试程序有 AS 、 JS（仅适用于 OTA) 和给定终端设备的 NS 执行。它涉及 JS 将终端设备与 hNS (仅适用于 OTA) 相关联， hNS 和 AS 接收与终端设备及其服务订阅相关的配置文件信息。用于提供关于前述网络元件的所需信息的机制超出本文档范围。</p>
<p>退役程序（Decommissioning Procedure）会破坏终端设备与 hNS 和 AS 之间的关联。此过程涉及在调试时重置在 AS 和 NS 上创建的状态，解除 JS 上的终端设备和 hNS 的绑定（仅适用于 OTA）。</p>
<p>调试和退役程序的细节超出了本规范的范围。</p>
<h2 id="6-激活-ABP-终端设备"><a href="#6-激活-ABP-终端设备" class="headerlink" title="6. 激活 ABP 终端设备"></a>6. 激活 ABP 终端设备</h2><p>图 f4 展示了具有 NS 的 ABP 终端设备激活。此过程适用于 R1.0 和 R1.1 终端设备和网络。</p>
<p>！<a href="f4.png">Figure 4 Activation of ABP End-Device</a><br>f4. 激活 ABP 终端设备</p>
<p>步骤 0：</p>
<p>终端设备、 NS 和 AS 配置了所需的信息，因此终端设备可以在上电之后立即发送数据包。</p>
<p>步骤 1：</p>
<p>当终端设备具有要发送的应用有效负载（Payload）时，它可以在不执行与网络的的任何设置信令的情况下这样做。数据包包含用 AppSKey 加密的应用有效负载，以及使用网络会话完整性密钥（R1.1 中是 SNwkSIntKey 和 FNwkSIntKey ，否则是 NwkSKey）生成的 MIC 。</p>
<p>当 NS 收到数据包是，它应该（SHALL）根据收到的数据包的 DevAddr 执行网络会话完整性密钥查找。 NS 应该（SHALL）使用检索到的密钥验证 MIC 。如果为找到密钥，或者 MIC 校验失败，则 NS 应该丢弃该数据包。</p>
<p>步骤 2：</p>
<p>NS 应将接收的数据包的加密有效负载发送到与终端设备相关联的 AS 。应用程序有效负载可以伴随元数据，例如 DevAddr 、 FPort 、 时间戳（timestamp）等。 NS 应该（SHALL）考虑从终端设备接收第一个数据包时激活终端设备的 LoRa 会话。</p>
<h2 id="7-激活-OTA-终端设备"><a href="#7-激活-OTA-终端设备" class="headerlink" title="7. 激活 OTA 终端设备"></a>7. 激活 OTA 终端设备</h2><p>终端设备使用 OTA 激活过程，以便与网络相互认证，并获得授权发送上行链路和接收下行链路数据包。对于终端设备， NS 分成两种。一类是 hNS ，包含终端设备的终端设备信息、服务以及路由配置文件，并在激活后提供面向 AS 和 JS 的接口。提供 hNS 所需配置文件信息的机制超出本文档范围。另一类是 vNS （Visited NS），它与 hNS 之间制定了业务及技术协议以便能够为终端设备提供服务。</p>
<p>激活程序有两种变体，即固定激活（Activation at Home）和漫游激活（Roaming Activation）。</p>
<p>固定激活：终端设备在 hNS 的无线电覆盖范围内执行激活过程。在程序结束时， hNS 时唯一为终端服务的 NS ,用于联系 AS 和 JS 。</p>
<p>漫游激活：终端设备在 hNS 的无线电覆盖范围之外但是在 vNS 的覆盖范围之内执行激活过程。在此过程中， vNS 在 JS 的帮助下取得 hNS 的身份标识，并从 hNS 获得所需的终端设备和服务配置文件。在程序结束时，终端设备由 vNS 和 hNS 提供服务，以便联系 AS 和 JS 。</p>
<p>当终端设备成功执行入网和重新入网的过程时，终端设备被称为与后端进行了 LoRa 会话。每次 LoRa 会话都与终端设备上管理的上下文参数以及 NS 、 JS 和 AS 相关联。（例如，会话密钥、 DevAddr 、 NS 的 ID 等）。当终端设备执行停用（退出）过程或其他成功的入网/重新入网过程时，LoRa 会话终止。</p>
<h2 id="8-固定激活（OTA-Activation-at-Home-Procedure）"><a href="#8-固定激活（OTA-Activation-at-Home-Procedure）" class="headerlink" title="8. 固定激活（OTA Activation at Home Procedure）"></a>8. 固定激活（OTA Activation at Home Procedure）</h2><p>图 f5 说明了固定激活流程中的消息流。此过程适用于 R1.0 [LW10,LW102] 和 R1.1 [LW11] 终端设备和网络。</p>
<p><img src="f5.png" alt="Figure 5 Message flow for OTA Activation at Home Procedure."></p>
<p>f5. 固定激活流程中的消息流</p>
<p>步骤 1：</p>
<p>终端设备应该（SHALL）发射入网请求（Join-request）消息。</p>
<p>步骤 2：</p>
<p>当 NS 收到入网请求消息， NS 应该（SHALL）按照终端设备的 DevEUI 判断自己是不是 hNS 。在这个流程中假设这个 NS 就是当前终端设备的 hNS 。有关 NS 不是终端设备的 hNS 的情况，请参阅第 12 节，但 NS 配置为使用 JS 进行漫游激活过程。如果 NS 既不是 hNS 也没有配置为使用 JS ，那么这个 NS 应该默默地忽略这条入网请求，程序终止于此。</p>
<p>如果 NS 尚未通过 out-of-band 机制配置 JS 的 IP 地址/主机名， NS 应该（SHALL）使用 DNS 根据收到地 Join-request 消息中的 JoinEUI 来查找 JS 地 IP 地址（参见第 19 节）。如果 DNS 查询失败，那么 NS 应该（SHALL）在此处终止程序。</p>
<p>对于配置了未标识 JS 的 AppEUI 的 R1.0 [LW10] 终端设备， NS 应该（SHOULD）通过 out-of-band 机制配置 JS 的 IP 地址/主机名。</p>
<p>步骤 3：</p>
<p>NS 向 JS 发送 JoinReq 消息，该消息携带 Join-request 消息的 PHYPayload 、 MACVersion 、 DevEUI 、 DevAddr 、 DLSettings 、 RxDelay 和可选的 CFList 。NS 应该（SHALL）将 MACVersion 的值设置为终端设备和 NS 之间的最高通用版本。</p>
<p>步骤 4：</p>
<p>JS 应该（SHALL）根据 MACVersion 处理 Join-request 消息，并将 JoinAns 发送到携带 Result=Success 的 NS ，带有 Join-accept 消息的 PHYPayload、网络会话密钥（在 R1.1 情况下为 SNwkSIntKey 、 FNwkSIntKey 和 NwkSEncKey ，以及在 R1.0/R1.0.2 终端设备的情况下为 NwkSKey）、加密的 AppSKey 或 SessionKeyID 或两者以及成功时的 Lifetime，还有在失败的情况下 Result=UnknownDevEUI 或 MICFailed（例如，如果 JS 无法识别设备，或者 Join-request 的 MIC 未通过校验）。</p>
<p>JS 可以创建与生成的会话密钥相关联的 SessionKeyID 。</p>
<p>为 R1.1 终端设备生成的 SNwkSIntKey ， FNwkSIntKey ， NwkSEncKey 以及 AppSKey 遵循 LoRaWAN1.1 规范 [LW11]。为 R1.0/R1.0.2 终端设备生成的 NwkSKey 遵循 LoRaWAN1.0 规范 [LW10]。当从 JS 传送到 NS 时，使用 JS 和 AS 之间共享的密钥对 AppSKey 进行加密。</p>
<p>对于 R1.0 [LW10] 终端设备，当 AppEUI 未识别 JS 时， JS 也应（SHALL）处理 Join-request 消息。</p>
<p>步骤 5：</p>
<p>如果收到 JoinAns 消息提示成功，则 NS 应该（SHALL）将接收到的具有 Join-accept 消息的 PHYPayload 转发给终端设备。终端设备在接收到 Join-accept 消息时应（SHALL）生成基于 LoRaWAN 规范 [LW10, LW102, LW11] 的网络会话密钥和 AppSKey 。</p>
<p>步骤 6：</p>
<p>当 NS 收到终端设备上行链路的数据包时， NS 应该（SHALL）发送具有加密的 AppSKey 或 SessionKeyID 或两者的应用有效负载给 AS 。</p>
<p>步骤 7：</p>
<p>当 AS 收到加密的 AppSKey 以及应用程序有效负载时， AS 应（SHALL）使用 JS 和 AS 之间共享的密钥解密 AppSKey ，并使用 AppSKey 解密收到的有效负载。如果 NS 未提供加密的 AppSKey ，则 AS 应（SHALL）继续下一步。</p>
<p>步骤 8：</p>
<p>如果 AS 想要直接从 JS 接收 AppSKey ,则执行此步骤。</p>
<p>AS 应该（SHALL）请求由终端设备的 DevEUI 标识的 AppSKey 和来自 JS 的 SessionKeyID 。使用 JS 和 AS 之间共享的密钥加密 AppSKey 。JS 将加密的 AppSKey 、 DevEUI 和 SessionKeyID 发送给 AS 。然后 AS 应该（SHALL）使用 JS 和 AS 之间共享的密钥解密 AppSKey 。然后， AS 开始使用 AppSKey 来加密和解密应用程序有效负载。</p>
<p>无论 NS 和 JS 属于统一管理域还是它们属于两个单独的管理域时，都可以对委托的终端设备进行 OTA 激活。</p>
<h2 id="9-OTA-终端设备的停用（退出）"><a href="#9-OTA-终端设备的停用（退出）" class="headerlink" title="9. OTA 终端设备的停用（退出）"></a>9. OTA 终端设备的停用（退出）</h2><p>OTA 激活的终端设备的 LoRa 会话也可能因各种原因而终止。例如用户合同到期、恶意终端设备行为等。用于停止会话的过程时退出程序（Exit Procedure)，它是入网程序的对立部分（counter-part）。</p>
<p>没有用于执行退出过程的明确且专用的 LoRaWAN 信令。假设终端设备和后端依赖于应用层信令来执行该过程。触发器和应用层信令的实现细节超出本文档范围。</p>
<p>当 AS 通知了 hNS 执行退出过程时还存在单独的 sNS 时， hNS 应（SHALL）执行切换漫游停止过程（Handover Roaming Stop Procedure)以将 LoRaWAN 会话的终止传达给 sNS 。</p>
<p>成功执行新的入网/重新入网过程的终端设备也终止当前的 LoRaWAN 会话，并且在某种程度上，它可以被视为停用（Deactivation）关联该会话。</p>
<h2 id="10-安全关联"><a href="#10-安全关联" class="headerlink" title="10. 安全关联"></a>10. 安全关联</h2><p>表 t1 显示 LoRaWAN 部署使用的完全关联。一些必须的安全关联将在 LoRaWAN 规范中详细说明，有些则留给部署。</p>
<table>
<thead>
<tr>
<th>终点（End-points）</th>
<th>类型</th>
<th>是否属于 LoRa 规范</th>
<th>用途</th>
<th>生成于（若动态）</th>
<th>密钥名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>ED-JS</td>
<td>静态</td>
<td>范围内</td>
<td>保护 Join/Rejoin</td>
<td>-</td>
<td>AppKey, NwkKey</td>
</tr>
<tr>
<td>ED-NS</td>
<td>动态</td>
<td>范围内</td>
<td>保护 OTA 帧递交</td>
<td>Join 过程</td>
<td>SNwkSIntKey, FNwkSIntKey, NwkSEncKey, NwkSKey</td>
</tr>
<tr>
<td>ED-AS</td>
<td>动态</td>
<td>范围内</td>
<td>保护端对端帧负载的递交</td>
<td>Join 过程</td>
<td>AppSKey</td>
</tr>
<tr>
<td>JS-NS</td>
<td>静态</td>
<td>超范围</td>
<td>保护 Join/Rejoin 以及会话密钥传递</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>AS-JS</td>
<td>静态</td>
<td>范围内</td>
<td>保护 AppSkey 传递</td>
<td>-</td>
<td>ASJSKey</td>
</tr>
<tr>
<td>AS-JS</td>
<td>静态</td>
<td>超范围</td>
<td>委托/退役</td>
<td>-</td>
<td>ASJSKey</td>
</tr>
<tr>
<td>JS-Manufacturer</td>
<td>静态</td>
<td>超范围</td>
<td>保护 AppKey/NwkKey 传递</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>NS-NS</td>
<td>静态</td>
<td>超范围</td>
<td>保护 Join/Rejoin 以及 NS 间帧传递</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>t1. LoRaWAN 安全关联</p>
]]></content>
      <categories>
        <category>LoRaWAN</category>
      </categories>
      <tags>
        <tag>LoRaWAN</tag>
      </tags>
  </entry>
  <entry>
    <title>LoRaWAN Backend Interfaces v1.0 学习 (p1)</title>
    <url>/2019/07/10/LoRaWAN-Backend-Interfaces-v1-0-%E5%AD%A6%E4%B9%A0-p1/</url>
    <content><![CDATA[<p>本文为学习 LoRaWAN 后端接口 v1.0 文档时，顺便翻译所得。文档较长，预计分为多篇。</p>
<p><a href="https://lora-alliance.org/resource-hub/lorawantm-back-end-interfaces-v10" target="_blank" rel="noopener">原文档链接</a></p>
<p>本部分主要介绍网络参考模型。</p>
<a id="more"></a>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>这份文档描述了以下服务间的标准接口和数据流：</p>
<ol>
<li>网络服务器（Network Sever）和入网服务器（Join Server）</li>
<li>入网服务器（Join Server）和应用服务器（Application Server）</li>
<li>漫游流量路由的两个网络服务器（Network Servers)</li>
</ol>
<p>Network Server 和 Application Server 之间的接口超出本文档范围。<br>重点关注本文档中描述的 OTAA（Over-the-Air Activation）及单终端漫游时，网络中多实体间信息流。</p>
<h2 id="2-公约"><a href="#2-公约" class="headerlink" title="2. 公约"></a>2. 公约</h2><p>本文中的关键词（”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, 以及 “OPTIONAL”）的解释如 <a href="https://tools.ietf.org/html/rfc2119" target="_blank" rel="noopener">RFC 2119</a> 协议描述。</p>
<h2 id="3-网络参考模型（Network-Reference-Model）"><a href="#3-网络参考模型（Network-Reference-Model）" class="headerlink" title="3. 网络参考模型（Network Reference Model）"></a>3. 网络参考模型（Network Reference Model）</h2><p>LoRaWAN 架构网络参考模型如图 f0, f1 所示：</p>
<p><img src="f0.png" alt="Figure 1 LoRaWAN Network Reference Model (NRM), End-Device at home"></p>
<p>f0. 固定终端（End-Device at home）</p>
<p><img src="f1.png" alt="Figure 2 LoRaWAN Network Reference Model (NRM), roaming End-Device"></p>
<p>f1. 漫游终端（roaming End-Device）</p>
<p><strong>终端（End-Device）：</strong></p>
<p>终端是传感器或执行器。它是无线方式通过无线网关连入一个 LoRaWAN 网络的。终端的应用层连接到云端特定的 Application Server（简称：AS）。这个终端的所有应用层载荷（payloads）都会路由到响应的 AS。</p>
<p><strong>无线网关（Radio-Gateway）：</strong></p>
<p>无线网关传递所有接收到的 LoRaWAN 无线数据报到 Network Server（简称：NS）,连接使用 IP 端口。无线网关完全工作在物理层。它的职责是简单解码上行无线数据报并将数据报定向到 NS。相对地，下行时，无线网关简单处理（不解析）传递 NS 的请求报文。</p>
<p><strong>网络服务器（Network Server）：</strong></p>
<p>NS 是终端设备连接的网络，终止于 LoRaWAN MAC 层。它是星型拓扑的中心。</p>
<p>NS 的一般特征：</p>
<ul>
<li>终端地址检查</li>
<li>帧验证和帧计数检查</li>
<li>确认（Acknowledgments）</li>
<li>数据速率适应</li>
<li>响应终端设备的所有 MAC 层请求</li>
<li>传递上行应用数据到合适的 AS</li>
<li>将任何 AS 的下行消息排队到连接上网络的任何终端</li>
<li>在终端和 Join Servers 之间传递 Join-request（入网请求） 和 Join-accept（入网确认）</li>
</ul>
<p>在漫游架构中，一个 NS 可能扮演三个不同的角色，这取决于终端是否处于漫游场景以及涉及的漫游类型。</p>
<p>Serving NS（简称：sNS）控制终端的 MAC 层。</p>
<p>Home NS （简称：hNS）是设备配置（Device Profile)、服务配置（Service Profile）、路由配置（Routing Profile）存储的位置。hNS 将用于入网过程中直接关联 Join Server。它连接到 AS。如果 hNS 和 sNS 分离，他们遵循漫游协议。上下行数据报在 sNS 和 hNS 间传递。</p>
<p>Forwarding NS（简称：fNS）管理着无线网关。当 sNS 和 fNS 分离，他们遵循漫游协议。将有一个或多个 fNS 服务于终端设备。上下行数据报在 fNS 和 sNS 间传递。</p>
<p><strong>入网服务器（Join Server）：</strong></p>
<p>Join Server（简称：JS）处理终端设备的 OTA（Over-the-Air）激活流程。可能有许多 JS 连接到一个 NS，且一个 JS 可能连接多个 NS。</p>
<p>终端设备通过 Join-request 消息中的 JoinEUI 字段发信号通知 JS。每个 JS 被唯一 JoinEUI 值标识。（注意：AppEUI 存在于 LoRaWAN1.0/1.0.2（LW10，LW102） 的 Join-request 中，被重命名未 LoRaWAN1.1（LW11） 中的 JoinEUI 。术语 JoinEUI 被用于指代该规范中 LW10/LW102 终端设备上下文中的 AppEUI 。</p>
<p>JS 知道终端设备的 hNS 标识符，并在漫游过程中将所需信息提供给其他 NS。<br>JS 包含所需信息处理上行入网请求帧并且生成下行入网确认帧。它也执行网络和应用程序会话密钥（session key）的派生。它将终端设备的网络密钥传送到 NS ，将应用会话密钥传送给相应的应用服务器。</p>
<p>为此，JS 应该（SHALL）包含其控制下的每个终端设备的如下信息：</p>
<ul>
<li>DevEUI</li>
<li>AppKey</li>
<li>NwkKey（仅适用于 LW11 终端设备）</li>
<li>hNS 标识</li>
<li>AS 标识</li>
<li>一种首选网络的方法，以防多个网络可以为终端提供服务</li>
<li>终端设备 LoRaWAN 版本（LoRaWAN 1.0，1.0.2 或 1.1）</li>
</ul>
<p>根密钥（root key） NwkKey 和 AppKey 仅可用于 JS 和终端设备，他们不会被发送到 NS 或 AS 。</p>
<p>安全配置（secure provisioning），存储和使用根密钥 NwkKey 和 AppKey 在终端设备和后端是解决方案整体安全性的内在要素。这些留待实施且超出本文档的范畴。然而，该解决方案可包括 SE （Secure Elements 安全要素） 和 HSM （Hardware Security Modules 硬件安全模块）。</p>
<p>这些信息实际如何编程到 JS 中超出本文档范围，可能因 JS 而异。这可以通过例如门户网站或者一组 API 来实现。</p>
<p>JS 和 NS 应该（SHALL）应该能够建立安全通信，提供端点身份验证（end-point authentication），完整性（integrity）和重放保护（replay protection）以及机密性（confidentiality）。JS 还应该（SHALL）能够安全地传递应用会话密钥（AppSKey）给 AS 。</p>
<p>JS 可以连接到多个 AS，一个 AS 可以连接到多个 JS 。</p>
<p>JS 和 AS 应该（SHALL）能建立安全通信，提供端点身份验证（end-point authentication），完整性（integrity）和重放保护（replay protection）以及机密性（confidentiality）。</p>
<p><strong>应用服务器（Application Server）：</strong></p>
<p>AS 处理相关终端设备地所有应用层有效负载（payload），并为最终用户提供应用级服务。它还为连接的终端设备生成所有应用层下行链路有效载荷。</p>
<p>可以有多个 AS 连接到一个 NS ，也可以一个 AS 连接到许多 NS（例如通过多层网络操作终端）。一个 AS 也可以连接多个 JS 。</p>
<p>hNS 基于 DevEUI 路由上行链路到合适的 AS 。</p>
<p>除了前述的网络元素外，LoRaWAN 架构还在这些实体间定义了以下网络接口：</p>
<p>hNS-JS：此接口用于支持 JS 和 NS 之间的入网（激活）过程。</p>
<p>vNS-JS：此接口用于漫游激活过程。它用于检索于终端设备关联的 hNS 和 NetID 。</p>
<p>ED-NS：此接口用于支持终端设备和 NS 之间的 LoRaWAN MAC 层信令和有效载荷传送。</p>
<p>AS-hNS：此接口用于支持应用程序有效载荷的传送以及在 AS 和 NS 之间关联元数据（meta-data）。</p>
<p>hNS-sNS：此接口用于支持 hNS 和 sNS 之间的漫游信令和有效载荷传递。</p>
<p>sNS-fNS：此接口用于支持 sNS 和 fNS 之间的漫游信令和有效载荷传递。</p>
<p>AS-JS：此接口用于将应用会话密钥（AppSKey）从 JS 传送到 AS 。</p>
]]></content>
      <categories>
        <category>LoRaWAN</category>
      </categories>
      <tags>
        <tag>LoRaWAN</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 goproxy 服务</title>
    <url>/2019/06/26/setup-private-goproxy-server/</url>
    <content><![CDATA[<p>上一篇已经实践了在私网环境中配置自签名的证书，并开启 https。</p>
<p>这一切都是为了能在私网中搭建一个方便可用的 Go 集成环境。</p>
<p>Go 在 1.11 版本添加了 Go Module 特性，成为官方推荐的包管理方式。<br><a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">详情见官方 wiki</a></p>
<p>与 go mod 同时到来的还有 goproxy ，允许使用代理的方式拉取依赖包。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>goproxy 解决了几个长期存在的问题：</p>
<ol>
<li>国内网络环境下从 github 拉去依赖包速度很慢</li>
<li>如果开源作者删除了仓库，对应依赖包就无法找到</li>
</ol>
<p>goproxy 代理服务会缓存依赖包版本，不需要重复下载，也不需要担心原库被删除。</p>
<p>有许多开放的代理服务，比如我常用的是 <a href="https://goproxy.io" target="_blank" rel="noopener">https://goproxy.io</a></p>
<p>只需要设置环境变量 <code>GOPROXY=https://goproxy.io</code> 就能享受代理的快捷。</p>
<p>但是公开的 goproxy 服务仅可以访问公开的仓库，对于私有项目或者<br>私网环境，咱们还得自己建。</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>有几款不错的 goproxy 项目</p>
<ul>
<li><p><a href="https://github.com/gomods/athens" target="_blank" rel="noopener">gomods/athens</a></p>
</li>
<li><p><a href="https://github.com/goproxyio/goproxy" target="_blank" rel="noopener">goproxyio/goproxy</a></p>
</li>
<li><p><a href="https://github.com/goproxy/goproxy.cn" target="_blank" rel="noopener">goproxy/goproxy.cn</a></p>
</li>
</ul>
<p>虽然 <code>athens</code> star 数最多，配置文件很灵活可配项很多，但是我觉得它很长一段时间都会是 beta 状态，我自己部署也不需要太多定制化。</p>
<p>我最后选择了 <code>goproxyio</code> 的项目，代码不多，也很稳定。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>goproxyio 发布了 docker 镜像，可以很方便地使用 docker 部署 goproxy。</p>
<p>这里我们讲一下源码编译。其实也是相当简单，按照 README 文档，一条命令搞定。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然你先要装好 <code>go</code> 和 <code>make</code></p>
</blockquote>
<p>linux 下编译完成后就出现了 goproxy 执行文件。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p>新版 <code>goproxy</code> 需要调用 <code>go mod</code> 命令，所以部署环境要安装 <code>go 1.12</code> （1.12 版本以后支持在任意目录调用 <code>go mod download</code> 命令）。</p>
</blockquote>
<p>上传 goproxy 执行文件到 linux 主机上，放在任意目录下。</p>
<p>直接 <code>./goproxy</code> 运行，会在 <code>8081</code> 端口上开启代理服务，然后本地开发环境，配置 GOPROXY 环境变量。</p>
<blockquote>
<p>假设内网 linux 主机 ip 地址是 10.0.0.1，请自行替换 ip 地址。</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPROXY=http://10.0.0.1:8081</span><br></pre></td></tr></table></figure>
<p>再任意 go mod 管理地项目下执行 go get ，你就能看到 goproxy 服务代你请求了目标地址。</p>
<p>如果你配置了 GOPATH 环境变量， goproxy 服务就会缓存到 <code>$GOPATH/pkg/mod</code> 下。</p>
<p>如果你不愿意设置 GOPATH 环境变量，也可以使用 <code>-cacheDir</code> 参数指定缓存目录。</p>
<p>如果你不想使用 <code>8081</code> 端口，可以使用 <code>-listen</code> 参数指定新的端口。</p>
<p>本地网络不好希望加一个公共 goproxy 作代理转发，那么设置 <code>-proxy</code>。</p>
<p>假设私有仓库地址 <code>cvs.private.com</code> 不希望走代理，那么设置 <code>-exclude</code>，配置域名或者完整仓库路径。</p>
<p>更多使用说明见 <code>./goproxy -h</code>。</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>仅仅 nohup 的方式启动 goproxy 服务太 low 了，咱们使用 systemd 管理。</p>
<blockquote>
<p>路由模式依赖 <code>go mod -m</code> 命令需要执行目录是 <code>go mod</code> 目录，所以无法使用 systemd 管理。</p>
</blockquote>
<p><del>编写一个 <code>goproxy.service</code> 文件</del><br>项目源码目录下 scripts 下有 service 配置文件，可以直接使用。</p>
<blockquote>
<p>一定要配置 <code>Environment</code> 。</p>
</blockquote>
<details><br><summary>放到 <code>/etc/systemd/system/</code> 目录下</summary><br><br>&gt; 假设程序在 <code>/root/goproxy/goproxy</code>， 请自行替换启动文件路径。<br><br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=goproxy service</span><br><span class="line"><span class="attr">Documentation</span>=https://goproxy.io</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=PATH=/usr/local/go/bin</span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"><span class="attr">ExecStart</span>=/root/goproxy/goproxy -cacheDir=/root/go -proxy=https://goproxy.io -exclude=<span class="string">"*.private.com"</span></span><br><span class="line"><span class="attr">KillMode</span>=control-group</span><br><span class="line"><span class="attr">SuccessExitStatus</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br><span class="line"><span class="attr">Alias</span>=goproxy.service</span><br></pre></td></tr></table></figure><br><br></details>

<p>关于如何编写 service 文件，我推荐一篇不错地<a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units" target="_blank" rel="noopener">教程</a></p>
<p>最后启动服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start goproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># （可选）开启自启</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> goproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">sudo systemctl status goproxy</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://github.com/goproxyio/goproxy" target="_blank" rel="noopener">goproxy.io</a></p>
</li>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units" target="_blank" rel="noopener">How To Use Systemctl to Manage Systemd Services and Units</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Go</tag>
        <tag>GOPROXY</tag>
      </tags>
  </entry>
  <entry>
    <title>私网环境启用 https</title>
    <url>/2019/06/26/enable-https-for-private-network/</url>
    <content><![CDATA[<p>本文是搭建私网环境下的 go 自动集成环境的一部分。</p>
<p>go 项目使用 go mod 作依赖包管理，遇到一些问题。<br>对于依赖库是保存在内网仓库的情况，拉取代码会失败，原因是 go mod 获取<br>依赖包版本需要使用 https 请求，而自建的 git 服务没有启用 https 。</p>
<p>如果是传统的 gopath 依赖项目， 只需要 go get -insecure 即可绕过 https 限制，<br>但是这里我们选择用 go mod ，一方面这是 go 官方推荐的方式，也是未来的发展趋势，<br>另一方面是不希望依赖包放在 vendor 目录下一起提交到版本库造成源码目录过于庞大。</p>
<p>接下来讲一讲如何在私网中启用 https， 服务端系统以 CentOS7 为例。</p>
<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>为了达到实验目的，先修改本地机器的 host 文件。</p>
<p>web 服务运行在 192.168.20.44 的局域网 IP 的主机上<br>添加一条虚拟的域名映射到这个 IP 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.20.44 vcs.private.org</span><br></pre></td></tr></table></figure>
<h2 id="创建-SSL-证书"><a href="#创建-SSL-证书" class="headerlink" title="创建 SSL 证书"></a>创建 SSL 证书</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录用于保存公共证书</span></span><br><span class="line">sudo mkdir /etc/ssl/certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录用于保存私钥文件</span></span><br><span class="line">sudo mkdir /etc/ssl/private</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键目录，设置访问权限</span></span><br><span class="line">sudo chmod 700 /etc/ssl/private</span><br></pre></td></tr></table></figure>
<h3 id="创建自签名密钥证书对"><a href="#创建自签名密钥证书对" class="headerlink" title="创建自签名密钥证书对"></a>创建自签名密钥证书对</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo openssl req -x509 -nodes -days 365 \</span><br><span class="line">    -newkey rsa:2048 -keyout /etc/ssl/private/selfsigned.key \</span><br><span class="line">    -out /etc/ssl/certs/selfsigned.crt</span><br></pre></td></tr></table></figure>
<h3 id="命令参数解释"><a href="#命令参数解释" class="headerlink" title="命令参数解释"></a>命令参数解释</h3><p><code>openssl</code> 用于创建和管理OpenSSL证书，密钥和其他文件的基本命令行工具。</p>
<p><code>req -x509</code> 表示我们想要使用 X.509 证书签名请求（CSR，certificate signing request）生成签名证书。</p>
<p><code>-nodes</code> 跳过用密码保护证书的选项。</p>
<p><code>-days 365</code> 有效期 365 天。</p>
<p><code>-newkey rsa:2048</code> 同时生成新证书和新密钥，生成 2048 位的 RSA 密钥。</p>
<p><code>-keyout</code> 密钥输出目录。</p>
<p><code>-out</code> 证书输出目录。</p>
<p>接下来会被要求填写一些证书的基本信息，需要注意的一点是<br><code>CommonName</code> 要填写服务相关的域名或者公共 IP 地址。<br>此处咱们填写 <code>vcs.private.org</code></p>
<details><br><br><summary>还可以一条命令完成</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo openssl req -x509 -nodes -days 365 \</span><br><span class="line">    -subj <span class="string">"/C=CN/ST=ZJ/L=HZ/O=private.org/CN=vcs.private.org"</span> \</span><br><span class="line">    -newkey rsa:2048 -keyout /etc/ssl/private/selfsigned.key \</span><br><span class="line">    -out /etc/ssl/certs/selfsigned.crt</span><br></pre></td></tr></table></figure><br><br></details>

<h3 id="创建-Diffie-Hellman-组"><a href="#创建-Diffie-Hellman-组" class="headerlink" title="创建 Diffie-Hellman 组"></a>创建 Diffie-Hellman 组</h3><p>据说用于与客户端协商 PFS (<a href="https://en.wikipedia.org/wiki/Forward_secrecy" target="_blank" rel="noopener">Perfect Forward Secrecy</a>)，能在私钥受损的情况下保证会话密钥不受损害。</p>
<p>创建要几十秒，需要稍微等一下。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个 DH 组到底有多强大呢，等我学习后再总结下…… Orz</p>
</blockquote>
<h2 id="配置-Nginx-使用-SSL"><a href="#配置-Nginx-使用-SSL" class="headerlink" title="配置 Nginx 使用 SSL"></a>配置 Nginx 使用 SSL</h2><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用 EPEL 库</span></span><br><span class="line">sudo yum install epel-release</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo yum install nginx</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="comment"># 检查状态</span></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>
<h3 id="防火墙配置（如果未开启了防火墙，可跳过）"><a href="#防火墙配置（如果未开启了防火墙，可跳过）" class="headerlink" title="防火墙配置（如果未开启了防火墙，可跳过）"></a>防火墙配置（如果未开启了防火墙，可跳过）</h3><ul>
<li>firewalld 相关</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --add-service=http</span><br><span class="line">sudo firewall-cmd --add-service=https</span><br><span class="line">sudo firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>
<ul>
<li>iptables 相关</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line">sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h3 id="添加-TLS-SSL-服务配置块"><a href="#添加-TLS-SSL-服务配置块" class="headerlink" title="添加 TLS/SSL 服务配置块"></a>添加 TLS/SSL 服务配置块</h3><p><code>sudo vim /etc/nginx/conf.d/ssl.conf</code></p>
<p>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 http2 ssl;</span><br><span class="line">    listen [::]:443 http2 ssl;</span><br><span class="line"></span><br><span class="line">    server_name vcs.private.org;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/ssl/certs/selfsigned.crt;</span><br><span class="line">    ssl_certificate_key /etc/ssl/private/selfsigned.key;</span><br><span class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line"></span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    location = /404.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html" target="_blank" rel="noopener">这篇文章</a>添加更多安全性配置</p>
</blockquote>
<h2 id="启用新配置"><a href="#启用新配置" class="headerlink" title="启用新配置"></a>启用新配置</h2><p>先检查配置文件是否有错误</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure>
<p>重载新配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo service nginx reload</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl https://vcs.private.org</span><br></pre></td></tr></table></figure>
<p>你会看到报错</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl: (60) Peer<span class="string">'s certificate issuer has been marked as not trusted by the user.</span></span><br><span class="line"><span class="string">More details here: http://curl.haxx.se/docs/sslcerts.html</span></span><br><span class="line"><span class="string">.....</span></span><br></pre></td></tr></table></figure>
<h2 id="更新客户端信任证书"><a href="#更新客户端信任证书" class="headerlink" title="更新客户端信任证书"></a>更新客户端信任证书</h2><p>服务端启用了 https，接下来让客户端接受这个自签署的证书。</p>
<ul>
<li>ArchLinux</li>
</ul>
<p>签署好的 <code>selfsigned.crt</code> 文件复制到 <code>/etc/ca-certificates/trust-source/anchors</code> 目录下<br>运行 <code>sudo update-ca-trust</code>， 没有任何输出即更新成功。</p>
<ul>
<li>CentOS7</li>
</ul>
<p>签署好的 <code>selfsigned.crt</code> 文件复制到 <code>/etc/pki/ca-trust/source/anchors</code> 目录下<br>运行 <code>sudo update-ca-trust extract</code>， 没有任何输出即更新成功。</p>
<ul>
<li>Windows10</li>
</ul>
<p>添加比较麻烦参考<a href="https://reactpaths.com/how-to-get-https-working-in-localhost-development-environment-f17de34af046" target="_blank" rel="noopener">这篇文章</a>。<br>虽然添加完成后 chrome 依旧是不接受这个证书的（应该是浏览器策略的问题），但是<br>cmd 里 curl 验证可以通过。</p>
<p>客户端信任了证书之后，再次 curl 请求就能成功了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-on-centos-7" target="_blank" rel="noopener">How To Create a Self-Signed SSL Certificate for Nginx on CentOS 7</a></p>
</li>
<li><p><a href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html" target="_blank" rel="noopener">Strong SSL Security on nginx</a></p>
</li>
<li><p><a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/update-ca-trust.8" target="_blank" rel="noopener">update-ca-trust</a></p>
</li>
<li><p><a href="https://manuals.gfi.com/en/kerio/connect/content/server-configuration/ssl-certificates/adding-trusted-root-certificates-to-the-server-1605.html" target="_blank" rel="noopener">Adding trusted root certificates to the server</a></p>
</li>
<li><p><a href="https://reactpaths.com/how-to-get-https-working-in-localhost-development-environment-f17de34af046" target="_blank" rel="noopener">How to get HTTPS working in localhost development environment</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>https</tag>
        <tag>TLS</tag>
        <tag>CA</tag>
      </tags>
  </entry>
  <entry>
    <title>Try faceswap with Arch Linux</title>
    <url>/2019/04/01/try-faceswap-on-archlinux/</url>
    <content><![CDATA[<h2 id="What-is-faceswap"><a href="#What-is-faceswap" class="headerlink" title="What is faceswap"></a>What is faceswap</h2><p>See <a href="https://github.com/deepfakes/faceswap" target="_blank" rel="noopener">deepfakes/faceswap</a></p>
<p>Seems a little bit difficult to use it.</p>
<p>But worth to give it a try.</p>
<a id="more"></a>
<h2 id="Make-it-work"><a href="#Make-it-work" class="headerlink" title="Make it work"></a>Make it work</h2><h3 id="Install-anaconda"><a href="#Install-anaconda" class="headerlink" title="Install anaconda"></a>Install anaconda</h3><blockquote>
<p>If you don’t have <code>yay</code>, check <a href="http://www.findshank.com/2018/06/18/Install-yaourt-on-Arch-Linux/">this</a> post.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S anaconda</span><br></pre></td></tr></table></figure>
<h3 id="Create-a-conda-virtual-environment"><a href="#Create-a-conda-virtual-environment" class="headerlink" title="Create a conda virtual environment"></a>Create a conda virtual environment</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda create -n faceswap python=3.6</span><br></pre></td></tr></table></figure>
<blockquote>
<p>python3.6 is recommended here.</p>
</blockquote>
<h3 id="Install-Nvidia-driver-and-cuda-support"><a href="#Install-Nvidia-driver-and-cuda-support" class="headerlink" title="Install Nvidia driver and cuda support"></a>Install Nvidia driver and cuda support</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S nvidia nvidia-utils cuda</span><br></pre></td></tr></table></figure>
<blockquote>
<p>We need cuda-10.0 here! If not match this version. try <code>downgrade</code></p>
</blockquote>
<details><br><br><summary>How to downgrade?</summary><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yay -S downgrade</span><br><span class="line">downgrade cudnn</span><br></pre></td></tr></table></figure><br><br></details>

<h3 id="Add-cudnn-to-cuda"><a href="#Add-cudnn-to-cuda" class="headerlink" title="Add cudnn to cuda"></a>Add cudnn to cuda</h3><p>Download cuDNN-7.5 for cuda-10.0 on <a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">official site</a>.</p>
<blockquote>
<p>You neet to register and login first.</p>
</blockquote>
<p>Then unzip the <code>cudnn-10.0-linux-x64-v7.5.0.56.tgz</code> file to <code>/opt/cuda</code>.</p>
<h3 id="Get-faceswap-source-code-and-install-it"><a href="#Get-faceswap-source-code-and-install-it" class="headerlink" title="Get faceswap source code and install it"></a>Get faceswap source code and install it</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/deepfakes/faceswap.git</span><br><span class="line"><span class="built_in">cd</span> faceswap</span><br><span class="line"></span><br><span class="line"><span class="comment"># active conda virtual environment</span></span><br><span class="line"><span class="built_in">source</span> activate faceswap</span><br><span class="line"></span><br><span class="line"><span class="comment"># install</span></span><br><span class="line">python setup.py</span><br></pre></td></tr></table></figure>
<details><br><br><summary>dlib problem?</summary><br><br>You may got <code>dlib</code> problem when you run faceswap.<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># replace blas with openblas</span></span><br><span class="line">sudo pacman -S openblas</span><br><span class="line"></span><br><span class="line"><span class="comment"># get dlib source code</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/davisking/dlib.git</span><br><span class="line"><span class="built_in">cd</span> dlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># active conda virtual environment</span></span><br><span class="line"><span class="built_in">source</span> activate faceswap</span><br><span class="line"></span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><br><br></details>

<h3 id="play-with-faceswap"><a href="#play-with-faceswap" class="headerlink" title="play with faceswap"></a>play with faceswap</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># try gui</span></span><br><span class="line">python faceswap.py gui</span><br></pre></td></tr></table></figure>
<p><img src="Screenshot.png" alt="screenshot"></p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://github.com/deepfakes/faceswap/blob/master/INSTALL.md" target="_blank" rel="noopener">INSTALL.md</a></li>
<li><a href="https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/20/conda/" target="_blank" rel="noopener">Create virtual environments for python with conda</a></li>
<li><a href="https://medium.com/@mimoralea/getting-started-with-nvidia-gpu-anaconda-tensorflow-and-keras-on-arch-linux-8f5f2868a455" target="_blank" rel="noopener">Getting Started With NVIDIA GPU, Anaconda, TensorFlow and Keras on Arch Linux</a></li>
<li><a href="https://www.ostechnix.com/downgrade-package-arch-linux/" target="_blank" rel="noopener">How To Downgrade A Package In Arch Linux</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
        <tag>faceswap</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Arch Linux again</title>
    <url>/2019/03/31/Install-Arch-Linux-again/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>Got a new 256G nvme ssd hard drive.</p>
<p>Install Arch Linux again.</p>
<a id="more"></a>
<h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><p>Download latest ISO file <a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">here</a>.</p>
<p>Check md5 with tools. e.g. <code>md5sum</code>  on linux.</p>
<p>Write ISO file in your usb driver.</p>
<blockquote>
<p>select <code>GPT</code> for EFI only</p>
</blockquote>
<p>Plug in you usb drive and reboot into it.</p>
<h1 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list all disks and partitions</span></span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># my new ssd is `nvme0n1`</span></span><br><span class="line"><span class="comment"># make partition table with `cfdisk`</span></span><br><span class="line">cfisk /dev/nvme0n1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 512M EFI file system --&gt; nvme0n1p1</span></span><br><span class="line"><span class="comment"># 218G Linux file system --&gt; nvme0n1p2</span></span><br><span class="line"><span class="comment"># 20G swap space --&gt; nvme0n1p3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write then quit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format new partitions</span></span><br><span class="line">mkfs.fat -F32 /dev/nvme0n1p1</span><br><span class="line">mkfs.ext4 /dev/nvme0n1p2</span><br><span class="line">mkswap /dev/nvme0n1p3</span><br><span class="line">swapon /dev/nvme0n1p3</span><br><span class="line"></span><br><span class="line"><span class="comment"># mount to /mnt</span></span><br><span class="line">mount /dev/nvme0n1p2 /mnt</span><br><span class="line">mkdir -p /mnt/boot</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/boot</span><br></pre></td></tr></table></figure>
<h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><p>If your network special as China, I recommended you change pacman mirror first.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pacman.d</span><br><span class="line">mv ./mirrorlist ./mirrorlist.bak</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Server = http://mirrors.163.com/archlinux/$repo/os/$arch'</span> &gt; ./mirrorlist</span><br></pre></td></tr></table></figure>
<p>Then follow the pase.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Update you pacman database</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment"># Install base and dev-base</span></span><br><span class="line">pacstrap -i /mnt base base-devel</span><br><span class="line"><span class="comment"># Type enter enter enter ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate fstab</span></span><br><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># Change root</span></span><br><span class="line">arch-chroot /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># set timezone, I live in China, so I use this timezone.</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># set localtime instead of UTC time, I want my windows have same time set.</span></span><br><span class="line">hwclock --systohc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install vim first</span></span><br><span class="line">pacman -S vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Localization</span></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line"><span class="comment"># uncommit follow lines and save</span></span><br><span class="line"><span class="comment">#en_US.UTF-8 UTF-8</span></span><br><span class="line"><span class="comment">#zh_CN.GBK GBK</span></span><br><span class="line"><span class="comment">#zh_CN.UTF-8 UTF-8</span></span><br><span class="line"><span class="comment">#zh_CN.GB2312</span></span><br><span class="line">locale-gen</span><br><span class="line"><span class="comment"># set default locale</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'LANG=en_US.UTF-8'</span> &gt; /etc/locale.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Network</span></span><br><span class="line"><span class="built_in">echo</span> HOSTNAME &gt; /etc/hostname</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'127.0.0.1 localhost'</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'::1       localhost'</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'127.0.1.1 HOSTNAME.localdomain    HOSTNAME'</span>  &gt;&gt;/etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># dhcpcd enable</span></span><br><span class="line">systemctl <span class="built_in">enable</span> dhcpcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initramfs</span></span><br><span class="line">mkinitcpio -p linux</span><br><span class="line"></span><br><span class="line"><span class="comment"># set root password</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Boot loader install intel mocro-code</span></span><br><span class="line">pacman -S intel-ucode</span><br><span class="line"></span><br><span class="line"><span class="comment"># use grub for boot manage</span></span><br><span class="line">pacman -S grub efibootmgr os-prober</span><br><span class="line">grub-install --efi-directory=/boot --bootloader-id=ArchLinux --recheck</span><br><span class="line"></span><br><span class="line"><span class="comment"># If your windows boot loader in other EFI partition, you can mount the partition,</span></span><br><span class="line"><span class="comment"># and copy `Boot` and `Microsoft` to your /boot/EFI/, otherwise, grub can not</span></span><br><span class="line"><span class="comment"># find your windows boot loader.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set default boot on last saved one</span></span><br><span class="line">vim /etc/default/grub</span><br><span class="line"><span class="comment"># GRUB_DEFAULT=saved</span></span><br><span class="line"><span class="comment"># GRUB_SAVEDEFAULT="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># generate grub.cfg</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># install more apps</span></span><br><span class="line">pacman -S iw wpa_supplicant dialog <span class="comment"># wifi support</span></span><br><span class="line">pacman -S ttf-dejavu wqy-microhei wqy-zenhei <span class="comment"># font support</span></span><br><span class="line">pacman -S alsa-utils <span class="comment"># sound</span></span><br><span class="line">pacman -S dosfstools <span class="comment"># support NTFS usb driver</span></span><br><span class="line">pacman -S zsh openssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit, unmount and reboot</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h1 id="After-Install"><a href="#After-Install" class="headerlink" title="After Install"></a>After Install</h1><h2 id="check-network"><a href="#check-network" class="headerlink" title="check network"></a>check network</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check if your network interfaces</span></span><br><span class="line">ip link</span><br><span class="line"><span class="comment"># if state is DOWN, maybe you dhcpcd not run</span></span><br><span class="line">systemctl start dhcpcd &amp;&amp; systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure>
<h2 id="new-sudo-user"><a href="#new-sudo-user" class="headerlink" title="new sudo user"></a>new sudo user</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># then add a new user, my username is shank</span></span><br><span class="line">useradd -m -g users -s /bin/zsh shank</span><br><span class="line"><span class="comment"># new passord for new user</span></span><br><span class="line">passwd shank</span><br><span class="line"><span class="comment"># set new user in sudo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'shank ALL=(ALL) ALL'</span> &gt; /etc/sudoers.d/shank</span><br></pre></td></tr></table></figure>
<h2 id="dual-video-card-driver"><a href="#dual-video-card-driver" class="headerlink" title="dual video card driver"></a>dual video card driver</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check you video card</span></span><br><span class="line">lspci | grep VGA</span><br><span class="line"><span class="comment"># found my NVIDIA GTX 1060 here</span></span><br><span class="line"><span class="comment"># install driver for video card</span></span><br><span class="line">pacman -S mesa vulkan-intel</span><br><span class="line"><span class="comment"># pacman -S xf86-video-intel # often not recommended</span></span><br><span class="line">pacman -S nvidia</span><br><span class="line">pacman -S nvidia-libgl</span><br><span class="line">pacman -S xorg-xrandr</span><br><span class="line">nvidia-xconfig</span><br></pre></td></tr></table></figure>
<h2 id="desktop-environment"><a href="#desktop-environment" class="headerlink" title="desktop environment"></a>desktop environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install an desktop manager</span></span><br><span class="line">sudo pacman -S sddm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install an desktop environment</span></span><br><span class="line">sudo pacman -S gnome</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable the desktop manager</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install NetworkManager</span></span><br><span class="line">sudo pacman -S networkmanager</span><br><span class="line"></span><br><span class="line"><span class="comment"># enable the NetworkManager</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># then reboot</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h2 id="install-yay"><a href="#install-yay" class="headerlink" title="install yay"></a>install yay</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure>
<h2 id="more-apps"><a href="#more-apps" class="headerlink" title="more apps"></a>more apps</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S \</span><br><span class="line">ibus ibus-qt ibus-rime \</span><br><span class="line">ttf-inconsolata noto-fonts-cjk \</span><br><span class="line">powerline-fonts ttf-font-awesome \</span><br><span class="line">net-tools dnsutils inetutils iproute2 \</span><br><span class="line">zsh terminator thunar \</span><br><span class="line">vlc alsa-utils deadbeef cmus telegram-desktop \</span><br><span class="line">goldendict mplayer \</span><br><span class="line">go git wget openssh unzip unrar \</span><br><span class="line">ntfs-3g deluge shadowsocks shadowsocks-qt5 \</span><br><span class="line">gnome gnome-tweaks \</span><br><span class="line">numix-gtk-theme</span><br><span class="line"></span><br><span class="line">yay -S numix-circle-icon-theme-git \</span><br><span class="line">capitaine-cursors \</span><br><span class="line">google-chrome \</span><br><span class="line">visual-studio-code-bin \</span><br><span class="line">foxitreader \</span><br><span class="line">anaconda</span><br></pre></td></tr></table></figure>
<h2 id="more-operations"><a href="#more-operations" class="headerlink" title="more operations"></a>more operations</h2><h3 id="set-oh-my-zsh"><a href="#set-oh-my-zsh" class="headerlink" title="set oh-my-zsh"></a>set oh-my-zsh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="set-anaconda"><a href="#set-anaconda" class="headerlink" title="set anaconda"></a>set anaconda</h3><p>Don’t set anaconda in your path, will occur many problems!<br>So we just set <code>alias</code> to make it easy for activate conda environment.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ~/.zshrc</span></span><br><span class="line"><span class="built_in">alias</span> activate-env=<span class="string">"source /opt/anaconda/bin/activate"</span></span><br><span class="line"><span class="built_in">alias</span> deactivate-env=<span class="string">"source /opt/anaconda/bin/deactivate"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ease access to conda</span></span><br><span class="line">sudo ln /opt/anaconda/bin/conda /usr/bin/conda</span><br></pre></td></tr></table></figure>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><ul>
<li><a href="https://wiki.archlinux.org/index.php/EFI_system_partition" target="_blank" rel="noopener">Installation guide</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Install PostgreSQL on CentOS7</title>
    <url>/2019/03/14/install-postgresql-on-centos7/</url>
    <content><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><blockquote>
<p>if you want install latest version check <a href="https://www.postgresql.org/download/" target="_blank" rel="noopener">official site</a></p>
</blockquote>
<p>I will install postgres9.6 for CentOS7.</p>
<blockquote>
<p>default version of postgres in CentOS7 rpm is not recommanded, I need some new features in postgres9.5+.</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yum install https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-redhat96-9.6-3.noarch.rpm</span><br><span class="line">sudo yum install postgresql96-server postgresql96-contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the database</span></span><br><span class="line">sudo postgresql96-setup initdb</span><br></pre></td></tr></table></figure>
<h1 id="Config-for-remote-access"><a href="#Config-for-remote-access" class="headerlink" title="Config for remote access"></a>Config for remote access</h1><p>Set listen port to wildcard</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo vim /var/lib/pgsql/9.6/data/postgresql.conf</span><br><span class="line">listen_addresses = &apos;*&apos;</span><br></pre></td></tr></table></figure>
<p>Change HBA (host-based authentication) configuration</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo vim /var/lib/pgsql/9.6/data/pg_hba.conf</span><br><span class="line">host    all             all             0.0.0.0/0            md5</span><br></pre></td></tr></table></figure>
<h1 id="Start-server"><a href="#Start-server" class="headerlink" title="Start server"></a>Start server</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql-9.6</span><br><span class="line">sudo systemctl start postgresql-9.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># check listen port</span></span><br><span class="line">ss -ant | grep 5432</span><br></pre></td></tr></table></figure>
<h1 id="Login-default-role"><a href="#Login-default-role" class="headerlink" title="Login default role"></a>Login default role</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -i -u postgres</span><br><span class="line"><span class="comment"># to access PostgreSQL prompt</span></span><br><span class="line">psql</span><br><span class="line"><span class="comment"># for quit PostgreSQL prompt</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure>
<h1 id="Create-a-new-role"><a href="#Create-a-new-role" class="headerlink" title="Create a new role"></a>Create a new role</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">createuser --interactive</span><br></pre></td></tr></table></figure>
<blockquote>
<p>My new role is <code>rwuser</code></p>
</blockquote>
<h1 id="Create-a-new-database"><a href="#Create-a-new-database" class="headerlink" title="Create a new database"></a>Create a new database</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">createdb test1</span><br></pre></td></tr></table></figure>
<h1 id="Login-new-role"><a href="#Login-new-role" class="headerlink" title="Login new role"></a>Login new role</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># access PostgreSQL prompt with new role</span></span><br><span class="line">sudo su -c <span class="string">"psql -d test1"</span> - rwuser</span><br><span class="line"><span class="comment"># type following command in  PostgreSQL prompt</span></span><br><span class="line">\password</span><br><span class="line"><span class="comment"># then set your new password</span></span><br></pre></td></tr></table></figure>
<p>You can use navicat to connect pgsql later.</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-centos-7#create-a-new-role" target="_blank" rel="noopener">How To Install and Use PostgreSQL on CentOS 7</a></li>
<li><a href="https://www.liquidweb.com/kb/change-a-password-for-postgresql-on-linux-via-command-line/" target="_blank" rel="noopener">Change a Password for PostgreSQL on Linux via Command Line</a></li>
<li><a href="https://www.postgresql.org/download/linux/redhat/" target="_blank" rel="noopener">Official install guide</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS7</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>For-Select loop in Go</title>
    <url>/2019/03/14/for-select-in-go/</url>
    <content><![CDATA[<p>Simple <code>break</code> in for-select loop, will not break out of <code>for</code> loop. You should use <code>break label</code>.</p>
<a id="more"></a>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    one := time.After(time.Second * <span class="number">2</span>)</span><br><span class="line">    two := time.After(time.Second * <span class="number">4</span>)</span><br><span class="line">    three := time.After(time.Second * <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="comment">//fmt.Println("out of for") // anything here will invoke error</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"head"</span>)</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> &lt;-one:</span><br><span class="line">            fmt.Println(<span class="string">"one"</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-two:</span><br><span class="line">            fmt.Println(<span class="string">"two"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> &lt;-three:</span><br><span class="line">            fmt.Println(<span class="string">"three"</span>)</span><br><span class="line">            <span class="keyword">break</span> out</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">"tail"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//out: // break label must define before for loop</span></span><br><span class="line">    fmt.Println(<span class="string">"in the end"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://play.golang.org/p/vz_uQb4nhPz" target="_blank" rel="noopener">Playground</a></p>
<h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p><a href="https://golang.org/ref/spec#Break_statements" target="_blank" rel="noopener">Break statement</a></p>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Solve ridiculous problem in Golang</title>
    <url>/2018/10/30/Solve-ridiculous-problem-in-Golang/</url>
    <content><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal SIGSEGV: segmentation violation code=0x1 addr=0x10 pc=0x6e2bea]</span><br><span class="line"></span><br><span class="line">goroutine 10233 [running]:</span><br><span class="line">.../backend.(*ActionBackend).ReceiveTXPacket(0xc42968f940)</span><br><span class="line">        /.../backend/actionbackend.go:102 +0x2a</span><br><span class="line">.../backend.NewActionBackend.func1(0xc42968f940)</span><br><span class="line">        /.../backend/actionbackend.go:45 +0x2b</span><br><span class="line">created by .../backend.NewActionBackend</span><br><span class="line">        /.../backend/actionbackend.go:44 +0x89</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 65536</span><br></pre></td></tr></table></figure>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>First, I try to find some logic problem in panic lines. But nothing should be modified.</p>
<p>Then I reconigized my program need to create 3000 connection. (It’s a stress test program.)</p>
<p>While I type this <code>ulimit -n</code>, it shows the file-size writing limit is <code>1024</code>. So … boooom!</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Install mysql on wsl</title>
    <url>/2018/09/15/Install-mysql-on-wsl/</url>
    <content><![CDATA[<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><ol>
<li><p>Install a distro in windows store.</p>
<blockquote>
<p>I got ubuntu18.04LTS here.</p>
</blockquote>
</li>
<li><p>Change sources.list</p>
<p> backup first.</p>
 <a id="more"></a>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p> run these commands in vi to replace url.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:%s/archive.ubuntu.com/mirrors.163.com</span><br><span class="line">:%s/security.ubuntu.com/mirrors.163.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install mysql</p>
<blockquote>
<p>meet some problem when install mariadb, so I change to mysql.</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br><span class="line">sudo service mysql start</span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>Adjusting User Authentication and Privileges</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line"><span class="comment"># after enter mysql, check which authentication method each of your MySQL user accounts use with the following command</span></span><br><span class="line"><span class="comment"># SELECT user,authentication_string,plugin,host FROM mysql.user;</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'YourPassword'</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04" target="_blank" rel="noopener">How To Install MySQL on Ubuntu 18.04</a></p>
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>How to revert Singly Linked List</title>
    <url>/2018/08/17/How-to-revert-Linked-List/</url>
    <content><![CDATA[<p>Here is the struct of Singly Linked List and Print method:</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Link</span> &#123;</span></span><br><span class="line">  Link* next;</span><br><span class="line">  DType data;</span><br><span class="line">  Link(DType data) &#123; <span class="keyword">this</span>-&gt;data = data; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(Link* head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; head-&gt;data &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Two ways to revert the Singly Linked List.</p>
<ul>
<li>Non-Recursion version</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Link* <span class="title">Reverse</span><span class="params">(Link* head)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  Link *r, *p, *q;</span><br><span class="line">  p = head;</span><br><span class="line">  q = head-&gt;next;</span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">while</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    r = q-&gt;next;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    p = q;</span><br><span class="line">    q = r;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Recursion version</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Link* <span class="title">Reverse2</span><span class="params">(Link* head, Link*&amp; nhead)</span> </span>&#123;</span><br><span class="line">  nhead = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    nhead = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">  &#125;</span><br><span class="line">  Link* tail = Reverse2(head-&gt;next, nhead);</span><br><span class="line">  tail-&gt;next = head;</span><br><span class="line">  head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main function &amp; result:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Link *root, *p;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">      root = p = <span class="keyword">new</span> Link(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p-&gt;next = <span class="keyword">new</span> Link(i);</span><br><span class="line">      p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Print(root);</span><br><span class="line">  <span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">  root = Reverse(root);</span><br><span class="line">  Print(root);</span><br><span class="line">  <span class="comment">// 9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"></span><br><span class="line">  Link* nroot;</span><br><span class="line">  Reverse2(root, nroot);</span><br><span class="line">  Print(nroot);</span><br><span class="line">  <span class="comment">// 0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>LinkdList</tag>
      </tags>
  </entry>
  <entry>
    <title>Use VirtualBox to access OS on hard drive</title>
    <url>/2018/08/15/Use-VirtualBox-to-access-OS-on-hard-drive/</url>
    <content><![CDATA[<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>虽然已经主要在用Arch了，但是最近有朋友让我帮他改改cpp代码。<del>代码拿过来一看，好家伙，浓浓的windows气息，没办法人家公司就是做windows桌面应用的。</del></p>
<p>那么问题来了，我不想重启电脑切换系统，还要用windows给他调代码，怎么办？</p>
<p>用虚拟机吧，传统流程：新建一个虚拟机-&gt;装系统-&gt;搭开发环境-&gt;调代码(-&gt;删除虚拟机)。<strong>麻烦</strong></p>
<a id="more"></a>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>既然虚拟机也要用虚拟硬盘文件装系统，何不挂载装有系统的硬盘直接用呢？ Google一下，这是可以的。</p>
<blockquote>
<p>注意：运行虚拟机的硬盘最好与虚拟机挂载系统的硬盘分开，防止未知错误；重要数据最好备份下。</p>
</blockquote>
<p>下面主要按照我的实际情况讲，我电脑里双系统分在两块硬盘上，win 在 /dev/sda，linux 在 /dev/sdb，这是最理想的，互不干扰。</p>
<ol>
<li><p>root 权限下运行 VirtualBox</p>
</li>
<li><p>新建一个windows虚拟机，添加虚拟硬盘时选择<code>Do not add a virtual hard drive</code>(不添加虚拟硬盘)，其他配置照常，然后保存。</p>
</li>
<li><p>输入以下命令创建映射真实硬盘的虚拟硬盘文件：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo VBoxManage internalcommands createrawvmdk -filename <span class="string">"&lt;/path/to/file&gt;.vmdk"</span> -rawdisk /dev/sda</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>&lt;/path/to/file&gt;.vmdk</code>换成你要保存虚拟硬盘的文件位置，例如 <code>~/vbox/win.vmdk</code>。<br><code>/dev/sda</code>是我win的安装盘，你可以用<code>sudo fdisk -l</code>查看你的系统所在位置。<br>以上命令是可以指定只映射某几个分区的，具体命令自己Google。</p>
</blockquote>
</li>
<li><p>设置windows虚拟机的存储设备（Settings-&gt;Storage-&gt;Add Hard Disk-&gt;Choose existing disk），找到上一步生成的vmdk文件添加即可。</p>
</li>
<li><p>因为我的windows启动方式是EFI，所以在Settings-&gt;System中勾上<code>Enable EFI(special OSes only)</code>。</p>
</li>
</ol>
<p>至此，可以启动了。</p>
<p><img src="result.gif" alt="result"></p>
<blockquote>
<p>顺便使用下Linux下的gif制作器 <code>peek</code></p>
</blockquote>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><p>[Using a Physical Hard Drive with a VirtualBox VM]<a href="https://www.serverwatch.com/server-tutorials/using-a-physical-hard-drive-with-a-virtualbox-vm.html" target="_blank" rel="noopener">https://www.serverwatch.com/server-tutorials/using-a-physical-hard-drive-with-a-virtualbox-vm.html</a></p>
]]></content>
      <tags>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Downgrade vscode to 1.25.1-3</title>
    <url>/2018/08/15/Downgrade-vscode-to-1-25-1-3/</url>
    <content><![CDATA[<h1 id="Sunny-day"><a href="#Sunny-day" class="headerlink" title="Sunny day"></a>Sunny day</h1><p>Happy to update vscode to 1.26.0-2 this morning.</p>
<a id="more"></a>
<blockquote>
<p>How to update?</p>
</blockquote>
<p>Just type</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>
<h1 id="Awful-user-experience"><a href="#Awful-user-experience" class="headerlink" title="Awful user experience"></a>Awful user experience</h1><p>This new <a href="https://code.visualstudio.com/updates/v1_26#_custom-title-bar-and-menus-for-windowslinux" target="_blank" rel="noopener">feature</a> driven me upgrade to this version.</p>
<p>But I would say it’s a bad idea.</p>
<ol>
<li>Title bar is more wide on linux. (ugly)</li>
<li>Title text not align center on top. (too ugly)</li>
</ol>
<p>The feature on UI I can choose to ignore it. Because it’s disabled in default settings.</p>
<p><strong>BUT</strong> I can’t tolerate the new bug. If I try to <code>Open Folder...[Ctrl+K Ctrl+O]</code>, the editor will crash.(OS: Arch Linux x86_64, Kernel: 4.17.14-arch1-1-ARCH, WM: i3)</p>
<p>so I need to downgrade.</p>
<h1 id="How-to-downgrade"><a href="#How-to-downgrade" class="headerlink" title="How to downgrade"></a>How to downgrade</h1><p>I installed vscode via <code>yaourt</code>, but it’s not support downgrade option. So I google this problem.</p>
<p>Someone said <code>Old packages are normally kept in: /var/cache/pacman/pkg/</code></p>
<p>So check the directoy by <code>ls -l /var/cache/pacman/pkg/visual-studio-code-*</code>, I got this</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 47360116 Jul 13 18:20 /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-1-x86_64.pkg.tar.xz</span><br><span class="line">-rw-r--r-- 1 root root 47352676 Aug  5 02:39 /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-3-x86_64.pkg.tar.xz</span><br><span class="line">-rw-r--r-- 1 root root 56026160 Aug 14 18:36 /var/cache/pacman/pkg/visual-studio-code-bin-1.26.0-2-x86_64.pkg.tar.xz</span><br></pre></td></tr></table></figure>
<p>Soooo lucky!</p>
<p>Just use pacman to reinstall the pkg</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -U /var/cache/pacman/pkg/visual-studio-code-bin-1.25.1-3-x86_64.pkg.tar.xz</span><br></pre></td></tr></table></figure>
<p><em>Awsome <code>pacman</code>, save my life!</em></p>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><p><a href="https://bbs.archlinux.org/viewtopic.php?id=95959" target="_blank" rel="noopener">how to downgrade via yaourt</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>screen: Cannot open your terminal &#39;/dev/pts/1&#39;</title>
    <url>/2018/07/25/screen-Cannot-open-your-terminal-dev-pts-1/</url>
    <content><![CDATA[<h1 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened"></a>What happened</h1><p>I bought a Tencent Cloud CVM to hold my DST server few days ago.</p>
<a id="more"></a>
<p>Use screen to run <code>server.sh</code> is perfect. I login <code>UserA</code> to run screen session. Then, use another device to login <code>UserB</code>. When I use <code>UserB</code> to login <code>UserA</code> and run <code>screen -r</code> to continue my screen session, following error occur:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Cannot open your terminal <span class="string">'/dev/pts/1'</span> - please check.</span><br></pre></td></tr></table></figure>
<h1 id="How-to-Fix"><a href="#How-to-Fix" class="headerlink" title="How to Fix"></a>How to Fix</h1><p>After login in <code>UserB</code>, run this to get a new <code>tty</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">script /dev/null</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://blog.sina.com.cn/s/blog_704836f401010osn.html" target="_blank" rel="noopener">polygun2000’s blog</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Screen</tag>
      </tags>
  </entry>
  <entry>
    <title>Use new comment system</title>
    <url>/2018/07/18/use-new-comment-system/</url>
    <content><![CDATA[<blockquote>
<p>Hypercomments will never provide FREE service…</p>
</blockquote>
<p>So I change to LiveRe</p>
<p><strong>Looks good &amp; cool!</strong></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>comment</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Failed to delete using Trash in vscode</title>
    <url>/2018/06/18/Failed-to-delete-using-Trash-in-vscode/</url>
    <content><![CDATA[<h1 id="Update-on-2018-07-25"><a href="#Update-on-2018-07-25" class="headerlink" title="Update on 2018-07-25"></a>Update on 2018-07-25</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>OS: Arch linux<br>Desktop: i3 4.15.0.1<br>VScode version: 1.25.1</p>
<a id="more"></a>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>VScode base on electron, electron will call <code>gvfs-trash</code> to move file to trash.</p>
<p>If you type <code>gvfs-trash</code> in commandline , you may got this problem:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">This tool has been deprecated, use <span class="string">'gio trash'</span> instead.</span><br><span class="line">See <span class="string">'gio help trash'</span> <span class="keyword">for</span> more info.</span><br></pre></td></tr></table></figure>
<h2 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h2><p>add this to you environment:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ELECTRON_TRASH=gio</span><br></pre></td></tr></table></figure>
<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><p><a href="https://github.com/Microsoft/vscode/issues/13189" target="_blank" rel="noopener">Linux: Unable to move file to trash upon delete (#13189)</a></p>
<hr>
<h1 id="Old-record"><a href="#Old-record" class="headerlink" title="Old record"></a>Old record</h1><blockquote>
<p>Following method not work in i3</p>
</blockquote>
<h2 id="Environment-1"><a href="#Environment-1" class="headerlink" title="Environment"></a>Environment</h2><p>Desktop :Gnome 3.28.2<br>VScode version: 1.24.1</p>
<h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h2><p>When I want to delete file from explorer in vscode, following Error occurs:</p>
<p><code>Failed to delete using the Trash. Do you want to permanently delete instead?</code></p>
<h2 id="Solve-1"><a href="#Solve-1" class="headerlink" title="Solve"></a>Solve</h2><p>Maybe <code>gvfs-trash</code> not work properly. It has been deprecated in this gnome version.<br>So open shell, install another tool for help.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## need python installed</span></span><br><span class="line">sudo easy_install trash-cli</span><br></pre></td></tr></table></figure>
<h2 id="Refs-1"><a href="#Refs-1" class="headerlink" title="Refs"></a>Refs</h2><p><a href="https://github.com/Microsoft/vscode/issues/49675" target="_blank" rel="noopener">Failed to delete using Trash in Ubuntu 18.04 (#49675)</a><br><a href="https://github.com/Microsoft/vscode/issues/22820#issuecomment-288239512" target="_blank" rel="noopener">Moving files to trash always fails in Kubuntu 16.04 (#22820)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Record apps I have installed on Arch</title>
    <url>/2018/06/17/Record-apps-I-have-installed-on-Arch/</url>
    <content><![CDATA[<h1 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S \</span><br><span class="line">ibus ibus-qt ibus-rime \</span><br><span class="line">ttf-inconsolata noto-fonts-cjk \</span><br><span class="line">powerline-fonts ttf-font-awesome \</span><br><span class="line">net-tools dnsutils inetutils iproute2 \</span><br><span class="line">zsh terminator thunar \</span><br><span class="line">vlc alsa-utils deadbeef cmus telegram-desktop \</span><br><span class="line">goldendict mplayer \</span><br><span class="line">go git wget openssh unzip unrar \</span><br><span class="line">ntfs-3g deluge shadowsocks shadowsocks-qt5 \</span><br><span class="line">gnome gnome-tweaks \</span><br><span class="line">numix-gtk-theme</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="yay"><a href="#yay" class="headerlink" title="yay"></a>yay</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S git</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br><span class="line"></span><br><span class="line">yay -S numix-circle-icon-theme-git \</span><br><span class="line">capitaine-cursors \</span><br><span class="line">google-chrome \</span><br><span class="line">visual-studio-code-bin \</span><br><span class="line">foxitreader \</span><br><span class="line">anaconda</span><br></pre></td></tr></table></figure>
<p><strong>To be contine …</strong></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Install vscode on Arch Linux</title>
    <url>/2018/06/17/Install-vscode-on-Arch-Linux/</url>
    <content><![CDATA[<h1 id="Method-1-official-binary-version-recommend"><a href="#Method-1-official-binary-version-recommend" class="headerlink" title="Method 1: official binary version (recommend)"></a>Method 1: official binary version (recommend)</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yaourt -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Method-2-open-source-build"><a href="#Method-2-open-source-build" class="headerlink" title="Method 2: open source build"></a>Method 2: open source build</h1><p>first should modify open file limit on your device.</p>
<p>edit <code>/etc/security/limits.conf</code></p>
<p>Add following lines to the end of file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*         hard    nofile      500000</span><br><span class="line">*         soft    nofile      500000</span><br><span class="line">root      hard    nofile      500000</span><br><span class="line">root      soft    nofile      500000</span><br></pre></td></tr></table></figure>
<p>Reboot (or log out and back in)</p>
<p>switch to root user <code>sudo su</code></p>
<p>use <code>limit -n</code> to ensure the value is 500000</p>
<p>Then switch back to your user</p>
<p>Just like <code>su - shank</code></p>
<p>Then run</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo yaourt vscode</span><br></pre></td></tr></table></figure>
<p>Then Type <code>4</code> to choose this one</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">4 aur/code 1.24.1-1 (143) (16.35)</span><br><span class="line">    Microsoft Code -- The Open Source build of Visual Studio Code (vscode)</span><br></pre></td></tr></table></figure>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ul>
<li><a href="https://easyengine.io/tutorials/linux/increase-open-files-limit/" target="_blank" rel="noopener">Increase “Open Files Limit”</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Install yay (or yaourt) on Arch Linux</title>
    <url>/2018/06/17/Install-yaourt-on-Arch-Linux/</url>
    <content><![CDATA[<h1 id="How-to-install-yay-another-great-AUR-helper"><a href="#How-to-install-yay-another-great-AUR-helper" class="headerlink" title="How to install yay (another great AUR helper)"></a>How to install <a href="https://github.com/Jguer/yay" target="_blank" rel="noopener">yay</a> (another great AUR helper)</h1><blockquote>
<p>Update on 2018/10/16</p>
</blockquote>
<h2 id="Recommended-Use-yay-to-replace-yaourt"><a href="#Recommended-Use-yay-to-replace-yaourt" class="headerlink" title="[Recommended] Use yay to replace yaourt"></a><strong>[Recommended]</strong> Use <code>yay</code> to replace <code>yaourt</code></h2><p>If you already got <code>yaourt</code> just type:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yaourt -S yay</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Otherwise, you can also install by <code>makepkg</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure>
<h2 id="Deprecated-Install-yaourt"><a href="#Deprecated-Install-yaourt" class="headerlink" title="[Deprecated]Install yaourt"></a><strong>[Deprecated]</strong><del>Install <code>yaourt</code></del></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf</span><br></pre></td></tr></table></figure>
<p>Then, add following lines to the end.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = http://repo.archlinuxcn.org/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure>
<p>Install the GPG key.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure>
<p>Finally, update and install yaourt.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy yaourt</span><br></pre></td></tr></table></figure>
<p>Done!</p>
<p><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener">reference</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Rime默认简体中文配置</title>
    <url>/2018/06/09/Rime%E9%BB%98%E8%AE%A4%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://rime.im/" target="_blank" rel="noopener">Rime</a>这个输入法是很强大。</p>
<p>但是我对输入法的要求不高: 能输入中文；界面简洁；词汇联想别太”睿智”。</p>
<a id="more"></a>
<p>恰好这些需求Rime都很轻松的满足了，但是唯一不爽的是每次切换到Rime都默认输入繁中，再F4切换简中就很不方便。</p>
<p>虽然这是作者的喜好，但是我不习惯，还好文档提供了默认使用简中的配置方案。</p>
<p>解决方案：<code>vim ~/.config/ibus/rime/luna_pinyin.custom.yaml</code></p>
<blockquote>
<p>这是linux中的用户配置位置，其他系统查看<a href="https://github.com/rime/home/wiki/RimeWithSchemata#rime-%E4%B8%AD%E7%9A%84%E6%95%B8%E6%93%9A%E6%96%87%E4%BB%B6%E5%88%86%E4%BD%88%E5%8F%8A%E4%BD%9C%E7%94%A8" target="_blank" rel="noopener">这里</a></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># luna_pinyin.custom.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">patch:</span></span><br><span class="line">  <span class="attr">switches:</span>                   <span class="comment"># 注意缩进</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ascii_mode</span></span><br><span class="line">      <span class="attr">reset:</span> <span class="number">0</span>                <span class="comment"># reset 0 的作用是当从其他输入法切换到本输入法重设为指定状态</span></span><br><span class="line">      <span class="attr">states:</span> <span class="string">[</span> <span class="string">中文,</span> <span class="string">西文</span> <span class="string">]</span>   <span class="comment"># 选择输入方案后通常需要立即输入中文，故重设 ascii_mode = 0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">full_shape</span></span><br><span class="line">      <span class="attr">states:</span> <span class="string">[</span> <span class="string">半角,</span> <span class="string">全角</span> <span class="string">]</span>   <span class="comment"># 而全／半角则可沿用之前方案的用法。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">simplification</span></span><br><span class="line">      <span class="attr">reset:</span> <span class="number">1</span>                <span class="comment"># 增加这一行：默认启用「繁→簡」转换。</span></span><br><span class="line">      <span class="attr">states:</span> <span class="string">[</span> <span class="string">漢字,</span> <span class="string">汉字</span> <span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>参考 <a href="https://github.com/rime/home/wiki/CustomizationG" target="_blank" rel="noopener">Rime 定制指南</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Rime</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux安装记录</title>
    <url>/2018/06/03/ArchLinux%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>本教程在EFI启动的Windows10台式机上完成。</p>
</blockquote>
<ol>
<li>Arch Linux 2018.06.01 iso，<a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">官网下载</a></li>
<li>USB Driver &gt; 1G</li>
<li>Etcher <a href="https://etcher.io/" target="_blank" rel="noopener">官网下载</a></li>
</ol>
<a id="more"></a>
<h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><h3 id="预留空间"><a href="#预留空间" class="headerlink" title="预留空间"></a>预留空间</h3><p>使用 Windows 的磁盘管理工具压缩分区卷，不要格式化。(我预留的空间为60G。)</p>
<h3 id="U盘启动"><a href="#U盘启动" class="headerlink" title="U盘启动"></a>U盘启动</h3><ol>
<li>使用Etcher将Arch安装盘写入U盘</li>
<li>重启电脑启动到U盘系统</li>
<li>你将看到 <code>root@archiso ~ #</code></li>
</ol>
<h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>查看分区表。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p>记录以下分区标识。</p>
<ol>
<li><code>EFI System</code> 分区，此处以 <code>/dev/sda1</code> 为例。</li>
<li>将要安装 Arch Linux 的硬盘，此处以 <code>/dev/sdb</code> 为例。</li>
<li>找到之前预留的空间，此处以 <code>/dev/sdb2</code> 为例。</li>
</ol>
<p>使用新手分区工具 <code>cfdisk</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cfdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p>上下移动选择到 <code>Free Space</code>，左右移动选择到 <code>New</code>，分配与内存等大小的Swap分区，此处输入 <code>8G</code>，然后回车确认。再选择 <code>Type</code>，分区类型求改为 <code>Linux swap</code>。（当然也可以不分交换分区）</p>
<p>再次选择剩余的 <code>Free Space</code>，分出 <code>/</code>和<code>/home</code>。（因人而异，为了方便，我剩下的只分一个区，类型为 <code>Linux filesystem</code>）</p>
<p>最后选择 <code>Write</code>，输入 <code>yes</code>，再选择 <code>Quit</code>，退出分区工具。</p>
<p>再次 <code>fdisk -l</code> 查看新的分区表，记录新创建的分区标识。</p>
<p>此处以 8G的 <code>/dev/sdb2</code> 和 52G的 <code>/dev/sdb4</code> 为例。</p>
<p>也可以使用下面命令将新分区格式化。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb4</span><br><span class="line">mkswap /dev/sdb2</span><br></pre></td></tr></table></figure>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux filesystem</span></span><br><span class="line">mount /dev/sdb4 /mnt</span><br><span class="line"><span class="comment"># EFI system</span></span><br><span class="line">mkdir -p /mnt/boot/efi</span><br><span class="line">mount /dev/sda1 /mnt/boot/efi</span><br><span class="line"><span class="comment"># Linux swap</span></span><br><span class="line">swapon /dev/sdb2</span><br></pre></td></tr></table></figure>
<h3 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pacman.d</span><br><span class="line">mv ./mirrorlist ./mirrorlist.bak</span><br><span class="line">touch mirrorlist</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Server = http://mirrors.163.com/archlinux/$repo/os/$arch'</span> &gt; ./mirrorlist</span><br></pre></td></tr></table></figure>
<h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><p>有线连接可跳过这步，无线连接使用以下命令找到Ｗi-Fi，找到并输入密码即可。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wifi-menu</span><br></pre></td></tr></table></figure>
<h3 id="开始安装配置"><a href="#开始安装配置" class="headerlink" title="开始安装配置"></a>开始安装配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置系统时间</span></span><br><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span></span><br><span class="line"><span class="comment"># 刷新本地数据库</span></span><br><span class="line">pacman -Syy</span><br><span class="line"><span class="comment"># 安装基础系统</span></span><br><span class="line">pacstrap -i /mnt base base-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回车两次然后输入y之后等一会……</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 fstab 文件</span></span><br><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"><span class="comment"># 切换到已安装的ArchLinux</span></span><br><span class="line">arch-chroot /mnt</span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment"># 时钟设置 使用UTC会导致双系统时间不同 此处用可以用localtime</span></span><br><span class="line">hwclock --systohc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络</span></span><br><span class="line">pacman -S iw wpa_supplicant dialog</span><br><span class="line"><span class="comment"># 字体</span></span><br><span class="line">pacman -S ttf-dejavu wqy-microhei wqy-zenhei</span><br><span class="line"><span class="comment"># 音频</span></span><br><span class="line">pacman -S alsa-utils</span><br><span class="line"><span class="comment"># vim &amp; ssh</span></span><br><span class="line">pacman -S vim openssh</span><br><span class="line"><span class="comment"># 引导工具</span></span><br><span class="line">pacman -S dosfstools grub efibootmgr os-prober</span><br><span class="line">grub-install --efi-directory=/boot/efi --bootloader-id=ArchLinux --recheck</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"><span class="comment"># P.S忽略执行 grub-mkconfig 下方的错误，前几行包含 Found XXX.img 就行</span></span><br></pre></td></tr></table></figure>
<h3 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>删除下面四句前面的<code>#</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#en_US.UTF-8 UTF-8</span></span><br><span class="line"><span class="comment">#zh_CN.GBK GBK</span></span><br><span class="line"><span class="comment">#zh_CN.UTF-8 UTF-8</span></span><br><span class="line"><span class="comment">#zh_CN.GB2312</span></span><br></pre></td></tr></table></figure>
<p>然后生成更新</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'LANG=en_US.UTF-8'</span> &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>
<h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><blockquote>
<p>自行替换下面的 <code>HOSTNAME</code></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> HOSTNAME &gt; /etc/hostname</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'127.0.0.1   localhost.localdomain   localhost'</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'::1         localhost.localdomain   localhost'</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'127.0.1.1   HOSTNAME.localdomain    HOSTNAME'</span>  &gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure>
<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount -R /mnt</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h3 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h3><p>重启进入ArchLinux，输入<code>root</code>，回车即可登录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为root设置密码</span></span><br><span class="line">passwd root</span><br><span class="line"><span class="comment"># 添加普通用户,以shank为例。</span></span><br><span class="line">useradd -m -g users -s /bin/bash shank</span><br><span class="line"><span class="comment"># 设置新用户密码</span></span><br><span class="line">passwd shank</span><br><span class="line"><span class="comment"># 设置sudo权限</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 在root ALL=(ALL) ALL 下一行添加 shank ALL=(ALL) ALL</span></span><br><span class="line"><span class="comment"># 去掉 #%wheel ALL=(ALL) ALL 前面的‘#’号</span></span><br></pre></td></tr></table></figure>
<h2 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h2><h3 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h3><p>运行下面的命令，先确定显卡型号，记下 <code>BusID</code>，类似 <code>00:02.0 VGA ...</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure>
<p>双显卡会有些麻烦，参考官方文档<a href="https://wiki.archlinux.org/index.php/NVIDIA_Optimus" target="_blank" rel="noopener">NVIDIA_Optimus</a></p>
<p>依次运行以下命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果没有联网，你需要先联网</span></span><br><span class="line">wifi-menu</span><br><span class="line"><span class="comment"># intel显卡</span></span><br><span class="line">pacman -S xf86-video-intel</span><br><span class="line"><span class="comment"># nvidia显卡</span></span><br><span class="line">pacman -S nvidia nvidia-libgl</span><br><span class="line"><span class="comment"># 显示输出</span></span><br><span class="line">pacman -S xorg-xrandr</span><br><span class="line"><span class="comment"># 生成配置，将位于 /etc/X11/xorg.conf</span></span><br><span class="line">nvidia-xconfig</span><br></pre></td></tr></table></figure>
<h3 id="双显卡的配置"><a href="#双显卡的配置" class="headerlink" title="双显卡的配置"></a>双显卡的配置</h3><p>先配置xorg.conf</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/X11/xorg.conf</span><br></pre></td></tr></table></figure>
<p>参照下面内容配置N卡，<code>BusID</code>那里N卡一般是<code>PCI:1:0:0</code>,之前查到的BusID为<code>00:02.0</code>则这里填<code>PCI:0:2:0</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Section &quot;Module&quot;</span><br><span class="line">    Load &quot;modesetting&quot;</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section &quot;Device&quot;</span><br><span class="line">    Identifier &quot;nvidia&quot;</span><br><span class="line">    Driver &quot;nvidia&quot;</span><br><span class="line">    BusID &quot;PCI:1:0:0&quot;</span><br><span class="line">    Option &quot;AllowEmptyInitialConfiguration&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<p>保存后，在编辑Intel.conf</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/X11/xorg.conf.d/20-intel.conf</span><br></pre></td></tr></table></figure>
<p>找下面内容修改，注意BusID按实际填写。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">    Identifier <span class="string">"intel"</span></span><br><span class="line">    Driver <span class="string">"modesetting"</span></span><br><span class="line">    BusID <span class="string">"PCI:0:2:0"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<h3 id="安装KDE桌面环境"><a href="#安装KDE桌面环境" class="headerlink" title="安装KDE桌面环境"></a>安装KDE桌面环境</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pacman -S plasma kdebase kde-l10n-zh_cn</span><br><span class="line">pacman -S xf86-input-synaptics</span><br></pre></td></tr></table></figure>
<p>修改 <a href="https://wiki.archlinux.org/index.php/NVIDIA_Optimus#Display_Managers" target="_blank" rel="noopener">Display Manager</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'xrandr --setprovideroutputsource modesetting NVIDIA-0'</span> &gt;&gt; /usr/share/sddm/scripts/Xsetup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'xrandr --auto'</span> &gt;&gt; /usr/share/sddm/scripts/Xsetup</span><br></pre></td></tr></table></figure>
<p>测试是否可以进入桌面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start sddm</span><br></pre></td></tr></table></figure>
<h3 id="桌面正常启动后"><a href="#桌面正常启动后" class="headerlink" title="桌面正常启动后"></a>桌面正常启动后</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置桌面自启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sddm</span><br><span class="line"><span class="comment"># 开启桌面ＷiFi配置</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line"><span class="comment"># 启动菜单添加缺失的windows启动项（可选）</span></span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<h2 id="配置梯子"><a href="#配置梯子" class="headerlink" title="配置梯子"></a>配置梯子</h2><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S shadowsocks privoxy</span><br></pre></td></tr></table></figure>
<h3 id="ss配置文件"><a href="#ss配置文件" class="headerlink" title="ss配置文件"></a>ss配置文件</h3><p>编辑配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim ~/ss-local.json</span><br></pre></td></tr></table></figure>
<p>格式如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">0000</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"0000"</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移动到 <code>/etc</code>。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mv ~/ss-local.json /etc/ss-local.json</span><br></pre></td></tr></table></figure>
<h3 id="测试ss连接"><a href="#测试ss连接" class="headerlink" title="测试ss连接"></a>测试ss连接</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动sslocal</span></span><br><span class="line">sudo su</span><br><span class="line">nohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/<span class="built_in">log</span>/ss-local.log &amp;</span><br><span class="line"><span class="comment"># 设置临时全局代理</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"socks5://127.0.0.1:1080"</span>;<span class="built_in">export</span> https_proxy=<span class="variable">$http_proxy</span></span><br><span class="line"><span class="comment"># 然后访问下Google，有返回html就成了。</span></span><br><span class="line">curl -skL www.google.com</span><br></pre></td></tr></table></figure>
<h3 id="使用gfwlist选择代理"><a href="#使用gfwlist选择代理" class="headerlink" title="使用gfwlist选择代理"></a>使用gfwlist选择代理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 gfwlist2privoxy 脚本</span></span><br><span class="line">curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy</span><br><span class="line"><span class="comment"># 生成 gfwlist.action 文件</span></span><br><span class="line">bash gfwlist2privoxy <span class="string">'127.0.0.1:1080'</span></span><br><span class="line"><span class="comment"># 拷贝至 privoxy 配置目录</span></span><br><span class="line">cp -af gfwlist.action /etc/privoxy/</span><br><span class="line"><span class="comment"># 加载 gfwlist.action 文件</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'actionsfile gfwlist.action'</span> &gt;&gt; /etc/privoxy/config</span><br><span class="line"><span class="comment"># 启动 privoxy.service 服务</span></span><br><span class="line">systemctl start privoxy.service</span><br></pre></td></tr></table></figure>
<h3 id="验证代理切换"><a href="#验证代理切换" class="headerlink" title="验证代理切换"></a>验证代理切换</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy https_proxy no_proxy</span><br><span class="line"><span class="comment"># 设置临时变量，privoxy 默认监听端口为 8118</span></span><br><span class="line"><span class="built_in">export</span> proxy=http://127.0.0.1:8118; <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span> https_proxy=<span class="variable">$proxy</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br><span class="line"><span class="comment"># 可以看到返回值，说明代理成功</span></span><br><span class="line">curl -skL www.google.com</span><br><span class="line"><span class="comment"># 查看当前IP，若是墙内IP说明gfwlist配置成功</span></span><br><span class="line">curl -4skL http://ip.chinaz.com/getip.aspx</span><br></pre></td></tr></table></figure>
<h3 id="shell脚本的方式"><a href="#shell脚本的方式" class="headerlink" title="shell脚本的方式"></a>shell脚本的方式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line">touch ss-privoxy</span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">sudo chmod +x ss-privoxy</span><br><span class="line"><span class="comment"># 移到PATH路径</span></span><br><span class="line">mv -af ss-privoxy /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/bin/ss-privoxy</span><br></pre></td></tr></table></figure>
<p>脚本内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    nohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/<span class="built_in">log</span>/ss-local.log &amp;</span><br><span class="line">    systemctl start privoxy</span><br><span class="line">    proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br><span class="line">    ;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="built_in">unset</span> http_proxy https_proxy no_proxy</span><br><span class="line">    systemctl stop privoxy</span><br><span class="line">    pkill sslocal</span><br><span class="line">    ;;</span><br><span class="line">reload)</span><br><span class="line">    pkill sslocal</span><br><span class="line">    nohup sslocal -c /etc/ss-local.json &lt; /dev/null &amp;&gt;&gt; /var/<span class="built_in">log</span>/ss-local.log &amp;</span><br><span class="line">    ;;</span><br><span class="line"><span class="built_in">set</span>)</span><br><span class="line">    proxy=<span class="string">"http://127.0.0.1:8118"</span></span><br><span class="line">    <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">export</span> https_proxy=<span class="variable">$proxy</span></span><br><span class="line">    <span class="built_in">export</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="built_in">unset</span>)</span><br><span class="line">    <span class="built_in">unset</span> http_proxy https_proxy no_proxy</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"usage: source <span class="variable">$0</span> start|stop|reload|set|unset"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>配置命令别名： <code>sudo vim /etc/profile.d/ss-privoxy.sh</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ss.start=<span class="string">'. ss-privoxy start'</span></span><br><span class="line"><span class="built_in">alias</span> ss.stop=<span class="string">'. ss-privoxy stop'</span></span><br><span class="line"><span class="built_in">alias</span> ss.reload=<span class="string">'. ss-privoxy reload'</span></span><br><span class="line"><span class="built_in">alias</span> ss.set=<span class="string">'. ss-privoxy set'</span></span><br><span class="line"><span class="built_in">alias</span> ss.unset=<span class="string">'. ss-privoxy unset'</span></span><br></pre></td></tr></table></figure>
<p>使用说明：</p>
<ul>
<li>ss.start：启动 ss-local+privoxy 代理</li>
<li>ss.stop：停用 ss-local+privoxy 代理</li>
<li>ss.reload：重载 ss-local.json 配置文件</li>
<li>ss.set：设置 shell_proxy 环境变量</li>
<li>ss.unset：删除 shell_proxy 环境变量</li>
</ul>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="分发仓库里可以找到的"><a href="#分发仓库里可以找到的" class="headerlink" title="分发仓库里可以找到的"></a>分发仓库里可以找到的</h3><p>安装前先查找软件包是否存在，以<code>ibus</code>为例：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找与ibus相关的包</span></span><br><span class="line">pacman -Ss ibus</span><br><span class="line"><span class="comment"># 这里支持正则匹配的，还可以这么写，更多查看 man pacman</span></span><br><span class="line">pacman -Ss <span class="string">'^ibus-*'</span></span><br></pre></td></tr></table></figure>
<p>这里我选择安装ibus-rime输入法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pacman -S ibus-rime</span><br></pre></td></tr></table></figure>
<h3 id="AUR中可以找到的"><a href="#AUR中可以找到的" class="headerlink" title="AUR中可以找到的"></a><a href="https://aur.archlinux.org/" target="_blank" rel="noopener">AUR</a>中可以找到的</h3><p>以安装VScode为例，该package描述页在<a href="https://aur.archlinux.org/packages/visual-studio-code-bin/" target="_blank" rel="noopener">这里</a></p>
<p>你可以复制<code>Git Clone URL</code>，然后按下面步骤安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装Git</span></span><br><span class="line">sudo pacman -S git</span><br><span class="line"><span class="comment"># 将仓库clone下来</span></span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/visual-studio-code-bin.git</span><br><span class="line"><span class="comment"># 进入git目录</span></span><br><span class="line"><span class="built_in">cd</span> visual-studio-code-bin</span><br><span class="line"><span class="comment"># 编译压缩成安装包</span></span><br><span class="line">makepkg -si</span><br><span class="line"><span class="comment"># pacman安装 (P.S XXXXXX 为版本号)</span></span><br><span class="line">sudo pacman -U visual-studio-code-bin-XXXXXX.pkg.tar.xz</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">Installation guide</a></li>
<li><a href="https://blog.csdn.net/maxsky/article/details/56839855" target="_blank" rel="noopener">笔记本双显卡 EFI 启动安装 ArchLinux</a></li>
<li><a href="https://www.zfl9.com/ss-local.html" target="_blank" rel="noopener">ss-local + privoxy 代理</a></li>
<li><a href="https://wiki.archlinux.org/index.php/IBus" target="_blank" rel="noopener">IBus</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>DST Server on Ubuntu16.04 (饥荒服务搭建指南)</title>
    <url>/2018/05/29/DST-Server-on-Ubuntu16-04/</url>
    <content><![CDATA[<p>与朋友玩DST(饥荒)，开个5人局，卡到没法玩，所以想办法搭私服。</p>
<p>首先感谢<a href="https://www.bilibili.com/video/av12666273/" target="_blank" rel="noopener">路叔的视频</a>以及<a href="https://tieba.baidu.com/p/4159392559" target="_blank" rel="noopener">这个帖子</a></p>
<ul>
<li>复制粘贴以下脚本保存为 <code>install.sh</code></li>
</ul>
<blockquote>
<p>update <code>install.sh</code> at 2018-12-15</p>
</blockquote>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">dividing=<span class="string">"================================================================================"</span></span><br><span class="line">commandPath=<span class="string">"steamcmd"</span></span><br><span class="line">commandFile=<span class="string">"./steamcmd.sh"</span></span><br><span class="line"></span><br><span class="line">gamesPath=<span class="string">"Steam/steamapps/common/Don't Starve Together Dedicated Server/bin"</span></span><br><span class="line">gamesFile=<span class="string">"./dontstarve_dedicated_server_nullrenderer"</span></span><br><span class="line"></span><br><span class="line">dataPath=$(<span class="built_in">pwd</span>)/.klei</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FilesDelete()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose File To Delete [1-5]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_filedelete</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$dataPath</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$dataPath</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveServer_<span class="variable">$input_filedelete</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            rm -r DoNotStarveServer_<span class="variable">$input_filedelete</span>/save</span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveServer_<span class="variable">$input_filedelete</span> Is Deleted\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveCaves_<span class="variable">$input_filedelete</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            rm -r DoNotStarveCaves_<span class="variable">$input_filedelete</span>/save</span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveCaves_<span class="variable">$input_filedelete</span> Is Deleted\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">"../"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FilesBackup()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose File To Backup [1-5]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_filebackup</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$dataPath</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$dataPath</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveServer_<span class="variable">$input_filebackup</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            tar -zcf DoNotStarveServer_<span class="variable">$input_filebackup</span>.tar.gz DoNotStarveServer_<span class="variable">$input_filebackup</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveServer_<span class="variable">$input_filebackup</span> Is Backuped\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveCaves_<span class="variable">$input_filebackup</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            tar -zcf DoNotStarveCaves_<span class="variable">$input_filebackup</span>.tar.gz DoNotStarveCaves_<span class="variable">$input_filebackup</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveCaves_<span class="variable">$input_filebackup</span> Is Backuped\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">"../"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> FilesRecovery()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose File To Recovery [1-5]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_filerecovery</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$dataPath</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$dataPath</span></span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="string">"DoNotStarveServer_<span class="variable">$input_filerecovery</span>.tar.gz"</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveServer_<span class="variable">$input_filerecovery</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                rm -r DoNotStarveServer_<span class="variable">$input_filerecovery</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            tar -zxf DoNotStarveServer_<span class="variable">$input_filerecovery</span>.tar.gz DoNotStarveServer_<span class="variable">$input_filerecovery</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveServer_<span class="variable">$input_filerecovery</span> Is Recovered\033[0m"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Backup File For DoNotStarveServer_<span class="variable">$input_filerecovery</span> Not Found\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="string">"DoNotStarveCaves_<span class="variable">$input_filerecovery</span>.tar.gz"</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ -d <span class="string">"DoNotStarveCaves_<span class="variable">$input_filerecovery</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">                rm -r DoNotStarveCaves_<span class="variable">$input_filerecovery</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            tar -zxf DoNotStarveCaves_<span class="variable">$input_filerecovery</span>.tar.gz DoNotStarveCaves_<span class="variable">$input_filerecovery</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] File DoNotStarveCaves_<span class="variable">$input_filerecovery</span> Is Recovered\033[0m"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Backup File For DoNotStarveCaves_<span class="variable">$input_filerecovery</span> Not Found\033[0m"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">"../"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Main Archive Folder Not Found\033[0m"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SystemPrepsDetail()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] System Library Install\033[0m"</span></span><br><span class="line">    sudo apt-get update</span><br><span class="line">    sudo apt-get install screen</span><br><span class="line">    sudo apt-get install lib32gcc1</span><br><span class="line">    sudo apt-get install lib32stdc++6</span><br><span class="line">    sudo apt-get install libcurl4-gnutls-dev:i386</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] System Library Install Finished\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SystemPreps()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] System Library Preparing\033[0m"</span></span><br><span class="line">    sudo apt-get update                                                         1&gt;/dev/null</span><br><span class="line">    sudo apt-get install screen                                                 1&gt;/dev/null</span><br><span class="line">    sudo apt-get install lib32gcc1                                              1&gt;/dev/null</span><br><span class="line">    sudo apt-get install lib32stdc++6                                           1&gt;/dev/null</span><br><span class="line">    sudo apt-get install libcurl4-gnutls-dev:i386                               1&gt;/dev/null</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] System Library Prepare Finished\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> CommandPreps()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] Steam Command Line Files Preparing\033[0m"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$commandPath</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        mkdir <span class="string">"<span class="variable">$commandPath</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$commandPath</span>"</span></span><br><span class="line"></span><br><span class="line">    wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz 1&gt;/dev/null</span><br><span class="line">    tar -xvzf steamcmd_linux.tar.gz                                             1&gt;/dev/null</span><br><span class="line">    rm -f steamcmd_linux.tar.gz                                                 1&gt;/dev/null</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] Steam Command Line Files Prepare Finished\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ServerStart()</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose Game Mode [1.noraml] [2.caves]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_mode</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose Save File [1-5]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_save</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$gamesPath</span>"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$input_mode</span> <span class="keyword">in</span></span><br><span class="line">        1)</span><br><span class="line">            screen -dm -S <span class="string">"DST Server"</span> <span class="string">"<span class="variable">$gamesFile</span>"</span> -conf_dir DoNotStarveServer_<span class="string">"<span class="variable">$input_save</span>"</span>;;</span><br><span class="line">        2)</span><br><span class="line">            screen -dm -S <span class="string">"DST Server"</span> <span class="string">"<span class="variable">$gamesFile</span>"</span> -conf_dir DoNotStarveCaves_<span class="string">"<span class="variable">$input_save</span>"</span>;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Illegal Command,Please Check\033[0m"</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">    screen -r <span class="string">"DST Server"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> ServerPreps()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] Preparing Server Files\033[0m"</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$commandPath</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Steam Command Line Not Found\033[0m"</span></span><br><span class="line">        CommandPreps</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] Steam Command Line Found\033[0m"</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">"<span class="variable">$commandPath</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Choose Game Update Mode [1.noraml] [2.caves]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_game</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$input_game</span> <span class="keyword">in</span></span><br><span class="line">        1)</span><br><span class="line">            <span class="string">"<span class="variable">$commandFile</span>"</span> +login anonymous +app_update 343050 validate +quit;;</span><br><span class="line">        2)</span><br><span class="line">            <span class="string">"<span class="variable">$commandFile</span>"</span> +login anonymous +app_update 343050 -beta cavesbeta validate +quit;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Illegal Command,Please Check\033[0m"</span> ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"../"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">    ServerStart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$gamesPath</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m[warn] Server Files Not Found\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">    SystemPrepsDetail</span><br><span class="line">    ServerPreps</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Server Files Found\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dividing</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[33m[info] Choose An Action To Perform\033[0m"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] System Library Files [0.Prepare]\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Game Server [1.start]  [2.update]  [3.process kill]\033[0m"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[32m[info] Save Files  [7.backup] [8.recovery][9.delete]\033[0m"</span></span><br><span class="line">    <span class="built_in">read</span> input_update</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$input_update</span> <span class="keyword">in</span></span><br><span class="line">        0)</span><br><span class="line">            SystemPreps</span><br><span class="line">            ;;</span><br><span class="line">        1)</span><br><span class="line">            ServerStart</span><br><span class="line">            ;;</span><br><span class="line">        2)</span><br><span class="line">            ServerPreps</span><br><span class="line">            ;;</span><br><span class="line">        3)</span><br><span class="line">            screen -X -S <span class="string">"DST Server"</span> quit</span><br><span class="line">            ;;</span><br><span class="line">        7)</span><br><span class="line">            FilesBackup</span><br><span class="line">            ;;</span><br><span class="line">        8)</span><br><span class="line">            FilesRecovery</span><br><span class="line">            ;;</span><br><span class="line">        9)</span><br><span class="line">            FilesDelete</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加运行权限</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chmod u+x install.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>运行脚本</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh install.sh</span><br><span class="line"><span class="comment"># 按下面的输入数字选择：</span></span><br><span class="line"><span class="comment"># Game Mode: 1</span></span><br><span class="line"><span class="comment"># Save File: 1</span></span><br><span class="line"><span class="comment"># Ctrl+c 中断进程</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获得 <code>Token</code></li>
</ul>
<p>如何获得参考<a href="http://blog.ttionya.com/article-1235.html" target="_blank" rel="noopener">这里</a>：</p>
<p>游戏主界面右下角 <code>Account</code> -&gt; <code>Generate Server Token</code> -&gt; 复制粘贴保存到 <code>cluster_token.txt</code>。</p>
<ul>
<li>本地打开DST，创建一个在线世界，Mod 什么都设置好，点击开始进游戏，然后关闭保存游戏。</li>
</ul>
<p>找到存档 Linux存档位置：<code>~/.klei/DoNotStarveTogether</code> Windows存档位置：<code>%HOMEPATH%\Klei\DoNotStarveTogether\</code>。</p>
<p>将对应的 <code>Cluster_X</code> 目录覆盖到云主机的下面目录：<code>~/.klei/DoNotStarveserver_1/</code>。</p>
<blockquote>
<p>这里我的存档为 <code>Cluster_1</code>。</p>
</blockquote>
<p><del>将上一步获得的 <code>cluster_token.txt</code> 放到 <code>Cluster_X</code> 目录下</del> 存档目录下已存在该文件可以不用替换。</p>
<ul>
<li>记录Mod编号</li>
</ul>
<p>打开存档目录下的 <code>Master/modoverrides.lua</code> 文件，记录所有的 <code>workshop-XXXXXXXXX</code> 中的数字编号。</p>
<p>打开 <code>~/Steam/steamapps/common/Don&#39;t Starve Together Dedicated Server/mods/dedocated_server_mods_setup.lua</code> 将Mod按 <code>ServerModSetup(&quot;XXXXXXXXX&quot;)</code> 的格式一行一行写进去并保存。</p>
<ul>
<li>再次运行 <code>install.sh</code>，选择 <code>1.start</code>。</li>
</ul>
<p>几分钟后即可在 DST 的 online 列表中搜到你的服务器。</p>
<blockquote>
<p>我上面写的教程没开 Cave，你可以通过看视频把 Cave 服务打开，过程类似。</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>DST</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04上Docker免sudo使用的解决方式</title>
    <url>/2018/04/15/Ubuntu16-04%E4%B8%8ADocker%E5%85%8Dsudo%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Ubuntu16.04上安装Docker-ce后，发现<code>docker run</code>不需要在<code>sudo</code>下运行，这就导致了一个问题VScode和PyCharm都连不上Docker，都是因为去访问权限的问题，因为不建议用root权限，所以就要找解决办法。</p>
<a id="more"></a>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol>
<li><p>修改服务文件</p>
<p> 修改 <code>/lib/systemd/system/docker.service</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<p> 找到这一行<code>ExecStart=/usr/bin/dockerd fd://</code>，替换为</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 大概是开启了docker的tcp访问和unix访问</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
<p> 接着修改 <code>/etc/init.d/docker</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/init.d/docker</span><br></pre></td></tr></table></figure>
<p> 找到这一行 <code>DOCKER_OPTS=</code>，做类似的修改</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">"-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加用户到docker组</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后重启你的系统</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://forums.docker.com/t/cannot-connect-to-the-docker-daemon-is-the-docker-daemon-running-on-this-host/8925/15" target="_blank" rel="noopener">cannot-connect-to-the-docker-daemon-is-the-docker-daemon-running-on-this-host</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下使用SS本地代理</title>
    <url>/2018/04/15/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8SS%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>凡是要Coding，免不了上Google，不得不说SS的Windows版体验更好。</p>
<p>Linux版我总是挂全局代理，国外IP不能看B站正版番就很难受。</p>
<p>因为懒一直没折腾，这次为了更好的体验，我决定花点时间。</p>
<a id="more"></a>
<h1 id="安装-ss-客户端"><a href="#安装-ss-客户端" class="headerlink" title="安装 ss 客户端"></a>安装 ss 客户端</h1><p>本来 python 版的 shadowsocks 带有 sslocal 可以做本地代理的，但是我用图形界面，觉得 qt 版体验要好些。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ArchLinux</span></span><br><span class="line">sudo pacman -S shadowsocks-qt5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure>
<p>安装完成后，打开配置好你的 ss 服务，本地地址：<code>127.0.0.1</code>，端口：<code>1080</code>，本地服务器类型：<code>HTTP(S)</code>。</p>
<h2 id="验证本地代理"><a href="#验证本地代理" class="headerlink" title="验证本地代理"></a>验证本地代理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置临时全局代理</span></span><br><span class="line"><span class="built_in">export</span> proxy=http://127.0.0.1:1080; <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span> https_proxy=<span class="variable">$proxy</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br><span class="line"><span class="comment"># 然后访问下Google，有返回html就成了。</span></span><br><span class="line">curl -skL www.google.com</span><br></pre></td></tr></table></figure>
<h1 id="安装-privoxy"><a href="#安装-privoxy" class="headerlink" title="安装 privoxy"></a>安装 privoxy</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ArchLinux</span></span><br><span class="line">sudo pacman -S privoxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo apt install privoxy</span><br></pre></td></tr></table></figure>
<h2 id="配置-gfwlist"><a href="#配置-gfwlist" class="headerlink" title="配置 gfwlist"></a>配置 gfwlist</h2><p>全局代理体验不佳，这里要利用 gfwlist ，配置 privoxy</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先获取一段格式转换脚本</span></span><br><span class="line">curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy</span><br><span class="line"><span class="comment"># 生成 gfwlist.action 文件</span></span><br><span class="line">bash gfwlist2privoxy <span class="string">'127.0.0.1:1080'</span></span><br><span class="line"><span class="comment"># 拷贝至 privoxy 配置目录</span></span><br><span class="line">sudo cp -af gfwlist.action /etc/privoxy/</span><br><span class="line"><span class="comment"># 加载 gfwlist.action 文件</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">'actionsfile gfwlist.action'</span> &gt;&gt; /etc/privoxy/config</span><br><span class="line"><span class="comment"># 启动 privoxy.service 服务</span></span><br><span class="line">sudo systemctl start privoxy.service</span><br></pre></td></tr></table></figure>
<h2 id="验证代理切换"><a href="#验证代理切换" class="headerlink" title="验证代理切换"></a>验证代理切换</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置临时变量，privoxy 默认监听端口为 8118</span></span><br><span class="line"><span class="built_in">export</span> proxy=http://127.0.0.1:8118; <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span> https_proxy=<span class="variable">$proxy</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br><span class="line"><span class="comment"># 可以看到返回值，说明代理成功</span></span><br><span class="line">curl -skL www.google.com</span><br><span class="line"><span class="comment"># 查看当前IP，若是墙内IP说明gfwlist配置成功</span></span><br><span class="line">curl -4skL http://ip.chinaz.com/getip.aspx</span><br></pre></td></tr></table></figure>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>可以将环境变量加入 <code>.profile</code> 或 <code>.bashrc</code> 或其他配置文件中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim ~/.profile 或者 sudo vim /etc/profile</span></span><br><span class="line"><span class="comment"># 设置临时变量，privoxy 默认监听端口为 8118</span></span><br><span class="line">proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="variable">$proxy</span></span><br><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">"localhost, 127.0.0.1, ::1"</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zfl9.com/ss-local.html" target="_blank" rel="noopener">ss-local + privoxy 代理</a><br><a href="https://www.privoxy.org/user-manual/actions-file.html" target="_blank" rel="noopener">Proivoxy用户手册</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shadowsocks</tag>
        <tag>Privoxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04安装Node.js&amp;npm</title>
    <url>/2018/04/15/Ubuntu16-04%E5%AE%89%E8%A3%85Node-js-npm/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>Ubuntu16.04 官方仓库提供的Node.js版本是4.x，不推荐使用apt安装。</p>
<p>我们需要从<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">官网</a>获得更新的版本。</p>
<a id="more"></a>
<p>这里直接wget获得</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v8.1.1/node-v8.1.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>找到下载的压缩文件，解压系统应用目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo tar -C /usr/<span class="built_in">local</span> --strip-components 1 -xzf node-v8.1.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>查看是否安装到了正确的目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ls -l /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ls -l /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://stackoverflow.com/questions/33033538/installing-a-tar-gz-on-linux?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">Installing a tar.gz on linux</a></p>
<p><a href="http://www.findshank.com/2017/08/06/%E4%B8%80%E4%BA%9B%E8%8A%82%E7%BA%A6%E7%94%9F%E5%91%BD%E7%9A%84%E6%93%8D%E4%BD%9C/#more">我的另一篇文章，有关npm加速</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下zip安装MySQL总结</title>
    <url>/2018/04/01/Windows%E4%B8%8Bzip%E5%AE%89%E8%A3%85MySQL%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>安装MySQL不想用官方安装工具，因为它会添加开机计划任务，自动启动不说还会时不时更新，就很烦。我希望随用随启动，所以要选择zip安装，这样方便可控。<br>由于记性不好，每次这么装都要查资料，看到网上各种拙劣的教程就很无语，所以决定抽空自己总结下。</p>
<a id="more"></a>
<h1 id="下载-amp-解压"><a href="#下载-amp-解压" class="headerlink" title="下载&amp;解压"></a>下载&amp;解压</h1><ul>
<li><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">官网</a>下载zip安装包，我选择的是MySQL Community Server。<blockquote>
<p>zip安装包在<code>Other Downloads</code>中，我下载的是mysql-5.7.18-win32.zip</p>
</blockquote>
</li>
<li>解压到任意目录<blockquote>
<p>以下以解压到<code>D:\mysql-5.7.18-win32</code>为例。</p>
</blockquote>
</li>
</ul>
<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><ul>
<li>添加系统变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名： MYSQL_HOME</span><br><span class="line">变量值： D:\mysql-5.7.18-win32</span><br></pre></td></tr></table></figure>
<ul>
<li>Path中添加 <code>%MYSQL_HOME%\bin</code></li>
</ul>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>MySQL目录下添加<code>my.ini</code>文件，内容如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 默认编码</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 默认编码</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">18</span>-win32</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">18</span>-win32\data</span><br><span class="line"><span class="comment"># 默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=InnoDB</span><br></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>若MySQL目录下有data目录，先清空该目录。</li>
<li>管理员模式启动cmd，切换到MySQL目录下的bin目录中。</li>
<li><p>运行初始化命令</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>
<p> 稍等一会，没有输出就成功了。</p>
<blockquote>
<p>若遇到缺少MSVCP120.dll的问题，前往<a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784" target="_blank" rel="noopener">这里</a>下载安装VC++支持</p>
</blockquote>
</li>
<li><p>运行安装命令</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure>
<p> 输出<code>service successfully installed</code>表明安装成功。</p>
</li>
<li><p>开启服务</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录MySQL</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首次登录没有密码，直接按回车</p>
</blockquote>
</li>
<li><p>更改root密码</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR <span class="string">'root'</span>@<span class="string">'localhost'</span> = PASSWORD(<span class="string">'newpass'</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>newpass</code>为新的密码</p>
</blockquote>
</li>
</ol>
<h1 id="验证编码"><a href="#验证编码" class="headerlink" title="验证编码"></a>验证编码</h1><p>root登录MySQL，然后输入以下查询语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure>
<p>你会的到以下结果：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">+<span class="comment">--------------------------+-------------------------------------------+</span></span><br><span class="line">| Variable_name            | Value                                     |</span><br><span class="line">+<span class="comment">--------------------------+-------------------------------------------+</span></span><br><span class="line">| character_set_client     | utf8                                      |</span><br><span class="line">| character_set_connection | utf8                                      |</span><br><span class="line">| character_set_database   | utf8                                      |</span><br><span class="line">| character_set_filesystem | binary                                    |</span><br><span class="line">| character_set_results    | utf8                                      |</span><br><span class="line">| character_set_server     | utf8                                      |</span><br><span class="line">| character_set_system     | utf8                                      |</span><br><span class="line">| character_sets_dir       | D:\mysql-5.7.18-win32\share\charsets\     |</span><br><span class="line">+<span class="comment">--------------------------+-------------------------------------------+</span></span><br></pre></td></tr></table></figure>
<p>至此，安装完成。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止MySQL服务</span></span><br><span class="line">net stop mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除MySQL服务</span></span><br><span class="line">sc delete mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除安装</span></span><br><span class="line">mysqld remove</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Windows上使用GLUT</title>
    <url>/2018/03/09/%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8GLUT/</url>
    <content><![CDATA[<p>最近在看计算机图形学<br>书里的代码要用到OpenGL，然而在Windows上少了GLUT，需要自己手动配置。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>Microsoft Visual Studio 2017 Community （勾选安装<code>使用C++的桌面开发</code>那项，确保安装MSVC）</li>
<li><a href="https://www.opengl.org/resources/libraries/glut/glut37.zip" target="_blank" rel="noopener">GLUT for Windows</a></li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>打开 glut37.zip。</li>
<li><code>glut.dll</code>,<code>glut32.dll</code> 解压到 Windows目录。<blockquote>
<p>我放到了<code>C:\Windows</code>目录下，当然你也可以把它们分别放到<code>C:\Windows\SysWOW64</code>和<code>C:\Windows\System32</code>下。</p>
</blockquote>
</li>
<li>找到MSVC的目录。<blockquote>
<p>例如 <code>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.??.??????</code>。 (根据版本文件夹的名称的<code>?</code>会有不同)</p>
</blockquote>
</li>
<li>在<code>include</code>目录下新建<code>GL</code>文件夹，将<code>glut.h</code>复制进去。<blockquote>
<p>例如 <code>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\include\GL</code>。</p>
</blockquote>
</li>
<li>在<code>lib</code>目录下，将<code>glut.lib</code>,<code>glut32.lib</code>复制进去。</li>
</ol>
<h2 id="编写一个简单的opengl程序"><a href="#编写一个简单的opengl程序" class="headerlink" title="编写一个简单的opengl程序"></a>编写一个简单的opengl程序</h2><ol>
<li><p>打开VS2017，依次点击 <code>新建</code> - <code>项目</code> - <code>Visual C++</code> - <code>Windows 控制台应用程序</code> - <code>确定</code>。</p>
</li>
<li><p>右键点击解决方案管理器中的项目名称(ConsoleApplication?) - 属性 - 链接器</p>
<blockquote>
<p>注意：配置平台是Win32。</p>
<ul>
<li>常规 - 附加库目录 - &lt;编辑…&gt; - 粘贴你lib的路径<br>例如 <code>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\lib</code>。</li>
<li>输入 - 附加依赖项 - &lt;编辑…&gt; - 粘贴glut的lib<br>例如 <code>glut32.lib</code>。</li>
</ul>
</blockquote>
</li>
<li><p><code>ConsoleApplication1?.cpp</code>中写入以下代码：</p>
 <figure class="highlight cxx"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gl/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    gluOrtho2D(<span class="number">0.0</span>, <span class="number">200.0</span>, <span class="number">0.0</span>, <span class="number">250.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lineSegment</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    glColor3f(<span class="number">0.0</span>, <span class="number">0.4</span>, <span class="number">0.2</span>);</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glVertex2i(<span class="number">180</span>, <span class="number">15</span>);</span><br><span class="line">    glVertex2i(<span class="number">10</span>, <span class="number">145</span>);</span><br><span class="line">    glEnd();</span><br><span class="line">    glFlush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);</span><br><span class="line">    glutInitWindowPosition(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">    glutInitWindowSize(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    glutCreateWindow(<span class="string">"An Example OpenGL Program"</span>);</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    glutDisplayFunc(lineSegment);</span><br><span class="line">    glutMainLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>F5调试，你可以看到图像是一条斜线。</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://www.cs.csustan.edu/~rsc/SDSU/GLUTinstall.html" target="_blank" rel="noopener">https://www.cs.csustan.edu/~rsc/SDSU/GLUTinstall.html</a></p>
</li>
<li><p><a href="http://blog.csdn.net/qq_19982213/article/details/69970977" target="_blank" rel="noopener">http://blog.csdn.net/qq_19982213/article/details/69970977</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>GLUT</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocal Buffer 学习 (语言指南)</title>
    <url>/2018/02/23/Protocal%20Buffer%20%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="官方指南"><a href="#官方指南" class="headerlink" title="官方指南"></a>官方指南</h2><p><a href="https://developers.google.com/protocol-buffers/docs/proto3#simple" target="_blank" rel="noopener">Language Guide (proto3)</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该文章为阅读官方指南顺便翻译的。</p>
<a id="more"></a>
<h2 id="定义消息类型"><a href="#定义消息类型" class="headerlink" title="定义消息类型"></a>定义消息类型</h2><p>看一个简单的例子。假如你想定义一个搜索请求信息格式，搜索请求有个询问字符串。你感兴趣的特定页面的结果，以及每个结果页面的条目数。下面是 <code>.proto</code> 文件。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一行指定了你使用 proto3 语法：如果你不这样做，protocal buffer 编译器将默认假设你使用 proto2 。这句必须在文件的第一非空无注释行。</li>
<li><code>SearchRequest</code>信息定义指定了三个字段(名/值 对)，一个用于你希望包含在此类消息中的每条数据。每个字段有一个名称和一个类型。</li>
</ul>
<h3 id="指定字段类型"><a href="#指定字段类型" class="headerlink" title="指定字段类型"></a>指定字段类型</h3><p>在上面的例子中，所有的字段都是 scalar (标量)类型：两个整数(<code>page_number</code>和<code>result_per_page</code>)和一个字符串(<code>query</code>)。当然，你也可以为你的字段指定 composite (复合)类型。</p>
<h3 id="分配标签"><a href="#分配标签" class="headerlink" title="分配标签"></a>分配标签</h3><p>如你所见，信息定义中的每个字段有一个独特的数字标签。这些标签被用来在二进制信息格式中识别你的字段，并且一旦你的信息类型在使用就不该修改这些字段。请注意，值为1到15的变量需要1字节编码，包括标签号和字段类型(你可以在 Protocal Buffer Encoding 中了解更多信息)。标签在16到2047之间需要2字节。所以你应该为频繁出现的消息元素保留标签1至15。请留意为将来可能添加的频繁出现的元素留出一些空间。<br>最小标签号码你可以指定为1，最大的为$2^{29}-1$，或536,870,911。你还不能使用数组19000至19999(<code>FieldDescriptor::kFirstReservedNumber</code>至<code>FieldDescriptor::kLastReservedNumber</code>)。因为它们是为 Protocal Bufffers 接口实现保留的，如果你在<code>.proto</code>文件中使用这些保留数字，protocal buffer 编译器会发出警告。同样的，你不能使用任何以前保留的标签。</p>
<h3 id="指定字段规则"><a href="#指定字段规则" class="headerlink" title="指定字段规则"></a>指定字段规则</h3><p>信息字段可以是下列中一种：</p>
<ul>
<li><code>singular</code> ：一种格式正确的消息可以有0或1个这个字段(但不超过1个)。</li>
<li><code>repeated</code> ：这个字段可以在格式正确的消息中被重复任意次。重复值的顺序会被保留。</li>
</ul>
<p>在 proto3 中， <code>repeated</code> 的 scalar 数字类型默认使用 <code>packed</code> 编码。<br>你可以在 Protocal Buffer Encoding 中了解有关 <code>packed</code> 的信息。</p>
<h3 id="添加更多信息类型"><a href="#添加更多信息类型" class="headerlink" title="添加更多信息类型"></a>添加更多信息类型</h3><p>单个<code>.proto</code>文件中可以定义多种信息类型。这便于你定义多种相关的信息。因此，举个例子，如果你想的定义回复信息格式来相应你的<code>SearchResponse</code>信息类型，你可以添加它到同一<code>.proto</code>文件：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>欲添加注释到你的<code>.proto</code>文件，使用C/C++样式的<code>//</code>和<code>/* ... */</code>语法。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">/* SearchRequest represents a search query, with pagination options to</span><br><span class="line"> * indicate which results to include in the response. */</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;  <span class="comment">// Which page number do we want?</span></span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;  <span class="comment">// Number of results to return per page.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h3><p>如果你通过删除整个字段或者将它注释掉来更新一种消息类型，未来的用户可以在更新类型时重用该标签号码。如果他们稍后加载同样的<code>.proto</code>旧版本，可能会导致严重的问题，包括数据损坏，隐私错误，诸如此类。确保这种情况不会发生的一种方法是指定已删除字段的字段标记(和/或者名称)被保留(这可能会导致JSON序列化问题)。如果将来的任何用户试图使用这些标识符，protocal buffer 编译器将报错。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>;</span><br><span class="line">  reserved <span class="string">"foo"</span>, <span class="string">"bar"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，你不能在同一<code>reserved</code>语句中混合字段名称和标签号码。</p>
<h3 id="你的-proto可以生成什么？"><a href="#你的-proto可以生成什么？" class="headerlink" title="你的.proto可以生成什么？"></a>你的<code>.proto</code>可以生成什么？</h3><p>当你在protocal buffer 编译器中运行一个<code>.proto</code>，编译器会生成你需要的语言的代码，包括getting和setting字段的值，序列化你的信息到输出流，从输入流解析你的信息。</p>
<ul>
<li>对于<strong>C++</strong>，编译器为每个<code>.proto</code>生成一个<code>.h</code>和<code>.cc</code>文件，每个信息类型用一个类定义。</li>
<li>对于<strong>Java</strong>，编译器会为每个消息来行生成一个带有类的<code>.java</code>文件，以及用于创建消息类实力的特殊<code>Builder</code>类。</li>
<li><strong>Python</strong>有一些不同——Python编译器会在<code>.proto</code>中为每个消息类型生成一个静态描述符，然后与<code>metaclass</code>一起使用，以在运行时创建必要的Python数据访问类。</li>
<li>对于<strong>Go</strong>，编译器为每种消息类型生成一个<code>.pb.go</code>文件。</li>
<li>对于<strong>Ruby</strong>，编译器使用包含消息类型的Ruby模块生成一个<code>.rb</code>文件。</li>
<li>对于<strong>JavaNano</strong>，编译器输出与Java相似，但没有<code>Builder</code>类。</li>
<li>对于<strong>Object-C</strong>，编译器会从每个<code>.proto</code>生成一个<code>pbobjc.h</code>和<code>pbobjc.m</code>文件，并为你的文件中描述的每种消息类型生成一个类。</li>
<li>对于<strong>C#</strong>，编译器会从每个<code>.proto</code>生成一个<code>.cs</code>文件，并为你的文件中描述的每种消息类型生成一个类。</li>
</ul>
<p>你可以按照所选语言的教程(即将推出proto3版本)了解更多关于使用每种语言的API的信息。有关更多API的详细信息，请参阅相关<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">API参考</a>(即将推出proto3版本)。</p>
<h2 id="Scalar-值类型"><a href="#Scalar-值类型" class="headerlink" title="Scalar 值类型"></a>Scalar 值类型</h2><p>标量消息字段可以具有以下类型之一——该表显示.proto文件中指定的类型以及自动生成的类中的相应类型：</p>
<table>
<thead>
<tr>
<th>.proto Type</th>
<th>Notes</th>
<th>C++ Type</th>
<th>Java Type</th>
<th>Python Type<sup>[2]</sup></th>
<th>Go Type</th>
<th>Ruby Type</th>
<th>C# Type</th>
<th>PHP Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>double</td>
<td></td>
<td>double</td>
<td>double</td>
<td>float</td>
<td>float64</td>
<td>Float</td>
<td>double</td>
<td>float</td>
</tr>
<tr>
<td>float</td>
<td></td>
<td>float</td>
<td>float</td>
<td>float</td>
<td>float32</td>
<td>Float</td>
<td>float</td>
<td>float</td>
</tr>
<tr>
<td>int32</td>
<td>使用可变长度编码。负数是无效编码——如果你的字段可能含有负数，请改用sint32</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum or Bignum (as required)</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>int64</td>
<td>使用可变长度编码。负数是无效编码——如果你的字段可能具有负值，请改用sint64。</td>
<td>int64</td>
<td>long</td>
<td>int/long<sup>[3]</sup></td>
<td>int64</td>
<td>Bignum</td>
<td>long</td>
<td>integer/string<sup>[5]</sup></td>
</tr>
<tr>
<td>uint32</td>
<td>使用可变长度编码。</td>
<td>uint32</td>
<td>int<sup>[1]</sup></td>
<td>int/long<sup>[3]</sup></td>
<td>uint32</td>
<td>Fixnum or Bignum (as required)</td>
<td>uint</td>
<td>integer</td>
</tr>
<tr>
<td>uint64</td>
<td>使用可变长度编码。</td>
<td>uint64</td>
<td>long<sup>[1]</sup></td>
<td>int/long<sup>[3]</sup></td>
<td>uint64</td>
<td>Bignum</td>
<td>ulong</td>
<td>integer/string<sup>[5]</sup></td>
</tr>
<tr>
<td>sint32</td>
<td>使用可变长度编码。带符号的int值。这些比常规的int32更有效地编码负数。</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum or Bignum (as required)</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>sint64</td>
<td>使用可变长度编码。带符号的int值。这些比常规的int64更有效地编码负数。</td>
<td>int64</td>
<td>long</td>
<td>int/long<sup>[3]</sup></td>
<td>int64</td>
<td>Bignum</td>
<td>long</td>
<td>integer/string<sup>[5]</sup></td>
</tr>
<tr>
<td>fixed32</td>
<td>总是四个字节。如果值通常大于$2^{28}$，则比uint32效率更高。</td>
<td>uint32</td>
<td>int<sup>[1]</sup></td>
<td>int</td>
<td>uint32</td>
<td>Fixnum or Bignum (as required)</td>
<td>uint</td>
<td>integer</td>
</tr>
<tr>
<td>fixed64</td>
<td>总是八个字节。如果值通常大于$2^{56}$，则会比uint64更高效。</td>
<td>uint64</td>
<td>long<sup>[1]</sup></td>
<td>int/long<sup>[3]</sup></td>
<td>uint64</td>
<td>Bignum</td>
<td>ulong</td>
<td>integer/string<sup>[5]</sup></td>
</tr>
<tr>
<td>sfixed32</td>
<td>总是四个字节。</td>
<td>int32</td>
<td>int</td>
<td>int</td>
<td>int32</td>
<td>Fixnum or Bignum (as required)</td>
<td>int</td>
<td>integer</td>
</tr>
<tr>
<td>sfixed64</td>
<td>总是八个字节。</td>
<td>int64</td>
<td>long</td>
<td>int/long<sup>[3]</sup></td>
<td>int64</td>
<td>Bignum</td>
<td>long</td>
<td>integer/string<sup>[5]</sup></td>
</tr>
<tr>
<td>bool</td>
<td></td>
<td>bool</td>
<td>boolean</td>
<td>bool</td>
<td>bool</td>
<td>TrueClass/FalseClass</td>
<td>bool</td>
<td>boolean</td>
</tr>
<tr>
<td>string</td>
<td>字符串必须始终包含UTF-8编码或7位ASCII文本。</td>
<td>string</td>
<td>String</td>
<td>str/unicode<sup>[4]</sup></td>
<td>string</td>
<td>String (UTF-8)</td>
<td>string</td>
<td>string</td>
</tr>
<tr>
<td>bytes</td>
<td>可能包含任何字节序列。</td>
<td>string</td>
<td>ByteString</td>
<td>str</td>
<td>[]byte</td>
<td>String (ASCII-8BIT)</td>
<td>ByteString</td>
<td>string</td>
</tr>
</tbody>
</table>
<p>你可以在 Protocal Buffer Encoding 中了解有关这些类型序列化消息如何编码的更多信息。</p>
<p><sup>[1]</sup> 在Java中，无符号的32位和64位整数使用其签名对应表示，最高位仅存储在符号位中。</p>
<p><sup>[2]</sup> 在所有情况下，将值设置为字段将执行类型检查以确保其有效。</p>
<p><sup>[3]</sup> 64位或无符号32位整数在解码时总是表示为long，但如果在设置字段时给定整型，则可以是int。在所有情况下，该值必须符合设置时表示的类型。见<sup>[2]</sup>。</p>
<p><sup>[4]</sup> Python字符串在解码时表示为unicode，但如果给出ASCII字符串(可能会更改)，则可以为str。</p>
<p><sup>[5]</sup> Integer用于64位机器，字符串用于32位机器。</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>当一条消息被解析，如果编码的信息不包含特定的 singular 元素，则解析对象中的对应字段将设置为该字段的默认值。这些默认值是特定于类型的：</p>
<ul>
<li>对于 string 类型，默认值为空字符串。</li>
<li>对于 byte 类型，默认值是空字节。</li>
<li>对于 bool 类型，默认值是 false 。</li>
<li>对于 numeric(数字) 类型，默认值是0。</li>
<li>对于 enums 类型，默认值是第一个定义的枚举值，一定为0。</li>
<li>对于消息字段，该字段未设置。它的确切值是语言相关的。详情请参阅生成的代码指南。</li>
</ul>
<p>重复(repeated)字段的默认值为空(通常是相应语言的空列表)。</p>
<p>请注意，对于标量(scalar)消息字段，一旦解析了消息，就无法判断字段是否被显式设置为默认值(例如布尔值是否设置为<code>false</code>)或者根本没有设置：在定义消息类型时应该记住这一点。举个例子，如果你不希望该行为在默认情况下发生，请将其设置为<code>false</code>时切换某些行为的布尔值。另请注意，如果标量(scalar)消息字段被设置为其默认值，则该值不会在连线上序列化。有关如何在生成的代码中使用默认值的更多详细信息，请参阅所选语言的<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">生成代码指南</a>。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>当你定义一个消息类型时，你可能希望它的一个字段只有一个预定义的值。例如，假设你想为每个<code>SearchRequest</code>添加一个<code>corpus</code>(语料库)字段，其中语料库可以是<code>UNIVERSAL</code>,<code>WEB</code>,<code>IMAGES</code>,<code>LOCAL</code>,<code>NEWS</code>,<code>PRRDUCTS</code>或<code>VIDEO</code>。你可以非常简单地通过为每个可能值添加一个常量来为消息定义添加枚举。<br>下面的示例中，我们添加一个名为<code>Corpus</code>的枚举，其中包含所有可能的值以及一个类型为<code>Corpus</code>的字段：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchRequest</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">Corpus</span> </span>&#123;</span><br><span class="line">    UNIVERSAL = <span class="number">0</span>;</span><br><span class="line">    WEB = <span class="number">1</span>;</span><br><span class="line">    IMAGES = <span class="number">2</span>;</span><br><span class="line">    LOCAL = <span class="number">3</span>;</span><br><span class="line">    NEWS = <span class="number">4</span>;</span><br><span class="line">    PRODUCTS = <span class="number">5</span>;</span><br><span class="line">    VIDEO = <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Corpus corpus = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见，<code>Corpus</code>枚举的第一个常量映射为0：每个枚举定义都必须包含一个映射为0的常量作为第一个元素。这是因为：</p>
<ul>
<li>必须有一个零值，以便我们可以使用0作为数字的默认值。</li>
<li>零值需要是第一个元素，与第一个枚举值始终是默认值的proto2语义兼容。</li>
</ul>
<p>你可以通过将相同的值分配给不同的枚举常量来定义别名。为此，你需要将<code>allow_alias</code>选项设置为<code>true</code>，否则当找到别名时，协议编译器将生成错误消息。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumAllowingAlias</span> </span>&#123;</span><br><span class="line">  <span class="keyword">option</span> allow_alias = <span class="literal">true</span>;</span><br><span class="line">  UNKNOWN = <span class="number">0</span>;</span><br><span class="line">  STARTED = <span class="number">1</span>;</span><br><span class="line">  RUNNING = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">EnumNotAllowingAlias</span> </span>&#123;</span><br><span class="line">  UNKNOWN = <span class="number">0</span>;</span><br><span class="line">  STARTED = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举器常量必须在32位整数的范围内。由于枚举值在线路上使用<code>varint</code>编码，所以负值效率不高，因此不推荐使用。你可以在消息定义中(如上例)或外部定义枚举——这些枚举可以在<code>.proto</code>文件中的任何消息定义中重用。你还可以使用语法<code>MessageType.EnumType</code>将一个消息中声明的枚举类型用作不同消息中字段的类型。</p>
<p>当你在使用<code>enum</code>的<code>.proto</code>文件上运行protocol buffer编译器，生成的代码将为Java或C++提供相应的枚举值，这是一种特殊的<code>EnumDescriptor</code>类，用于在运行时生成的类中创建一组具有整数值的符号常量。</p>
<p>在反序列化过程中，无法识别的枚举值将保留在消息中，但是当消息被反序列化时如何表示是依赖于语言的。在支持指定符号范围之外的值的开放枚举类型的语言(如C++和Go)中，未知枚举值仅作为其基础整数表示形式存储。在具有封闭枚举类型的语言(如Java)中，枚举中的一个用于表示无法识别的值，并且可以使用特殊访问器访问基础整数。在任何一种情况下，如果消息被序列化，则无法识别的值仍将与消息一起序列化。有关如何在应用程序中使用消息枚举的更多信息，请参阅所选语言的<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">生成代码指南</a>。</p>
<h3 id="保留值"><a href="#保留值" class="headerlink" title="保留值"></a>保留值</h3><p>如果你通过完全删除枚举条目或将其注释掉来更新枚举类型，未来的用户可以在对该类型进行自己的更新时重新使用数值。如果稍后加载相同的<code>.proto</code>的旧版本，包括数据损坏，隐私错误等，则可能会导致严重问题。确保这种情况不会发生的一种方法指定已删除条目的数字值(和/或名称)被保留(这也可能会导致JSON序列化的问题)。如果将来的任何用户试图使用这些标识符，protocol buffer 编译器将会报错。你可以使用<code>max</code>关键字指定保留的数值范围上升到最大可能值。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>, <span class="number">40</span> to max;</span><br><span class="line">  reserved <span class="string">"FOO"</span>, <span class="string">"BAR"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，你不能在同一<code>reserved</code>语句中混合字段名称和数字值。</p>
<h3 id="使用其他消息类型"><a href="#使用其他消息类型" class="headerlink" title="使用其他消息类型"></a>使用其他消息类型</h3><p>你可以使用其他消息类型作为字段类型。例如，假设你想在每个<code>SearchResponse</code>消息中包含<code>Result</code>消息——为此，你可以在同一个<code>.proto</code>中定义一个<code>Result</code>消息类型，然后在<code>SearchResponse</code>中指定<code>Result</code>类型的字段：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="导入定义"><a href="#导入定义" class="headerlink" title="导入定义"></a>导入定义</h3><p>在之前的例子中，<code>Result</code>消息类型与<code>SearchResponse</code>定义在同一文件中——如果你要使用的消息类型已经在其他<code>.proto</code>文件中定义了呢？<br>你可以通过导入来使用其他<code>.proto</code>文件中的定义。要导入另一个<code>.proto</code>的定义，可以在文件顶部添加一条导入语句：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"myproject/other_protos.proto"</span>;</span><br></pre></td></tr></table></figure>
<p>默认情况下，你只能使用直接导入的<code>.proto</code>文件中的定义。但是，有时你可能需要将<code>.proto</code>文件移至新位置。不是直接移动<code>.proto</code>文件，而是在一次更改中更新所有调用站点，现在你可以在旧位置放置一个虚拟<code>.proto</code>文件，以使用<code>import public</code>概念将所有导入转移到新位置。<code>import public</code>依赖可以被过渡到任何包含<code>import public</code>语句的proto中。例如：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new.proto</span></span><br><span class="line"><span class="comment">// All definitions are moved here</span></span><br></pre></td></tr></table></figure>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// old.proto</span></span><br><span class="line"><span class="comment">// This is the proto that all clients are importing.</span></span><br><span class="line"><span class="keyword">import</span> public <span class="string">"new.proto"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"other.proto"</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// client.proto</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"old.proto"</span>;</span><br><span class="line"><span class="comment">// You use definitions from old.proto and new.proto, but not other.proto</span></span><br></pre></td></tr></table></figure>
<p>协议编译器使用<code>-I / --proto_path</code>标志在协议编译器命令行中指定一组目录中搜索导入的文件。<br>如果没有给标志，它将在调用编译器的目录中查找。通常，你应该将<code>--proto_path</code>标志设置为根目录，并为所有导入使用完整名称。</p>
<h3 id="使用proto2消息类型"><a href="#使用proto2消息类型" class="headerlink" title="使用proto2消息类型"></a>使用proto2消息类型</h3><p>可以导入proto2消息类型并在proto3消息中使用它们，反之亦然。然而，proto2枚举不能直接用在proto3语法中(如果导入的proto2消息使用它们，这是可以的)。</p>
<h2 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h2><p>你可以在其他消息类型中定义和使用消息类型，如下例所示这里<code>ResultResponse</code>消息中定义了<code>Result</code>消息——这里<code>ResultResponse</code>消息中定义了<code>Result</code>消息：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SearchResponse</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result results = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想在其父消息类型外重复使用此消息类型，请将其称为<code>Parent.Type</code>：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SomeOtherMessage</span> </span>&#123;</span><br><span class="line">  SearchResponse.Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以根据需要深度嵌套消息：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Outer</span> </span>&#123;                  <span class="comment">// Level 0</span></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">MiddleAA</span> </span>&#123;  <span class="comment">// Level 1</span></span><br><span class="line">    <span class="class"><span class="keyword">message</span> <span class="title">Inner</span> </span>&#123;   <span class="comment">// Level 2</span></span><br><span class="line">      <span class="built_in">int64</span> ival = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">bool</span>  booly = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">MiddleBB</span> </span>&#123;  <span class="comment">// Level 1</span></span><br><span class="line">    <span class="class"><span class="keyword">message</span> <span class="title">Inner</span> </span>&#123;   <span class="comment">// Level 2</span></span><br><span class="line">      <span class="built_in">int32</span> ival = <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">bool</span>  booly = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更新消息类型"><a href="#更新消息类型" class="headerlink" title="更新消息类型"></a>更新消息类型</h2><p>如果现有的消息类型不再满足你的所有需求——例如，你希望消息格式具有额外的字段——但你仍然希望使用使用旧格式创建的代码，别担心！在不破坏任何现有代码的情况下更新消息类型非常简单。请记住以下规则：</p>
<ul>
<li>不要更改任何现有字段的数字标记。</li>
<li>如果你添加新字段，则任何由代码使用“旧”消息格式序列化的消息仍然可以通过新生成的代码解析。你应该记住这些元素的默认值，以便新代码可以正确地与旧代码生成的消息交互。同样的，由新代码创建的消息可以由旧代码解析：旧的二进制文件在解析时会简单地忽略新字段。有关详情，请参阅未知字段部分。</li>
<li>只有在更新的消息类型中不再使用标签号码，字段就可以被删除。你可能希望重命名该字段，可能会添加前缀“OBSOLETE_”，或者保留标记，以便将来的<code>.proto</code>用户不会意外重用该号码。</li>
<li><code>int32</code>,<code>uint32</code>,<code>int64</code>,<code>uint64</code>,和<code>bool</code>全都兼容——这意味着你可以将字段从这些类型之一更改为另一字段而不破坏向前或向后兼容性。如果一个数字从不适合相应类型的线路中解析出来，则会得到与在C++中将数字转换为该类型相同的效果(例如，如果将64位数字读为int32，它将被截断为32位)。</li>
<li><code>sint32</code>和<code>sint64</code>相互兼容，但与其他整数类型不兼容。</li>
<li>只要字节是有效的UTF-8，<code>string</code>和<code>bytes</code>是兼容的。</li>
<li>嵌入式消息与字节兼容，如果字节包含消息，如果字节包含消息的编码版本。</li>
<li><code>fixed32</code>与<code>sfixed32</code>兼容，而<code>fixed64</code>与<code>sfixed64</code>兼容</li>
<li><code>enum</code>与wire格式的<code>int32</code>，<code>uint32</code>，<code>int64</code>和<code>uint64</code>兼容(请注意，如果它们不适合，值将被截断)。但请注意，当消息被反序列化时，客户端代码可能会以不同的方式处理它们：例如，无法识别的proto3枚举类型将保留在消息中，但消息反序列化时如何表示是语言相关的。 Int域始终只保留它们的值。</li>
</ul>
<h2 id="未知字段"><a href="#未知字段" class="headerlink" title="未知字段"></a>未知字段</h2><p>未知字段是格式良好的 protocal buffer 序列化数据，表示解析器无法识别的字段。例如，当一个旧的二进制文件的解析被包含新字段的新二进制文件发送时，这些新的字段将成为旧的二进制文件中的未知字段。<br>Proto3可以成功解析未知字段的消息，但是，是否能保留这些未知字段就不确定了。你不应该以来保存或删除未知字段。对于大多数 Google protocol buffer的实现，未知字段在proto3中无法通过相应的 proto runtimes 访问，并且在反序列化时被丢弃或遗忘。这是 proto2 的不同行为吗，其中未知字段总是与消息一起保存并序列化。</p>
<h2 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h2><p><code>Any</code> 消息类型允许你将消息用作嵌入类型，而不必具有<code>.proto</code>定义。一个<code>Any</code>包含一个任意的序列化消息作为字节，以及一个充当全局唯一标识符并解析为该消息类型的URL。要使用<code>Any</code>类型，你需要导入<code>google/protobuf/any.proto</code>。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"google/protobuf/any.proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">ErrorStatus</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">  <span class="title">repeated</span> google.protobuf.Any details = 2;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>
<p>给定消息类型的默认的URL是<code>type.googleapis.com/packagename.messagename</code><br>不同语言实现将支持runtime库帮助程序以类型安全的方式打包和解压缩Any的值——例如，在Java中，Any类型将具有特殊的<code>pack()</code>和<code>unpack()</code>访问器，而在C++中则有<code>PackForm()</code>和<code>UnpackTo()</code>方法：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Storing an arbitrary message type in Any.</span></span><br><span class="line">NetworkErrorDetails details = ...;</span><br><span class="line">ErrorStatus status;</span><br><span class="line">status.add_details()-&gt;PackFrom(details);</span><br><span class="line"></span><br><span class="line">// Reading an arbitrary message from Any.</span><br><span class="line">ErrorStatus status = ...;</span><br><span class="line">for (const Any&amp; detail : status.details()) &#123;</span><br><span class="line">  if (detail.Is&lt;NetworkErrorDetails&gt;()) &#123;</span><br><span class="line">    NetworkErrorDetails network_error;</span><br><span class="line">    detail.UnpackTo(&amp;network_error);</span><br><span class="line">    ... processing network_error ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>当前用于处理Ang类型的的runtime库都在开发中</strong><br>如果你已经熟悉<a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="noopener">proto2语法</a>，则Any类型会替换<a href="https://developers.google.com/protocol-buffers/docs/proto#extensions" target="_blank" rel="noopener">拓展名</a>。</p>
<h2 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h2><p>如果你有一个包含多个字段的消息，并且最多只能同时设置一个字段，则可以使用 oneof 功能强制执行此操作并节省内存。<br>Oneof字段与常规字段很相似，但共享中的所有字段除外，并且最多只能同时设置一个字段。设置 oneof 中的任何成员会自动清除所有其他成员。根据你选择的语言，你可以使用特殊的 <code>case()</code>或<code>WhichOneof()</code>方法检查oneof中的哪个值(如果有)被设置。</p>
<h3 id="使用-Oneof"><a href="#使用-Oneof" class="headerlink" title="使用 Oneof"></a>使用 Oneof</h3><p>要在<code>.proto</code>中定义一个oneof关键字，请使用oneof关键字，后跟你的oneof名称，在此例中为<code>test_oneof</code>：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">SampleMessage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">oneof</span> test_oneof &#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">4</span>;</span><br><span class="line">    SubMessage sub_message = <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，将你的oneof字段添加到oneof定义中。你可以添加任意类型的字段，但不能使用<code>repeated</code>字段。<br>在你生成的代码中，oneof字段与常规字段具有相同的<code>getter</code>和<code>setter</code>。你还可以获得一种特殊的方法检查oneof中的哪个值(如果有)被设置。你可以在相关的<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">API参考</a>中找到更多关于你所选语言的API。</p>
<h3 id="Oneof-的特点"><a href="#Oneof-的特点" class="headerlink" title="Oneof 的特点"></a>Oneof 的特点</h3><ul>
<li>设置一个oneof字段将自动清除oneof中的其他成员。所以如果你设置了多个字段，则只有你设置的最后一个字段会有值。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">SampleMessage message;</span><br><span class="line">message.set_name("name");</span><br><span class="line">CHECK(message.has_name());</span><br><span class="line">message.mutable_sub_message();   // Will clear name field.</span><br><span class="line">CHECK(!message.has_name());</span><br></pre></td></tr></table></figure>
<ul>
<li>如果解析器在线上遇到多个同一oneof中成员，则只有最后一个成员被用于解析的消息。</li>
<li>一个oneof不能是<code>repeated</code>。</li>
<li>反射API适用于oneof字段。</li>
<li>如果你使用C++，请确保你的代码不会导致内存崩溃。以下示例代码将因为调用<code>set_name()</code>方法删除了<code>sub_message</code>而崩溃。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">SampleMessage message;</span><br><span class="line">SubMessage* sub_message = <span class="class"><span class="keyword">message</span>.<span class="title">mutable_sub_message</span>();</span></span><br><span class="line"><span class="class">message.set_name("name");      // Will delete sub_message</span></span><br><span class="line"><span class="class">sub_message-&gt;set_...            // Crashes here</span></span><br></pre></td></tr></table></figure>
<ul>
<li>还是C++，如果你<code>Swap()</code>两个带有oneof的消息，每个消息都会以另一个 oneof case 结尾：在下面的例子中，<code>msg1</code>将有一个<code>sub_message</code>，而<code>msg2</code>将有一个<code>name</code>。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">SampleMessage msg1;</span><br><span class="line">msg1.set_name("name");</span><br><span class="line">SampleMessage msg2;</span><br><span class="line">msg2.mutable_sub_message();</span><br><span class="line">msg1.swap(&amp;msg2);</span><br><span class="line">CHECK(msg1.has_sub_message());</span><br><span class="line">CHECK(msg2.has_name());</span><br></pre></td></tr></table></figure>
<h3 id="向后兼容性问题"><a href="#向后兼容性问题" class="headerlink" title="向后兼容性问题"></a>向后兼容性问题</h3><p>添加或删除一个字段时请小心。如果检查一个返回值的值为<code>None</code>/<code>NOT_SET</code>，则可能意味着oneof的值没有被设置，或者被设置为不同版本的oneof字段。没有办法分辨这种差异，因为无法知道线路上的未知字段是否为oneof的成员。</p>
<h3 id="标记重用问题"><a href="#标记重用问题" class="headerlink" title="标记重用问题"></a>标记重用问题</h3><ul>
<li><strong>将字段移入或移出oneof字段</strong>：在消息序列化和解析后，可能会丢失一些信息(某些字段将被清除)。</li>
<li><strong>删除一个oneof字段再将其添加回来</strong>：在消息序列化和解析后，这可能会清除你当前设置的oneof字段。</li>
<li><strong>拆分或合并oneof</strong>：这与移动常规字段具有相似的问题。</li>
</ul>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><p>如果你想创建一个关联映射(map)作为数据定义的一部分，protocol buffer提供了一个方便的快捷语法。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">map&lt;key_type, value_type&gt; map_field = N;</span><br></pre></td></tr></table></figure>
<p>其中<code>key_type</code>可以是任何整数或字符串类型(因此，除了浮点类型和字节外的任何标量类型)。请注意，枚举不是有效的<code>key_type</code>。<code>value_type</code>可以是除另一个map之外的任何类型。</p>
<p>因此，例如，如果你想创建一个项目映射，其中每个<code>Project</code>消息都与一个字符串相关联，则可以像这样定义它：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">map&lt;<span class="built_in">string</span>, Project&gt; projects = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Map 字段不能被 <code>repeated</code>。</li>
<li>线格式排序和映射迭代排序是不确定的，所以你不能依靠映射项目的特定顺序。</li>
<li>为<code>.proto</code>生成文本格式时，映射按键排序。数字键按数字排序。</li>
<li>从线路解析或合并时，如果有重复的映射键，则使用所看到的最后一个键。从文本格式解析映射时，如果有重复的键，解析可能会失败。</li>
</ul>
<p>生成映射API目前可用于所有proto3支持的语言。你可以在相关的<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">API参考</a>中找到更多关于你所选语言的映射API的信息。</p>
<h3 id="向后兼容性"><a href="#向后兼容性" class="headerlink" title="向后兼容性"></a>向后兼容性</h3><p>映射语法等同于线路中的以下内容，因此不支持映射的 protocol buffer 接口实现仍然可以处理你的数据：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">MapFieldEntry</span> </span>&#123;</span><br><span class="line">  key_type key = <span class="number">1</span>;</span><br><span class="line">  value_type value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">repeated</span> MapFieldEntry map_field = N;</span><br></pre></td></tr></table></figure>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>你可以将可选<code>package</code>说明符添加到<code>.proto</code>文件，以防止协议消息类型之间的名称冲突。</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo.bar;</span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Open</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>你可以在定义消息类型的字段时使用包说明符：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  foo.bar.Open open = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在C++中，生成的类被封装在C++命名空间中。例如，<code>Open</code>将位于命名空间<code>foo::bar</code>。</li>
<li>在Java中，除非你在<code>.proto</code>文件中明确提供了<code>option java_package</code>，否则该包将用作Java包。</li>
<li>在Python中，package指令被忽略，因为Python模块根据它们在文件系统中的位置进行组织。</li>
<li>在Go中，除非你在<code>.proto</code>文件中明确提供了<code>option go_package</code>，否则该软件包将用作Go软件包名称。</li>
<li>在Ruby中，生成的类将被封装在嵌套的Ruby命名空间中，并转换为所需的Ruby大写样式(首字母大写;如果第一个字符不是字母，则<code>PB_</code>被预置)。例如，<code>Open</code>将位于命名空间<code>Foo::Bar</code>中。</li>
<li>在JavaNano中，该包用作Java包，除非你在<code>.proto</code>文件中明确提供了一个<code>option java_package</code>。</li>
<li>在C＃中，除非你在<code>.proto</code>文件中明确提供了<code>option csharp_namespace</code>，否则在转换为PascalCase之后，该包将用作名称空间。例如，<code>Open</code>将位于名称空间<code>Foo.Bar</code>中。</li>
</ul>
<h3 id="包和名称解决方案"><a href="#包和名称解决方案" class="headerlink" title="包和名称解决方案"></a>包和名称解决方案</h3><p>Protocol buffer 语言中的类型名称解析与C++类似：首先搜索最内层的范围，然后搜索最内层的内容，依此类推，每个包被认为是其父包的“内层”。开头的的’.’ (例如<code>.foo.bar.Baz</code>)意味着从最外层的范围开始。<br>Protocol buffer 编译器通过解析导入的<code>.proto</code>文件来解析所有类型名称。每种语言的代码生成器都知道如何引用该语言中的每种类型，即使它具有不同的作用域规则。</p>
<h2 id="定义服务"><a href="#定义服务" class="headerlink" title="定义服务"></a>定义服务</h2><p>如果你想将消息类型用于RPC(Remote Procedure Call - 远程过程调用)系统，则可以在.proto文件中定义一个RPC服务接口，并且 protocol buffer 编译器将使用你选择的语言生成服务接口代码和存根。所以，例如，如果你想用一个带有你的<code>SearchRequest</code>并返回一个<code>SearchResponse</code>的方法来定义一个RPC服务，你可以在你的<code>.proto</code>文件中定义它，如下所示：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">SearchService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Search (SearchRequest) <span class="keyword">returns</span> (SearchResponse)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与 protocol buffer 一起使用的最直接的RPC系统是gRPC：由谷歌开发的语言无关和平台无关的开源RPC系统。gRPC特别适用于 protocol buffer ，并且可以使用特殊的 protocol buffer 编译器插件直接从.proto文件生成相关的RPC代码。<br>如果你不想使用gRPC，也可以在你自己的RPC接口实现中使用 protocol buffer 。你可以在<a href="https://developers.google.com/protocol-buffers/docs/proto#services" target="_blank" rel="noopener">Proto2语言指南</a>中找到更多关于此的信息。<br>还有一些正在进行的第三方项目为 Protocol Buffers 开发RPC实现。有关我们了解的项目的链接列表，请参阅<a href="https://github.com/google/protobuf/blob/master/docs/third_party.md" target="_blank" rel="noopener">第三方附加组件wiki页面</a>。</p>
<h2 id="JSON映射"><a href="#JSON映射" class="headerlink" title="JSON映射"></a>JSON映射</h2><p>Proto3支持JSON中的规范编码，使系统之间共享数据变得更加容易。编码在下表中按类型逐个描述。<br>如果JSON编码数据中缺少值或其值为空，则在解析为 protocol buffer 时，它将被解释为适当的默认值。如果一个字段在 protocol buffer 中具有默认值，默认情况下它将在JSON编码数据中省略以节省空间。实现可能提供选项以在JSON编码的输出中发送具有默认值的字段。</p>
<table>
<thead>
<tr>
<th>proto3</th>
<th>JSON</th>
<th>JSON example</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td>object</td>
<td>{“fBar”: v, “g”: null, …}</td>
<td>生成JSON对象。消息字段名称映射到lowerCamelCase并成为JSON对象键。接受null并将其视为相应字段类型的默认值。</td>
</tr>
<tr>
<td>enum</td>
<td>string</td>
<td>“FOO_BAR”</td>
<td>使用proto中指定的枚举值的名称。</td>
</tr>
<tr>
<td>map&lt;K,V&gt;</td>
<td>object</td>
<td>{“k”: v, …}</td>
<td>所有的密钥都转换为字符串。</td>
</tr>
<tr>
<td>repeated V</td>
<td>array</td>
<td>[v, …]</td>
<td>null被接受为空list[]</td>
</tr>
<tr>
<td>bool</td>
<td>true, false</td>
<td>true, false</td>
<td></td>
</tr>
<tr>
<td>string</td>
<td>string</td>
<td>“Hello World!”</td>
<td></td>
</tr>
<tr>
<td>bytes</td>
<td>base64 string</td>
<td>“YWJjMTIzIT8kKiYoKSctPUB+”</td>
<td>JSON值将是使用带填充的标准base64编码作为字符串编码的数据。无论是标准的还是URL安全的base64编码，都可以接受。</td>
</tr>
<tr>
<td>int32, fixed32, uint32</td>
<td>number</td>
<td>1, -10, 0</td>
<td>JSON值将是一个十进制数。数字或字符串都被接受。</td>
</tr>
<tr>
<td>int64, fixed64, uint64</td>
<td>string</td>
<td>“1”, “-10”</td>
<td>JSON值将是一个十进制字符串。数字或字符串都被接受。</td>
</tr>
<tr>
<td>float, double</td>
<td>number</td>
<td>1.1, -10.0, 0, “NaN”, “Infinity”</td>
<td>JSON值将是一个数字或特殊字符串值“NaN”，“Infinity”和“-Infinity”之一。数字或字符串都被接受。指数符号也被接受。</td>
</tr>
<tr>
<td>Any</td>
<td>object</td>
<td>{“@type”: “url”, “f”: v, … }</td>
<td>如果Any包含具有特殊JSON映射的值，则它将按如下所示进行转换： {“@type”: xxx, “value”: yyy}。否则，该值将被转换为JSON对象，并且将插入“@type”字段以指示实际的数据类型。</td>
</tr>
<tr>
<td>Timestamp</td>
<td>string</td>
<td>“1972-01-01T10:00:20.021Z”</td>
<td>使用RFC 3339，其中生成的输出始终是 Z-normalized ，并使用0,3,6或9小数位。</td>
</tr>
<tr>
<td>Duration</td>
<td>string</td>
<td>“1.000340012s”, “1s”</td>
<td>生成的输出总是包含0,3,6或9个小数位，具体取决于所需的精度，后面跟着后缀“s”。接受的是任何小数位（也没有），只要它们符合纳秒精度并且后缀“s”是必需的。</td>
</tr>
<tr>
<td>Struct</td>
<td>object</td>
<td>{ … }</td>
<td>任何JSON对象。请参见<code>struct.proto</code>。</td>
</tr>
<tr>
<td>Wrapper types</td>
<td>various types</td>
<td>2, “2”, “foo”, true, “true”, null, 0, …</td>
<td>包装器在JSON中使用与包装的基本类型相同的表示形式，除了在数据转换和传输期间允许和保留null。</td>
</tr>
<tr>
<td>FieldMask</td>
<td>string</td>
<td>“f.fooBar,h”</td>
<td>见 <code>fieldmask.proto</code>.</td>
</tr>
<tr>
<td>ListValue</td>
<td>array</td>
<td>[foo, bar, …]</td>
<td></td>
</tr>
<tr>
<td>Value</td>
<td>value</td>
<td></td>
<td>任何JSON值</td>
</tr>
<tr>
<td>NullValue</td>
<td>null</td>
<td></td>
<td>JSON null</td>
</tr>
</tbody>
</table>
<h2 id="选项-option"><a href="#选项-option" class="headerlink" title="选项 (option)"></a>选项 (option)</h2><p><code>.proto</code>文件中的各个声明可以用多个<em>选项</em>批注。选项不会更改声明的整体含义，但可能会影响在特定上下文中处理它的方式。可用选项的完整列表在<code>google/protobuf/descriptor.proto</code>中定义。<br>有些选项是文件级选项，这意味着它们应该写在顶层作用域中，而不是任何消息，枚举或服务定义中。有些选项是消息级选项，意味着它们应该写在消息定义中。有些选项是字段级选项，这意味着它们应该写在字段定义中。选项也可以写在枚举类型，枚举值，服务类型和服务方法上;但是，目前没有任何有用的选项。</p>
<p>以下是一些最常用的选项：</p>
<ul>
<li><code>java_package</code>(文件选项)：你要用于生成的Java类的包。如果在<code>.proto</code>文件中没有给出明确的<code>java_package</code>选项，那么默认情况下会使用proto包(在<code>.proto</code>文件中使用“package”关键字指定)。但是，proto软件包通常不会制作出良好的Java软件包，因为proto软件包不希望以反向域名开头。如果不生成Java代码，则此选项不起作用。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> java_package = <span class="string">"com.example.foo"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>java_multiple_files</code>(文件选项)：导致在包级别定义顶级消息，枚举和服务，而不是在以<code>.proto</code>文件命名的外部类中定义。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>java_outer_classname</code>(文件选项)：要生成的最外层Java类(因此文件名)的类名。如果没有在<code>.proto</code>文件中指定明确的<code>java_outer_classname</code>，则通过将<code>.proto</code>文件名称转换为驼峰命名(因此<code>foo_bar.proto</code>变为<code>FooBar.java</code>)来构造类名称。如果不生成Java代码，则此选项不起作用。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"Ponycopter"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>optimize_for</code>(文件选项)：可以设置为<code>SPEED</code>，<code>CODE_SIZE</code>或<code>LITE_RUNTIME</code>。这会通过以下方式影响C++和Java代码生成器(以及可能的第三方生成器)：<ul>
<li><code>SPEED</code>(默认)： protocol buffer 编译器将生成用于序列化，解析和执行消息类型的其他常见操作的代码。这段代码是高度优化的。</li>
<li><code>CODE_SIZE</code>:  protocol buffer 编译器将生成最少的类，并依靠共享的基于反射的代码来实现序列化，解析和各种其他操作。生成的代码因此比<code>SPEED</code>要小得多，但操作会比较慢。类仍将实现与<code>SPEED</code>模式中完全相同的公共API。这种模式在包含大量<code>.proto</code>文件的应用程序中非常有用，并且不需要所有这些文件都变得非常快速。</li>
<li><code>LITE_RUNTIME</code>: protocol buffer 编译器将生成仅取决于“lite”的runtime库(<code>libprotobuf-lite</code>而不是<code>libprotobuf</code>)的类。lite runtime比整个库小得多（大约小一个数量级），但省略了描述符和反射等特定功能。这对于在移动电话等受限平台上运行的应用程序特别有用。编译器仍然会像在<code>SPEED</code>模式下那样生成所有方法的快速实现。生成的类将仅实现每种语言的<code>MessageLite</code>接口，该接口仅提供完整的<code>Message</code>接口的一部分方法。</li>
</ul>
</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> optimize_for = CODE_SIZE;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>cc_enable_arenas</code>（文件选项）：为C ++生成的代码启用竞技场分配。</li>
<li><code>objc_class_prefix</code>（文件选项）：设置所有Objective-C生成的类和来自此.proto的枚举的Objective-C类前缀。没有默认值。你应该使用<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW4" target="_blank" rel="noopener">Apple建议</a>的3-5个大写字符之间的前缀。请注意，所有2个字母的前缀都由Apple保留。</li>
<li><code>deprecated</code>（字段选项）：如果设置为true，则表示该字段已被弃用且不应被新代码使用。在大多数语言中，这没有实际影响。在Java中，这变成了<code>@Deprecated</code>注释。将来，其他语言特定的代码生成器可能会在字段的访问器上生成弃用注释，这会在编译试图使用该字段的代码时反过来导致发出警告。如果该字段不被任何人使用，并且你想阻止新用户使用该字段，请考虑用保留语句替换字段声明。</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int32</span> old_field = <span class="number">6</span> [deprecated=<span class="literal">true</span>];</span><br></pre></td></tr></table></figure>
<h3 id="自定义选项"><a href="#自定义选项" class="headerlink" title="自定义选项"></a>自定义选项</h3><p>Protocol Buffers还允许你定义和使用你自己的选项。这是大多数人不需要的<strong>高级功能</strong>。如果你认为需要创建自己的选项，请参阅<a href="https://developers.google.com/protocol-buffers/docs/proto.html#customoptions" target="_blank" rel="noopener">Proto2语言指南</a>了解详细信息。请注意，创建自定义选项使用的扩展只允许proto3中的自定义选项。</p>
<h2 id="生成你的类"><a href="#生成你的类" class="headerlink" title="生成你的类"></a>生成你的类</h2><p>要生成需要使用.proto文件中定义的消息类型的Java，Python，C ++，Go，Ruby，JavaNano，Objective-C或C＃代码，需要在.proto文件上运行 Protocol Buffers 编译器协议。如果你尚未安装编译器，请<a href="https://developers.google.com/protocol-buffers/docs/downloads.html" target="_blank" rel="noopener">下载软件包</a>并按照README中的说明进行操作。对于Go，你还需要为编译器安装特殊的代码生成器插件：你可以在GitHub上的<a href="https://github.com/golang/protobuf/" target="_blank" rel="noopener">golang/protobuf</a>存储库中找到此安装说明。<br>协议编译器调用如下：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --java_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR --ruby_out=DST_DIR --javanano_out=DST_DIR --objc_out=DST_DIR --csharp_out=DST_DIR path/to/file.proto</span><br></pre></td></tr></table></figure>
<ul>
<li><code>IMPORT_PATH</code>指定解析<code>import</code>指令时要在其中查找<code>.proto</code>文件的目录。如果省略，则使用当前目录。可以通过多次传递<code>--proto_path</code>选项来指定多个导入目录;他们将按顺序搜索。<code>-I=IMPORT_PATH</code>可以用作<code>--proto_path</code>的简短形式。</li>
<li><p>你可以提供一个或多个输出指令：</p>
<ul>
<li><code>--cpp_out</code>在<code>DST_DIR</code>中生成C++代码。有关更多信息，请参阅<a href="https://developers.google.com/protocol-buffers/docs/reference/cpp-generated" target="_blank" rel="noopener">C++生成的代码参考</a>。</li>
<li><code>--java_out</code>在<code>DST_DIR</code>中生成Java代码。查看<a href="https://developers.google.com/protocol-buffers/docs/reference/java-generated" target="_blank" rel="noopener">Java生成的代码参考</a>以获取更多信息。</li>
<li><code>--python_out</code>在<code>DST_DIR</code>中生成Python代码。查看<a href="https://developers.google.com/protocol-buffers/docs/reference/python-generated" target="_blank" rel="noopener">Python生成的代码参考</a>以获取更多信息。</li>
<li><code>--go_out</code>在<code>DST_DIR</code>中生成Go代码。查看<a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated" target="_blank" rel="noopener">Go生成的代码参考</a>了解更多信息。</li>
<li><code>--ruby_out</code>在<code>DST_DIR</code>中生成Ruby代码。 Ruby生成的代码引用即将推出！</li>
<li><code>--javanano_out</code>在<code>DST_DIR</code>中生成JavaNano代码。JavaNano代码生成器有许多选项可用于自定义生成器输出：你可以在生成器<a href="https://github.com/google/protobuf/tree/master/javanano" target="_blank" rel="noopener">README</a>中找到更多关于这些的信息。 JavaNano生成的代码参考即将推出！</li>
<li><code>--objc_out</code>在<code>DST_DIR</code>中生成Objective-C代码。有关更多信息，请参阅<a href="https://developers.google.com/protocol-buffers/docs/reference/objective-c-generated" target="_blank" rel="noopener">Objective-C生成的代码参考</a>。</li>
<li><code>--csharp_out</code>在<code>DST_DIR</code>中生成C＃代码。有关更多信息，请参阅<a href="https://developers.google.com/protocol-buffers/docs/reference/csharp-generated" target="_blank" rel="noopener">C＃生成的代码参考</a>。</li>
<li><code>--php_out</code>在<code>DST_DIR</code>中生成PHP代码。查看<a href="https://developers.google.com/protocol-buffers/docs/reference/php-generated" target="_blank" rel="noopener">PHP生成的代码参考</a>了解更多信息。</li>
</ul>
<p>为了方便起见，如果<code>DST_DIR</code>以<code>.zip</code>或<code>.jar</code>结尾，编译器会将输出写入一个具有给定名称的ZIP格式存档文件。根据Java JAR规范的要求，<code>.jar</code>输出也会被赋予一个清单文件。请注意，如果输出存档已经存在，它将被覆盖;编译器不够聪明，无法将文件添加到现有存档。</p>
</li>
<li><p>你必须提供一个或多个<code>.proto</code>文件作为输入。可以一次指定多个<code>.proto</code>文件。虽然这些文件是相对于当前目录命名的，但每个文件都必须驻留在其中一个<code>IMPORT_PATH</code>中，以便编译器可以确定其规范名称。</p>
</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="RPC-framework"><a href="#RPC-framework" class="headerlink" title="RPC framework"></a>RPC framework</h2><p>RPC (Remote Procedure Call - 远程过程调用) </p>
<ul>
<li><a href="http://www.grpc.io/docs/" target="_blank" rel="noopener">GRPC - Google</a></li>
<li><a href="https://thrift.apache.org/" target="_blank" rel="noopener">Thrift - Apache</a></li>
</ul>
]]></content>
      <categories>
        <category>Protocol</category>
      </categories>
      <tags>
        <tag>Protocol Buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Protocol Buffer with Golang</title>
    <url>/2018/02/11/Google%20Protocol%20Buffer%20with%20Golang/</url>
    <content><![CDATA[<h2 id="了解-Google-Protocol-Buffer"><a href="#了解-Google-Protocol-Buffer" class="headerlink" title="了解 Google Protocol Buffer"></a>了解 Google Protocol Buffer</h2><p><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noopener">官网</a></p>
<p>Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.</p>
<a id="more"></a>
<h2 id="下载二进制文件"><a href="#下载二进制文件" class="headerlink" title="下载二进制文件"></a>下载二进制文件</h2><p><a href="https://github.com/google/protobuf/releases" target="_blank" rel="noopener">https://github.com/google/protobuf/releases</a></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h3><p>命令行输入:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go dev</span><br></pre></td></tr></table></figure>
<p>或者在系统环境变量里添加一条GOPATH指向你的自定义目录。</p>
<p>最后将<code>$GOPATH</code>添加到系统环境变量path中。</p>
<h3 id="可执行文件加入-GOPATH"><a href="#可执行文件加入-GOPATH" class="headerlink" title="可执行文件加入$GOPATH"></a>可执行文件加入$GOPATH</h3><p>以Windows为例，将下载的压缩包的bin目录下的<code>protoc.exe</code>复制到你的任意path路径下，我放到<code>$GOPATH/bin</code>目录下。</p>
<h3 id="添加Go语言支持"><a href="#添加Go语言支持" class="headerlink" title="添加Go语言支持"></a>添加Go语言支持</h3><p>命令行执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure>
<h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>先编写一个<code>addressbook.proto</code>文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line">package tutorial;</span><br><span class="line">message Person &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">  int32 id = 2;  // Unique ID number <span class="keyword">for</span> this person.</span><br><span class="line">  string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    string number = 1;</span><br><span class="line">    PhoneType <span class="built_in">type</span> = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Our address book file is just one of these.</span><br><span class="line">message AddressBook &#123;</span><br><span class="line">  repeated Person people = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>命令行输入以下生成命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">protoc --go_out=./ ./addressbook.proto</span><br><span class="line"><span class="comment"># 命令格式 protoc -I=$SRC_DIR --go_out=$DST_DIR $SRC_DIR/addressbook.proto</span></span><br></pre></td></tr></table></figure>
<p>在当前目录下生成<code>addressbook.pb.go</code>文件</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Protocol Buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一下在WordPress上用过的插件</title>
    <url>/2017/08/27/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%9C%A8WordPress%E4%B8%8A%E7%94%A8%E8%BF%87%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>虽然已经不用WordPress了，但是没准哪天又用上了呢？记录下用过的插件。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>插件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Akismet Anti-Spam</strong></td>
<td>由千百万人使用，Akismet可能是保护您的站点免受垃圾评论<strong>的世界上最好的方式</strong>。 您的站点已完全配置并受到不断的保护。3.3.4版本 由<a href="http://automattic.com/wordpress-plugins/" target="_blank" rel="noopener">Automattic</a></td>
</tr>
<tr>
<td><strong>Chat Room</strong></td>
<td>Chat Room for WordPress 0.1.3版本 由<a href="http://webdevstudios.com/" target="_blank" rel="noopener">WebDevStudios.com</a></td>
</tr>
<tr>
<td><strong>Crayon Syntax Highlighter</strong></td>
<td>Supports multiple languages, themes, highlighting from a URL, local file or post text. 2.8.4版本 由<a href="http://aramk.com/" target="_blank" rel="noopener">Aram Kocharyan</a></td>
</tr>
<tr>
<td><strong>Jetpack 由 WordPress.com 出品</strong></td>
<td>将 WordPress.com 云的强大功能引入您的自托管 WordPress。Jetpack 使您能够将自己的博客与一个 WordPress.com 帐户连接，以使用一般只有 WordPress.com 用户才可使用的强大功能。 5.2.1版本 由<a href="https://jetpack.com" target="_blank" rel="noopener">Automattic</a></td>
</tr>
<tr>
<td><strong>Netease Music</strong></td>
<td>WordPress 音乐播放器，支持网易云音乐和虾米音乐。3.0.4版本 由<a href="https://fatesinger.com/" target="_blank" rel="noopener">bigfa</a></td>
</tr>
<tr>
<td><strong>Useso take over Google</strong></td>
<td>替换所有的Google字体、谷歌JS公用库、Gravatar头像为geekzu资源。 1.8版本 由<a href="http://www.brunoxu.com/" target="_blank" rel="noopener">Bruno Xu</a></td>
</tr>
<tr>
<td><strong>WP User Avatar</strong></td>
<td>Use any image from your WordPress Media Library as a custom user avatar. Add your own Default Avatar. 2.0.8版本  由<a href="http://www.flippercode.com/" target="_blank" rel="noopener">flippercode</a></td>
</tr>
<tr>
<td><strong>你好多莉</strong></td>
<td>这不是普通的插件，它象征着一代人希望和热情，浓缩成Louis Armstrong的四个字：你好，多莉。在启用后，在您站点后台每个页面的右上角都可以看到一句来自《俏红娘》音乐剧的英文原版台词。 1.6版本  由<a href="http://ma.tt/" target="_blank" rel="noopener">Matt Mullenweg</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>一些节约生命的操作 (墙内加速 git pip conda npm docker)</title>
    <url>/2017/08/06/%E4%B8%80%E4%BA%9B%E8%8A%82%E7%BA%A6%E7%94%9F%E5%91%BD%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>你是否感觉  pip， npm, git， docker 之类的工具下载安装奇慢？<br>因为它们的默认服务器都在国外，那么需要必要的设置才能发挥咱百兆光纤的作用。下面介绍方法:</p>
<a id="more"></a>
<details><br><br><summary>如果你用的是 linux，别折腾了挂代理解决一切问题</summary><br><br>简单配置下全局代理，也可以将下面这句加入 profile 中<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假如你的代理地址是 http://127.0.0.1:1080</span></span><br><span class="line"><span class="built_in">export</span> proxy=http://127.0.0.1:1080; <span class="built_in">export</span> http_proxy=<span class="variable">$proxy</span> https_proxy=<span class="variable">$proxy</span> no_proxy=<span class="string">"localhost, 127.0.0.0/8, ::1"</span></span><br></pre></td></tr></table></figure><br><br>用 <code>privoxy</code> 稍微折腾下见<a href="http://www.findshank.com/2018/04/15/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8SS%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86/">这篇文章</a><br><br></details>

<h2 id="pip-的配置"><a href="#pip-的配置" class="headerlink" title="pip 的配置"></a>pip 的配置</h2><p>解决方式：使用国内的pypi镜像加速，以阿里源为例。</p>
<h3 id="方法1-修改配置"><a href="#方法1-修改配置" class="headerlink" title="方法1 修改配置"></a>方法1 修改配置</h3><ul>
<li>Linux</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip &amp;&amp; <span class="built_in">echo</span> <span class="string">"[global]</span></span><br><span class="line"><span class="string">trusted-host =  mirrors.aliyun.com</span></span><br><span class="line"><span class="string">index-url = http://mirrors.aliyun.com/pypi/simple"</span> &gt; ~/.pip/pip.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>欲使用其他源，自行搜索替换。更多配置参数见<a href="http://www.pip-installer.org/en/latest/configuration.html" target="_blank" rel="noopener">官方文档</a>。</p>
</blockquote>
<ul>
<li>Windows</li>
</ul>
<p>打开powershell(不是cmd!)，粘贴下面命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir ~/pip/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[global]</span></span><br><span class="line"><span class="string">trusted-host =  mirrors.aliyun.com</span></span><br><span class="line"><span class="string">index-url = http://mirrors.aliyun.com/pypi/simple</span></span><br><span class="line"><span class="string">"</span> | out-file -encoding ascii ~/pip/pip.ini</span><br></pre></td></tr></table></figure>
<p>解释：在用户目录(C:\Users\Username)下新建名为pip的目录，目录下新建文件pip.ini，写入阿里的镜像源配置。</p>
<blockquote>
<p>P.S 因为默认输出编码为utf16会导致pip出错，必须指定编码。</p>
</blockquote>
<h3 id="方法2-临时使用"><a href="#方法2-临时使用" class="headerlink" title="方法2 临时使用"></a>方法2 临时使用</h3><p>以安装numpy为例。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<h2 id="conda-的配置"><a href="#conda-的配置" class="headerlink" title="conda 的配置"></a>conda 的配置</h2><h3 id="方法1-配置代理"><a href="#方法1-配置代理" class="headerlink" title="方法1 配置代理"></a>方法1 配置代理</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> proxy_servers.http http://id:pw@address:port</span><br><span class="line">conda config --<span class="built_in">set</span> proxy_servers.https https://id:pw@address:port</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ref: <a href="https://stackoverflow.com/a/48416007" target="_blank" rel="noopener">Running conda with proxy</a></p>
</blockquote>
<h3 id="方法2-配置国内镜像"><a href="#方法2-配置国内镜像" class="headerlink" title="方法2 配置国内镜像"></a>方法2 配置国内镜像</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 Anaconda 的清华镜像</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"><span class="comment"># 搜索时显示通道地址</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ref: <a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html" target="_blank" rel="noopener">Managing channels</a></p>
</blockquote>
<h2 id="git-的配置"><a href="#git-的配置" class="headerlink" title="git 的配置"></a>git 的配置</h2><p>这个就要代理了。</p>
<h3 id="方法1-设置git全局变量"><a href="#方法1-设置git全局变量" class="headerlink" title="方法1 设置git全局变量"></a>方法1 设置git全局变量</h3><p><del>我曾经使用的lantern</del>，它提供两种代理端口： Http(s) 和 Socks5。使用下面命令配置git代理：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:50219</span><br><span class="line">git config --global https.proxy https://127.0.0.1:50219</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:50221</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:50221</span><br></pre></td></tr></table></figure>
<p>根据你的代理配置，修改对应部分即可。</p>
<h3 id="方法2-设置临时变量"><a href="#方法2-设置临时变量" class="headerlink" title="方法2 设置临时变量"></a>方法2 设置临时变量</h3><p><code>git clone</code> 时可以这么写:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ALL_PROXY=http://127.0.0.1:1080 git <span class="built_in">clone</span> https://github.com/some/one.git</span><br></pre></td></tr></table></figure>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>解决方法：使用国内的加速地址。获取途径很多。我使用的是阿里云的容器镜像服务里的专属加速地址。</p>
<blockquote>
<p><code>PCODE</code> 是阿里云帐户的加速前缀，后文中请自行替换。可以在<a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">这里</a>获取</p>
</blockquote>
<ul>
<li>Linux</li>
</ul>
<p>修改<code>/etc/docker/daemon.json</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://PCODE.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p>P.S Docker版本需大于1.10.0</p>
</blockquote>
<ul>
<li>Windows</li>
</ul>
<blockquote>
<p>我的系统是Window10，官方推荐使用 <code>Docker for Windows</code> ，此处不介绍 <code>Docker Toolbox</code></p>
</blockquote>
<p>在系统右下角托盘图标内右键菜单选择 Settings，打开配置窗口后左侧导航菜单选择 Docker Daemon。编辑窗口内的JSON串，填写加速器地址，如下所示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://PCODE.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编辑完成，点击 Apply 保存按钮，等待Docker重启并应用配置的镜像加速器。</p>
<blockquote>
<p><code>Docker for Windows</code> 和 <code>Docker Toolbox</code>是不兼容的。</p>
</blockquote>
<h2 id="npm-的配置"><a href="#npm-的配置" class="headerlink" title="npm 的配置"></a>npm 的配置</h2><h3 id="挂代理是最好的解决办法"><a href="#挂代理是最好的解决办法" class="headerlink" title="挂代理是最好的解决办法"></a>挂代理是最好的解决办法</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://proxy.company.com:8080</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://proxy.company.com:8080</span><br></pre></td></tr></table></figure>
<details><br><br><summary> update: 之前的方式均不推荐！ </summary><br><br><del>解决方式：也是替换国内的源，以淘宝源为例。</del><br><br>### <del>方法1 修改默认库配置(不推荐！会有莫名其妙的问题)</del><br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br><br>### <del>方法2 使用cnpm</del><br><br>使用cnpm命令替代npm命令。<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br><br>### <del>方法3 临时替换下载源</del><br><br>以安装Express为例。<br><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><br><br></details>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><del>能省一秒是一秒对吧，毕竟不是所有人都有+1s的能力</del></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>npm</tag>
        <tag>git</tag>
        <tag>pip</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>更换了新域名</title>
    <url>/2017/07/15/%E7%BD%91%E7%AB%99%E9%9C%80%E8%A6%81%E5%A4%87%E6%A1%88/</url>
    <content><![CDATA[<p>据说万网的域名很坑，当年图方便，偶然发现website域名不用备案，就买了。一直用着都挺好的，今年11月才到期。</p>
<a id="more"></a>
<p>本来还打算一直用下去的。可就在前天，想看看自己的博客，不能访问，一个TestPage挡在前面要求我去备案。那没办法，就去呗。可是尼玛，不支持 .website 域名是什么鬼。</p>
<p>这是逼着我把域名往外转啊……</p>
<p>在GoDaddy上注册一个账号，然后阿里云控制台申请域名转出万网。在GoDaddy上找到域名转入输入域名和邮箱收到转移密码。我去，价格199还强行要续一年，我有点不能接受啊（学生党资金不充裕）。</p>
<p>重新申请吧…… 换个 findshank.com 好了，正巧可以注册，爽爽的。一年60，还能接受。还有个隐私保护又要收60，我就没选，毕竟我填的信息基本是假的啊……</p>
<p>新域名到手，将域名解析指向云主机的IP。等几分钟试一下。打不开什么鬼？那么全局翻墙，嗯，可以进。</p>
<p>为了方便国内访问，就要换国内的DNS服务器来解析这个域名。Google了一下，就用<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>好了，域名解析是免费的，跟着官方提示做很简单，然后GoDaddy上更换自定义解析服务器为DNSPod的提供的地址就好了。</p>
<p>欢迎新朋友访问我的新域名 <a href="http://www.findshank.com">www.findshank.com</a> 😄</p>
<blockquote>
<p>然而，后来发现被封的是云主机，云主机需要备案，这个就没那么容易换了。既然买了域名就折腾 Github Pages 吧！</p>
</blockquote>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>烦</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC 部分刷新的尝试</title>
    <url>/2017/06/15/MVC%20%E9%83%A8%E5%88%86%E5%88%B7%E6%96%B0%E7%9A%84%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p><a href="#NewVersion">直接跳到2.0版本</a></p>
<h1 id="版本0-1-简单的异步刷新尝试"><a href="#版本0-1-简单的异步刷新尝试" class="headerlink" title="版本0.1 - 简单的异步刷新尝试"></a>版本0.1 - 简单的异步刷新尝试</h1><ul>
<li>ProcessController中加入</li>
</ul>
<a id="more"></a>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AllowAnonymous</span>] <span class="comment">// 这是允许匿名访问的声明，没有用ASP.NET IDENTITY可以删掉</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">PartialTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br><span class="line">[<span class="meta">AllowAnonymous</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Fetch</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 取前num条数据</span></span><br><span class="line">  <span class="keyword">var</span> model = db.Movies.Take(num).ToList();</span><br><span class="line">  <span class="comment">// MovieList是你的Partial页面的名字,model是与该Partial页头部接受的类型一致的model</span></span><br><span class="line">  <span class="keyword">return</span> PartialView(<span class="string">"MovieList"</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>/View/Process/PartialTest.cshtml</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>加一条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"notificationsTable"</span>&gt;</span></span><br><span class="line">    @&#123;Html.RenderAction("Fetch", new &#123; num = 1 &#125;);&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@* 添加JS到布局页，否则找不到jQuery的$标记 *@</span><br><span class="line">@section scripts&#123;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    var n = 2;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        $("#btn").click(function () &#123;</span><br><span class="line">            $("#notificationsTable").load('/Process/Fetch?num=' + n);</span><br><span class="line">            n++;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>地址栏运行/Process/PartialTest 即可</li>
</ul>
<h1 id="更新-1-0-使用-Ajax-ActionLink"><a href="#更新-1-0-使用-Ajax-ActionLink" class="headerlink" title="更新 1.0 - 使用@Ajax.ActionLink"></a>更新 1.0 - 使用@Ajax.ActionLink</h1><p>不希望在cshtml代码里用JS?  Razor Helper 还提供了 @Ajax.ActionLink</p>
<p>感谢下面链接里的大佬 </p>
<p><a href="http://www.c-sharpcorner.com/UploadFile/abhikumarvatsa/ajax-actionlink-and-html-actionlink-in-mvc/" target="_blank">传送门</a></p>
<ul>
<li>先在VS的程序包管理器控制台输入 (PS.如果有问题就在NuGet搜索安装) </li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> Microsoft.jQuery.Unobtrusive.Ajax</span><br></pre></td></tr></table></figure>
<ul>
<li>修改/View/Process/PartialTest.cshtml为</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@Ajax.ActionLink("一条变两条", "Fetch",new &#123; num = 2 &#125;,</span><br><span class="line">   new AjaxOptions</span><br><span class="line">   &#123;</span><br><span class="line">       UpdateTargetId = "notificationsTable",</span><br><span class="line">       InsertionMode = InsertionMode.Replace,</span><br><span class="line">       HttpMethod = "GET"</span><br><span class="line">   &#125;,</span><br><span class="line">   new</span><br><span class="line">   &#123;</span><br><span class="line">       @class = "btn btn-default",</span><br><span class="line">       @role = "button"</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"notificationsTable"</span>&gt;</span></span><br><span class="line">    @&#123;Html.RenderAction("Fetch", new &#123; num = 1 &#125;);&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@section scripts&#123;</span><br><span class="line">    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>由于用@Ajax.ActionLink生成的按钮是固定的，所以没法像JS那样动态修改请求变量，但是页面的异步刷新效果还是有的</li>
</ul>
<h1 id="更新-1-1-解决上面的问题"><a href="#更新-1-1-解决上面的问题" class="headerlink" title="更新 1.1 - 解决上面的问题"></a>更新 1.1 - 解决上面的问题</h1><p>动态更改ActionLink的routeValues，StackOverflow的回答基本是用JQuery，下面是解决办法：</p>
<ul>
<li>修改/View/Process/PartialTest.cshtml为：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@Ajax.ActionLink(<span class="string">"加一条"</span>, <span class="string">"Fetch"</span>,<span class="keyword">new</span> &#123; num = <span class="string">"xxx"</span> &#125;,</span><br><span class="line">   <span class="keyword">new</span> AjaxOptions</span><br><span class="line">   &#123;</span><br><span class="line">       UpdateTargetId = <span class="string">"notificationsTable"</span>,</span><br><span class="line">       InsertionMode = InsertionMode.Replace,</span><br><span class="line">       HttpMethod = <span class="string">"GET"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="keyword">new</span></span><br><span class="line">   &#123;</span><br><span class="line">       @id = <span class="string">"btn"</span>,</span><br><span class="line">       @<span class="keyword">class</span> = <span class="string">"btn btn-default"</span>,</span><br><span class="line">       @role = <span class="string">"button"</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">@section scripts&#123;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> href = $(<span class="string">'#btn'</span>).attr(<span class="string">'href'</span>);</span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $(<span class="string">"#btn"</span>).click(function () &#123;</span><br><span class="line">                <span class="keyword">this</span>.href = href.replace(<span class="string">"xxx"</span>, n++);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    @Scripts.Render(<span class="string">"~/Scripts/jquery.unobtrusive-ajax.min.js"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里实现了0.1版本一样的功能，是不是有种转了一圈回到原点的感觉？好讽刺啊……</li>
</ul>
<p id="NewVersion"></p>

<h1 id="更新2-0-Form表单提交实现指定DIV的异步刷新"><a href="#更新2-0-Form表单提交实现指定DIV的异步刷新" class="headerlink" title="更新2.0 - Form表单提交实现指定DIV的异步刷新"></a>更新2.0 - Form表单提交实现指定DIV的异步刷新</h1><p>上面讨论了如何按下按钮时异步刷新页面，那么在表单提交我不想跳转，我也要异步刷新，怎么办呢？下面介绍解决办法。这部分实现一个展示不同分类下的电影列表。从 Model - View - Controller 一步步来实现：</p>
<ul>
<li>Model - /Models/Movie</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Movie</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"电影名"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Types</span><br><span class="line">    &#123;</span><br><span class="line">        动作, 喜剧, 科幻, 爱情, 纪录, 动画, 恐怖, 悬疑, 青春, 文艺, 励志, 战争, 犯罪</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Display(Name = <span class="meta-string">"类型"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> Types? Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>View - /View/Process/PartialTest2.cshtml</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@model ZeroMovie.Models.Movie</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"tForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            @Html.LabelFor(model =&gt; model.Type, htmlAttributes: new &#123; @class = "control-label col-md-2" &#125;)</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10"</span>&gt;</span></span><br><span class="line">                @Html.EnumDropDownListFor(model =&gt; model.Type, htmlAttributes: new &#123; @class = "form-control" &#125;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-offset-2 col-md-10"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"PartialRefreshArea"</span>&gt;</span>刷新这里<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@section scripts&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        $(document).ready(function () &#123;</span><br><span class="line">            $('#tform').on('submit', function (e) &#123;</span><br><span class="line">                e.preventDefault();</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: 'post', // Form的Method</span><br><span class="line">                    url: '@Url.Action("Fetch","Process")', // Form的Action</span><br><span class="line">                    data: $('#tform').serialize(), // 序列化提交数据</span><br><span class="line">                    success: function (res) &#123;</span><br><span class="line">                        $('#PartialRefreshArea').html(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    @Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.min.js")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>View - /View/Process/MovieList.cshtml</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@model IEnumerable<span class="tag">&lt;<span class="name">ZeroMovie.Models.Movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span> <span class="attr">style</span>=<span class="string">"table-layout:fixed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            @Html.DisplayNameFor(model =&gt; model.Name)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">            @Html.DisplayNameFor(model =&gt; model.Type)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">@foreach (var item in Model) &#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            @Html.DisplayFor(modelItem =&gt; item.Name)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            @Html.DisplayFor(modelItem =&gt; item.Type)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Controller - /Controller/ProcessController.cs</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 上下文类有 DbSet&lt;Movie&gt;</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationDbContext db = <span class="keyword">new</span> ApplicationDbContext(); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">PartialTest2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Fetch2</span>(<span class="params">[Bind(Include = <span class="string">"Type"</span></span>)] Movie movie)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> model = db.Movies.ToList();</span><br><span class="line">        <span class="keyword">if</span>(movie.Type != <span class="literal">null</span>)</span><br><span class="line">            model = db.Movies.Where(p =&gt; p.Type == movie.Type).ToList();</span><br><span class="line">        <span class="keyword">return</span> PartialView(<span class="string">"MovieList"</span>, model); <span class="comment">// model的类型要与MovieList接受的类型一致</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>运行后地址栏访问/Process/PartialTest2即可</li>
</ul>
<h2 id="总结：JS大法好"><a href="#总结：JS大法好" class="headerlink" title="总结：JS大法好"></a>总结：JS大法好</h2><p>弱弱问一句垃圾代码有人要看吗：</p>
<p><a href="https://github.com/sko00o/ZeroMovie" target="_blank">传送门</a></p>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>MVC</tag>
        <tag>Razor</tag>
      </tags>
  </entry>
  <entry>
    <title>EF框架配置使用各种数据库</title>
    <url>/2017/06/04/EF%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><ul>
<li><a href="#localdb">LocalDB</a></li>
<li><a href="#sql-server">SQL Server</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#oracle">Oralce</a></li>
</ul>
<a id="more"></a>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><em>环境： Visual Studio Community 2017，Windows 10.0.15063 pro</em></p>
<ul>
<li>先新建一个ASP.NET MVC项目DbConnectPrac</li>
</ul>
<p><img src="00.png" alt="pic00"></p>
<p><img src="0.png" alt="pic0"></p>
<ul>
<li>程序包管理器控制台安装EF框架</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Package</span> EntityFramework</span><br></pre></td></tr></table></figure>
<p>  <em>PS. 如果解决方里有多个项目，默认项目注意选择DbConnectPrac</em></p>
<ul>
<li><p>Models中新建一个类</p>
<p><img src="pic1.png" alt="pic1"></p>
<p><em>Program.cs</em></p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DbConnectPrac.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Key</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Uid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(16, MinimumLength = 3)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> NickName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(16, MinimumLength = 6)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">RegularExpression(@<span class="meta-string">"^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Privilege &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Video</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Key</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Vid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(30)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Vname &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Vurl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Thumbnail &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ViewedNum &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">DataType(DataType.Date)</span>]</span><br><span class="line">        [<span class="meta">DisplayFormat(DataFormatString = <span class="meta-string">"&#123;0:yyyy-MM-dd&#125;"</span>, ApplyFormatInEditMode = true)</span>]</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> UploadTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Vtype &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Uid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">StringLength(200)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Vinfo &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Comment</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Key</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Cid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Uid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Vid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">DataType(DataType.Date)</span>]</span><br><span class="line">        [<span class="meta">DisplayFormat(DataFormatString = <span class="meta-string">"&#123;0:yyyy-MM-dd&#125;"</span>, ApplyFormatInEditMode = true)</span>]</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> CommentTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">History</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Key</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Hid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Uid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Vid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">DataType(DataType.Date)</span>]</span><br><span class="line">        [<span class="meta">DisplayFormat(DataFormatString = <span class="meta-string">"&#123;0:yyyy-MM-dd&#125;"</span>, ApplyFormatInEditMode = true)</span>]</span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> HistoryTime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>生成解决方案</li>
</ul>
<p>快捷键 Ctrl+Shift+b</p>
<ul>
<li>Controllers中新建控制器</li>
</ul>
<p><img src="pic2.png" alt="pic2"></p>
<p><img src="3.png" alt="pic3"></p>
<p>点击添加，将生成以下文件</p>
<p><img src="5.png" alt="pic5"></p>
<p><em>分别把另外几个类也创建好带视图的控制器</em></p>
<h3 id="LocalDB"><a href="#LocalDB" class="headerlink" title="LocalDB"></a>LocalDB</h3><p><em>LocalDB是VS自带的简化版SQL Server</em></p>
<ul>
<li>查看项目根目录的Web.config，发现已添加了LocalDB的相关内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"DbConnectPracContext"</span> <span class="attr">connectionString</span>=<span class="string">"Data Source=(localdb)\MSSQLLocalDB; Initial Catalog=DbConnectPracContext-20170603111224; Integrated Security=True; MultipleActiveResultSets=True; AttachDbFilename=|DataDirectory|DbConnectPracContext-20170603111224.mdf"</span> <span class="attr">providerName</span>=<span class="string">"System.Data.SqlClient"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entityFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultConnectionFactory</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">value</span>=<span class="string">"mssqllocaldb"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">parameters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultConnectionFactory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">provider</span> <span class="attr">invariantName</span>=<span class="string">"System.Data.SqlClient"</span> <span class="attr">type</span>=<span class="string">"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entityFramework</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。</li>
</ul>
<p><img src="6.png" alt="pic6"></p>
<h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h3><p><em>版本 2016 Developer edition</em></p>
<ul>
<li>在根目录的Web.config中添加SQL Server的连接字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按实际情况更改 Data Source, User ID, Password --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"MSSQLConnectContext"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">connectionString</span>=<span class="string">"Data Source=localhost; Initial Catalog=TESTDB; Persist Security Info=True; User ID=sa; Password=123"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">providerName</span>=<span class="string">"System.Data.SqlClient"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开Models/DbConnectPracContext.cs</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbConnectPracContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 修改指定使用的数据库连接</span></span><br><span class="line">  <span class="comment">//public DbConnectPracContext() : base("name=DbConnectPracContext")&#123;&#125; // LocalDB</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DbConnectPracContext</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params"><span class="string">"name=MSSQLConnectContext"</span></span>)</span> &#123;&#125; <span class="comment">// SQL Server</span></span><br><span class="line">  <span class="comment">// .....省略......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程序包管理器控制台输入</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-Migrations</span> <span class="literal">-EnableAutomaticMigrations</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。</li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p><em>版本 5.7.18</em></p>
<ul>
<li>程序包管理器控制台安装EF框架</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Install-Package MySql.Data.Entity</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看项目根目录的Web.config</p>
<p><em>更新了以下有关MySQL的内容</em></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entityFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">provider</span> <span class="attr">invariantName</span>=<span class="string">"MySql.Data.MySqlClient"</span> <span class="attr">type</span>=<span class="string">"MySql.Data.MySqlClient.MySqlProviderServices, MySql.Data.Entity.EF6, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d"</span>&gt;</span><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entityFramework</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remove</span> <span class="attr">invariant</span>=<span class="string">"MySql.Data.MySqlClient"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"MySQL Data Provider"</span> <span class="attr">invariant</span>=<span class="string">"MySql.Data.MySqlClient"</span> <span class="attr">description</span>=<span class="string">".Net Framework Data Provider for MySQL"</span> <span class="attr">type</span>=<span class="string">"MySql.Data.MySqlClient.MySqlClientFactory, MySql.Data, Version=6.9.9.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>connectionStrings中添加MySQL的连接字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"MySQLConnectContext"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">connectionString</span>=<span class="string">"server=localhost; port=3306; database=TESTDB; uid=root; password=123"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">providerName</span>=<span class="string">"MySql.Data.MySqlClient"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打开Models/DbConnectPracContext.cs完成两处修改</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Context指定mySql的配置文件</span></span><br><span class="line">[<span class="meta">DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbConnectPracContext</span> : <span class="title">DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 修改指定使用的数据库连接</span></span><br><span class="line">  <span class="comment">//public DbConnectPracContext() : base("name=DbConnectPracContext")&#123;&#125; // LocalDB</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DbConnectPracContext</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params"><span class="string">"name=MySQLConnectContext"</span></span>)</span>&#123;&#125; <span class="comment">// MySQL</span></span><br><span class="line">  <span class="comment">// .....省略......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程序包管理器控制台输入</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-Migrations</span> <span class="literal">-EnableAutomaticMigrations</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。</li>
</ul>
<p>  <em>连接MySQL查看生成的testdb表</em></p>
<p><img src="7.png" alt="pic7"></p>
<h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p><em>版本 12.2.0.1.0</em></p>
<ul>
<li>建议先创建一个新用户，否则使用默认用户可能有意想不到的问题</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用SQLPLUS登录后，连接管理员 (system_password 是你的管理员密码)</span></span><br><span class="line">CONNECT system/system_password@ORCL</span><br><span class="line"><span class="comment">-- 该版本Oracle上创建新用户名必须C##或c##开头，否则不合法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> C<span class="comment">##TESTUSER IDENTIFIED BY 123;</span></span><br><span class="line"><span class="comment">-- 创建测试用户并授权，要给DBA权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, <span class="keyword">RESOURCE</span>, DBA, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">TO</span>  C<span class="comment">##TESTUSER ;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>程序包管理器控制台安装EF框架</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Install-Package Oracle.ManagedDataAccess.EntityFramework</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查看根目录的Web.config</p>
<p><em>更新了以下有关Oracle的内容</em></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configSections</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"oracle.manageddataaccess.client"</span> <span class="attr">type</span>=<span class="string">"OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"OracleDbContext"</span> <span class="attr">providerName</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> <span class="attr">connectionString</span>=<span class="string">"User Id=oracle_user;Password=oracle_user_password;Data Source=oracle"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entityFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">provider</span> <span class="attr">invariantName</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> <span class="attr">type</span>=<span class="string">"Oracle.ManagedDataAccess.EntityFramework.EFOracleProviderServices, Oracle.ManagedDataAccess.EntityFramework, Version=6.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entityFramework</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.data</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remove</span> <span class="attr">invariant</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"ODP.NET, Managed Driver"</span> <span class="attr">invariant</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> <span class="attr">description</span>=<span class="string">"Oracle Data Provider for .NET, Managed Driver"</span> <span class="attr">type</span>=<span class="string">"Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">oracle.manageddataaccess.client</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span> <span class="attr">number</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">alias</span>=<span class="string">"SampleDataSource"</span> <span class="attr">descriptor</span>=<span class="string">"(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL))) "</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">oracle.manageddataaccess.client</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>connectionStrings中修改Oracle的连接字段的参数</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为生成的&lt;dataSources&gt;中服务名是ORCL，与我的设置相同，所以这里直接用别名SampleDataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"OracleDbContext"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">providerName</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">connectionString</span>=<span class="string">"User Id=C##TESTUSER;Password=123;Data Source=SampleDataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改Models/DbConnectPracContext.cs</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">DbConnectPrac.Models</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DbConnectPracContext</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 修改指定使用的数据库连接</span></span><br><span class="line">        <span class="comment">//public DbConnectPracContext() : base("name=DbConnectPracContext") &#123; &#125; // LocalDB</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DbConnectPracContext</span>(<span class="params"></span>) : <span class="title">base</span>(<span class="params"><span class="string">"name=OracleDbContext"</span></span>)</span> &#123; &#125; <span class="comment">// Oracle</span></span><br><span class="line">        <span class="comment">// 默认的模式名是dbo，但Oracle中不存在模式名为dbo，需要指定默认模式名</span></span><br><span class="line">      	<span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            modelBuilder.HasDefaultSchema(<span class="string">"C##TESTUSER"</span>); <span class="comment">// 默认模式名就是把你用户名大写</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// .....省略......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Oracle中不存在模式名为dbo，dbo是SQL Server数据库的，如图例。</p>
<p><img src="9.png" alt="pic9"></p>
<ul>
<li>程序包管理器控制台输入</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-Migrations</span> <span class="literal">-EnableAutomaticMigrations</span></span><br></pre></td></tr></table></figure>
<ul>
<li>运行项目进入对应的Controller你可以方便的实现增删改查(CRUD)操作。</li>
</ul>
<p><em>连接Oracle查看生成的表</em></p>
<p><img src="10.png" alt="pic10"></p>
<p><strong>最后一次测试时，发现一个BUG，如果把刚生成的表全删除，试图通过重新运行项目重新建表，会失败。这个情况只在Oracle上发生，大概官方还没注意到这个BUG。“一次性”用户真是尴尬……</strong></p>
]]></content>
      <categories>
        <category>.NET</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Database</tag>
        <tag>EntityFramework</tag>
        <tag>Oracle</tag>
        <tag>SQL Server</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>OSMC的使用</title>
    <url>/2017/01/18/OSMC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>去年某宝上买了 Raspberry Pi 2B，期间玩过一段时间的Raspbian，没有买其他配件，全当练习使用linux了。最近盯上了 OSMC，所以，要搞事情！</p>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><ul>
<li><p>Raspberry Pi 2B  </p>
<p>​<em>官方说支持全系列的Pi板子</em></p>
</li>
<li><p>32G SAMSUNG micro SDHC  </p>
<p><em>支持的SD卡可以去官方看支持列表，容量不低于8G</em></p>
</li>
<li><p>HDMI to HDMI 线</p>
<p>​<em>看需求吧，能把Pi连上电视就行</em></p>
</li>
<li><p>EDUP EP-N8508GS USB网卡</p>
<p>​<em>即插即用，支持802.11N。如果你的网线够长可以不用</em></p>
</li>
</ul>
<h2 id="刷系统"><a href="#刷系统" class="headerlink" title="刷系统"></a>刷系统</h2><p>传送门 <a href="https://osmc.tv/download/" target="_blank" rel="noopener">OSMC</a></p>
<p>你可以使用官方的安装器(支持Windows/Linux/OSX)，也可以下载镜像自己刷。</p>
<p>我选择下载镜像在win下刷入：</p>
<ul>
<li>准备<ul>
<li>SD卡 插入电脑</li>
<li>安装 <a href="https://www.sdcard.org/downloads/formatter_4/" target="_blank" rel="noopener">SD Card Formatter</a></li>
<li>安装 <a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">Win32 Disk Imager</a></li>
<li>解压下载的系统zip包</li>
</ul>
</li>
<li>操作<ul>
<li>使用 SDFormatter V4.0 格式化SD卡<ul>
<li>Drive 选中你的SD卡盘符</li>
<li>选项设置 -&gt; 逻辑大小调整 -&gt; 开启（ON）-&gt; OK -&gt; 格式化</li>
</ul>
</li>
<li>使用 Win32 Disk Imager V0.9.5 刷入系统<ul>
<li>Device 选中你的SD卡盘符</li>
<li>Image File 选中OSMC的img文件</li>
<li>选择 Write</li>
</ul>
</li>
<li>刷好SD卡插入Pi<ul>
<li>Pi 用视频线接电视，开电视，切换信号源到 HDMI</li>
<li>Pi 用microUSB接电源适配器</li>
<li>Pi 上接键盘</li>
</ul>
</li>
<li>开机配置系统……语言暂时用English(US)，联网</li>
</ul>
</li>
</ul>
<h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><ul>
<li><p>语言设置</p>
<p>Settings -&gt; Apperance -&gt; Skin -&gt; Fonts -&gt; Arial</p>
<p>Settings -&gt; Apperance -&gt; International -&gt; Language -&gt; Chinese(Simple)</p>
<p>现在就是显示中文了，下面还有些鸡肋的设置</p>
<p>设置 -&gt; 用户界面 -&gt; 字符集 -&gt; Chinese Simplified (GBK)</p>
<p>设置 -&gt; 用户界面 -&gt; 键盘布局 -&gt; 添加 Chinese BaiduPY</p>
</li>
<li><p>安装插件库</p>
<p><a href="http://dkmc.tv/2013/04/07/xbmc%E6%8F%92%E4%BB%B6%E5%BA%93%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener">传送门</a></p>
<p>使用zip包的安装方式，先在同局域网的电脑上下载</p>
<p> <a href="https://github.com/taxigps/xbmc-addons-chinese/raw/master/repo/repository.xbmc-addons-chinese/repository.xbmc-addons-chinese-1.2.0.zip" target="_blank" rel="noopener">chinese addon</a> 、<a href="http://xbmc.hdpfans.com/repository.hdpfans.xbmc-addons.zip" target="_blank" rel="noopener">hdpfans</a></p>
<p>选择插件，选择安装，按Backspace到最外层，选择zip包安装插件，选择安装刚下的两个插件。</p>
</li>
<li><p>寻找你需要的插件，安装即可。</p>
</li>
</ul>
<h2 id="使用-app-控制"><a href="#使用-app-控制" class="headerlink" title="使用 app 控制"></a>使用 app 控制</h2><p><a href="http://kodi.wiki/view/Remote_controls" target="_blank" rel="noopener">Remote Control</a></p>
<ul>
<li>Android<ul>
<li><a href="http://mirrors.kodi.tv/tools/kore/releases/" target="_blank" rel="noopener">Kore</a> <em>官方软件</em></li>
<li><a href="http://yatse.tv/redmine/projects/yatse/wiki/XbmcStarter#Download-and-install-2" target="_blank" rel="noopener">Yatse</a> <em>功能一样，<a href="https://play.google.com/store/apps/details?id=tv.yatse.android.remotestarter" target="_blank" rel="noopener">Google Play</a>上售价0.99$</em></li>
</ul>
</li>
<li>iOS<ul>
<li><a href="https://itunes.apple.com/cn/app/official-kodi-remote/id520480364?mt=8" target="_blank" rel="noopener">Official Kodi Remote</a> <em>官方软件</em></li>
</ul>
</li>
<li>WP  <em>下面摘抄自kodi.wiki</em><ul>
<li><a href="https://www.microsoft.com/store/apps/9nblggh4qvkx" target="_blank" rel="noopener">mrRemote for Kodi</a> by Domenico Rescigno (free)</li>
<li><a href="http://www.windowsphone.com/s?appid=3897b459-b11b-41eb-9cea-dd9e53c55b78" target="_blank" rel="noopener">Kodi Assist</a> by akshay2000 (free)</li>
<li><a href="http://www.windowsphone.com/s?appid=3a35a8c6-bf35-49a1-b67b-f8104be2b05c" target="_blank" rel="noopener">xbmc remote free</a> by CRW Solutions (free)</li>
<li><a href="http://kodi.wiki/view/XBMC_Maestro" target="_blank" rel="noopener">XBMC Maestro</a> by 3Webers ($0.99 USD)</li>
<li><a href="http://www.windowsphone.com/s?appid=7cdb0b87-1e00-4328-b839-43a6bf9c8556" target="_blank" rel="noopener">Kodi Remote</a> by Fabien Lavocat (free)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>OSMC</tag>
      </tags>
  </entry>
  <entry>
    <title>重装Ubuntu的配置及折腾rEFInd</title>
    <url>/2017/01/17/%E9%87%8D%E8%A3%85Ubuntu%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E6%8A%98%E8%85%BErEFInd/</url>
    <content><![CDATA[<p>为什么突然会折腾这个？因为我格盘重装了系统，因为强迫症发作，以前装得win10竟然不是EFI+GPT……虽然装固态上，启动速度没有区别，但我就是要折腾……既然折腾完了，全部过程记录下，不愿看这么多，也可以直接跳到<a href="#refind">rEFInd的配置</a>。</p>
<a id="more"></a>
<h2 id="先安装win10"><a href="#先安装win10" class="headerlink" title="先安装win10"></a>先安装win10</h2><p>用<a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">官方工具</a>做一个安装盘，bios选择中启动方式<strong>EFI Only</strong>，并开启<strong>Secure Boot</strong> 。（<em>对，网上那些辣鸡教程都TM教你关掉，但是不告诉你原因，听我的，不用关，装ubuntu也不用关，因为ubuntu申请了EFI安全证书的！</em>）</p>
<p>接着开机插入U盘，按提示安装就好，记得把分区方式改成<strong>GPT</strong>。（<em>若你之前是MBR，要么把原来分区全删掉，要么按网上教程做个EFI+MBR，反正我是强迫症，我就要格盘！</em>）</p>
<p>如何辨别是不是EFI启动呢？</p>
<p>win + R ，输入 msinfo32 ，回车，引导方式那行是 EFI 就对了。</p>
<h2 id="再安装ubuntu16-04"><a href="#再安装ubuntu16-04" class="headerlink" title="再安装ubuntu16.04"></a>再安装ubuntu16.04</h2><p>这个更简单，把官方iso镜像文件，直接解压到<strong>FAT32</strong>格式U盘的根目录，开机，进U盘，安装。到那个然要现在win下切好未分配空间，这次我切了40G。小本子有8G内存，swap分区完全不用分的。在之前我试过所有未分配空间都挂到根目录，一样用着好好的，只有一点问题，只能挂起，不能休眠。</p>
<p>那么这次的分区方案是8G的swap，剩下全挂 / 根目录。 启动器挂在ubuntu所在硬盘，我是在第二快硬盘 /dev/sdb 上。</p>
<h2 id="ubuntu配置记录"><a href="#ubuntu配置记录" class="headerlink" title="ubuntu配置记录"></a>ubuntu配置记录</h2><p><strong>先要感谢<a href="https://plumz.me/" target="_blank" rel="noopener">plum的博客</a>，看他的博客让我解决的不少问题</strong></p>
<p>既然用了一段时间的ubuntu，解决了不少问题，这里的配置与上一篇有点不同，重新记录如下：</p>
<ul>
<li>修改本地文件夹名称为英文</li>
</ul>
<blockquote>
<p>如果你安装系统时选择了中文，那么用户目录就默认是中文，带你cd目录的时候就知道多蛋疼！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line">export LANG=zh_CN</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭鼠标加速</li>
</ul>
<blockquote>
<p>Ubuntu16.04默认开启了鼠标加速，用触控板到感觉不到，用鼠标这么飘就不能忍了！</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在Dashboard里搜索:</span><br><span class="line">gnome-session-properties</span><br><span class="line">点击添加：</span><br><span class="line">名称：setmouse</span><br><span class="line">命令：xset m 0 或者 xset m default</span><br><span class="line">重启。</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 lantern </li>
</ul>
<p><em>接下来要安装软件了，我希望网络要没有阻碍，梯子是必须先装的！</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads/</span><br><span class="line">wget https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-beta-64-bit.deb</span><br><span class="line">sudo dpkg -i lantern-installer-beta-64-bit.deb</span><br></pre></td></tr></table></figure>
<p>打开lantern，进入设置，查看两个端口号，我的是：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">HTTP(S) proxy: 127.0.0.1:44045</span><br><span class="line">SOCKS proxy: 127.0.0.1:43355</span><br></pre></td></tr></table></figure>
<p>然后终端输入下面两句来全局代理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export all_proxy=socks://127.0.0.1:43355</span><br><span class="line">export ALL_PROXY=socks://127.0.0.1:43355</span><br></pre></td></tr></table></figure>
<p>如果想取消掉的话：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset all_proxy</span><br><span class="line">unset ALL_PROXY</span><br></pre></td></tr></table></figure>
<p>接着配置 lantern 的开机无界面启动</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在Dashboard里搜索:</span><br><span class="line">gnome-session-properties</span><br><span class="line">点击添加：</span><br><span class="line">名称：lantern</span><br><span class="line">命令：/usr/bin/lantern -headless</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 git</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install git -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 git 代理（http &amp; https 代理）</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:43355</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:43355</span><br></pre></td></tr></table></figure>
<ul>
<li>安装功耗控制 TLP</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tlp tlp-rdw -y</span><br><span class="line">sudo apt-get install tp-smapi-dkms acpi-call-dkms -y</span><br><span class="line">sudo apt-get install thermald -y</span><br><span class="line">sudo apt-get install powertop -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置 TLP</span></span><br><span class="line">sudo vim /etc/default/tlp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 TLP</span></span><br><span class="line">sudo tlp start</span><br></pre></td></tr></table></figure>
<ul>
<li>消除 Ubuntu LightDM 登陆界面背景白点</li>
</ul>
<blockquote>
<p>不能忍，影响我看锁屏壁纸！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gsettings set com.canonical.unity-greeter draw-grid false</span><br><span class="line">sudo xhost +SI:localuser:lightdm</span><br><span class="line">sudo su lightdm -s /bin/bash</span><br><span class="line">gsettings set com.canonical.unity-greeter draw-grid false</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 arc-flatabulous 主题</li>
</ul>
<p><em><a href="https://github.com/andreisergiu98/arc-flatabulous-theme" target="_blank" rel="noopener">Arc-Flatabulous Theme</a></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">sudo apt install autoconf automake libgtk-3-dev -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 unity-tweek-tool</span></span><br><span class="line">sudo apt install unity-tweak-tool -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方安装方式</span></span><br><span class="line">sudo rm -rf /usr/share/themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;</span><br><span class="line">rm -rf ~/.local/share/themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;</span><br><span class="line">rm -rf ~/.themes/&#123;Arc-Flatabulous,Arc-Flatabulous-Darker,Arc-Flatabulous-Dark&#125;</span><br><span class="line">git clone https://github.com/andreisergiu98/arc-flatabulous-theme &amp;&amp; cd arc-flatabulous-theme</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译安装，不想见透明效果，编译时加参数 --<span class="built_in">disable</span>-transparency</span></span><br><span class="line">./autogen.sh --prefix=/usr &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 papirus 图标主题</li>
</ul>
<p><em><a href="https://github.com/PapirusDevelopmentTeam/papirus-icon-theme" target="_blank" rel="noopener">papirus-icon-theme</a></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install wget git libqt4-svg -y </span><br><span class="line">wget -qO- https://raw.githubusercontent.com/PapirusDevelopmentTeam/papirus-icon-theme/master/install-papirus-root.sh | sh</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 Hardcode-Tray 图标修复</li>
</ul>
<blockquote>
<p>对右上角那些图标风格不统一，可以试试，但是只支持部分图标修复，这个软件蛮鸡肋的……</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:andreas-angerer89/sni-qt-patched</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install sni-qt sni-qt:i386 hardcode-tray -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 Hardcode-Tray</span></span><br><span class="line">hardcode-tray --apply</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果出现 FileNotFoundError: [Errno 2] ，建一个软链接</span></span><br><span class="line">ln -s  /usr/share/icons/ ~/.local/share/icons</span><br><span class="line">hardcode-tray --apply</span><br></pre></td></tr></table></figure>
<ul>
<li>更改鼠标指针样式</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">下载 Breeze-Hacked 并解压</span><br><span class="line">cp -a Breeze-Hacked/ /usr/share/icons/</span><br><span class="line">在 unity-tweek-tool 里更换</span><br></pre></td></tr></table></figure>
<ul>
<li>使用terminator及ZSH</li>
</ul>
<p>普通用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install terminator zsh -y</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line">vim ~/.zshrc # 添加以下内容</span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">"agnoster"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DEFAULT_USER=<span class="string">"shank"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> COMPLETION_WAITING_DOTS=<span class="string">"true"</span></span></span><br></pre></td></tr></table></figure>
<p>root用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line">vim ~/.zshrc # 添加以下内容</span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">"agnoster"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DEFAULT_USER=<span class="string">"root"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> COMPLETION_WAITING_DOTS=<span class="string">"true"</span></span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>安装PowerLine字体</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads</span><br><span class="line">git clone https://github.com/powerline/fonts</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>常规更新</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 Deluge</li>
</ul>
<p>下载工具，带有BT和磁链下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install deluge -y</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 caffeine</li>
</ul>
<p>用于暂时取消屏保和睡眠模式，用linux看视频时记得把它设为Active</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install caffeine -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 gnome-session-properties 开机启动中添加或修改Caffeine的命令为下面这句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/bin/caffeine-indicator</span></span><br></pre></td></tr></table></figure>
<ul>
<li>安装 mpv</li>
</ul>
<blockquote>
<p>简介而强大的播放器，不用VLC因为它对字幕支持不好！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mpv -y</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 flash 支持</li>
</ul>
<blockquote>
<p>B站的Html5播放器总是没速度，所以flash还是必需的！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先在设置中允许 Canonical Partners 打包的应用</span></span><br><span class="line">sudo apt install adobe-flashplugin -y</span><br></pre></td></tr></table></figure>
<ul>
<li>解决待机后重启会自动断线的 Bug</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable NetworkManager.service</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 Canonical Livepatch Service</li>
</ul>
<p><em><a href="https://www.ubuntu.com/server/livepatch" target="_blank" rel="noopener">Canonical Livepatch Service</a> 免重新开机做核心</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo snap install canonical-livepatch</span><br><span class="line">sudo canonical-livepatch enable XXX #XXX从官方获取</span><br></pre></td></tr></table></figure>
<ul>
<li>安装指纹识别支持</li>
</ul>
<blockquote>
<p>这个可以用，但是会觉得的有点烦，因为这个软件有个bug，刷指纹一定要刷两下，验证成功，还要再刷一下指纹灯才会灭，所以我已经不用了……</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fingerprint/fprint -y &amp;&amp; sudo apt-get update</span><br><span class="line">sudo apt-get install libfprint0 fprint-demo libpam-fprintd gksu -y</span><br></pre></td></tr></table></figure>
<ul>
<li>Fcitx 输入法换回原生 indicator，不用那个 qim</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove fcitx-ui-qimpanel -y</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 android studio</li>
</ul>
<p><em><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">官方链接</a>下载zip安装包</em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 jdk</span></span><br><span class="line">sudo apt install openjdk-8-jdk -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">sudo apt-get install lib32z1 lib32ncurses5 lib32stdc++6 -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决无 pixmap 问题</span></span><br><span class="line">sudo apt-get install gtk2-engines-pixbuf -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决无 adwaita 问题</span></span><br><span class="line">sudo apt-get install gnome-themes-standard gnome-themes-standard-data -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装a.s.，我习惯把a.s.装到 /opt 目录</span></span><br><span class="line">sudo unzip -q ~/Downloads/android-studio……… -d /opt # 省略号部分自己按TAB替换</span><br><span class="line">cd /opt/android-studio/bin/</span><br><span class="line">./studio.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>Firefox 字体问题 （不用改了，新版本好像解决了这个问题）</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">地址栏输入 about:config</span><br><span class="line">找到 gfx.font_rendering.fontconfig.fontlist.enabled</span><br><span class="line">设置为 false</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 typola ,本人最喜欢的 markdown 编辑器</li>
</ul>
<p><em><a href="https://typora.io/" target="_blank" rel="noopener">typola官方链接</a></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> optional, but recommended</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span><br><span class="line"><span class="meta">#</span><span class="bash"> add Typora<span class="string">'s repository</span></span></span><br><span class="line">sudo add-apt-repository 'deb https://typora.io ./linux/' -y</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> install typora</span></span><br><span class="line">sudo apt-get install typora -y</span><br></pre></td></tr></table></figure>
<h2 id="rEFInd"><a href="#rEFInd" class="headerlink" title="rEFInd"></a>rEFInd</h2><p><em><a href="http://www.rodsbooks.com/refind/configfile.html" target="_blank" rel="noopener">rEFInd官方链接</a></em></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:rodsmith/refind -y </span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install refind -y</span><br><span class="line">sudo cd /boot/eft/EFI/refind</span><br><span class="line">sudo su</span><br><span class="line">mkdir themes</span><br><span class="line">cd themes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载新主题</span></span><br><span class="line">git clone https://github.com/EvanPurkhiser/rEFInd-minimal.git</span><br><span class="line">cd ..</span><br><span class="line">cp refind.conf refind.conf.bak</span><br><span class="line">gedit refind.conf</span><br></pre></td></tr></table></figure>
<p>添加设置到文件结尾，具体看配置文件或者Google</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">resolution 1920 1080</span><br><span class="line">scan_all_linux_kernels false</span><br><span class="line">default_selection Microsoft</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入主题配置：</span></span><br><span class="line">include themes/rEFInd-minimal/theme.conf</span><br></pre></td></tr></table></figure>
<p>这个时候重启是使用不了rEFInd的，因为开了Secure Boot的缘故。那么要解决允许Secure Boot的问题，就要给他授权。官方提供的方案有 Shim 和 PreLoader，外文博客基本介绍的也是Shim。都比较麻烦，不愿看也不愿做（—。—），偶然发现了 boot-repair 。这个软件是傻瓜化修复启动引导用的，它解决安全引导的同时也会装 Shim，正好省得我动手。<br>先装 boot-repair</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure>
<p>选择推荐方案(Recommended repair)，接着都是“yes”<br>引导修复后，可以apt重装下refind，应该同时会申请 *.cer 文件<br>然后重启，和官方 Slim授权的方式一样，Select key选第一个，<br>给EFI/refind/key目录下的<strong>refind.cer</strong>和<strong>refind_local.cer</strong>文件授权，然后选择重启。</p>
<p>授权后的一些调整</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个多余启动文件</span></span><br><span class="line">rm -f /boot/efi/EFI/Boot/bkpbootx64.efi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 想要refind选择ubuntu就直接进系统，不用再显示grub2菜单</span></span><br><span class="line">vim /etc/default/grub # 修改 GRUB_TIMEOUT=0</span><br><span class="line">rm -f /etc/grub.d/30_os-prober # grub不记录win10引导</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新gurb</span></span><br><span class="line">update-grub</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>EFI</tag>
        <tag>rEFInd</tag>
      </tags>
  </entry>
  <entry>
    <title>从放弃Windows到使用IRC</title>
    <url>/2017/01/08/%E4%BB%8E%E6%94%BE%E5%BC%83Windows%E5%88%B0%E4%BD%BF%E7%94%A8IRC/</url>
    <content><![CDATA[<p>Windows 已经删了，最近都在 Ubuntu 上，不小心接触了IRC这个古老的东西，研究了一晚上，给破站加点新玩意。</p>
<a id="more"></a>
<p> 博客迁移后，聊天室已不存在。</p>
<blockquote>
<p>IRC（Internet Relay Chat的缩写，“因特网中继聊天”）是一种通过网络的即时聊天方式。</p>
</blockquote>
<p><a href="https://zh.wikipedia.org/wiki/IRC" target="_blank" rel="noopener">见Wiki</a></p>
<h2 id="讲故事"><a href="#讲故事" class="headerlink" title="讲故事"></a>讲故事</h2><ul>
<li><p>背景</p>
<p>准备好好适应使用linux来编程，趁着假期，打算完全不去碰windows，重新安装了双系统，这次仗着内存8G够用，swap分区就不要了，全部40G都挂到 / 目录上。</p>
</li>
<li><p>问题</p>
<p>觉得跟外界联系还是挺重要的，虽然QQ可以挂在手机上，但是用着linux要分享个链接什么的麻烦的要死，没法好好聊天啊。</p>
</li>
<li><p>Telegram</p>
<p>看别人用着Telegram好好的，可是到我想用时，GFW就让它失联了。而且为了找人聊天让别人在装个软件也麻烦。</p>
</li>
<li><p>IRC</p>
<p>第一次见IRC还是上次整越狱的老iTouch时，搜资料偶然发现了Kiwi IRC。正好是开源的，这次拿来练手。</p>
</li>
</ul>
<h2 id="说正事"><a href="#说正事" class="headerlink" title="说正事"></a>说正事</h2><p>其实安装过程官方给的太详细了，没什么好说的 (-_-|||</p>
<p>Kiwi的安装过程参考官方教程：</p>
<p><a href="https://kiwiirc.com/docs/installing" target="_blank" rel="noopener">传送门</a></p>
<p>务必先装好 openssl 和 openssl-dev | openssl-devel</p>
<p>参考另一款老牌IRC （UnrealIRCd）的安装，就可以理解配置文件的设置，下面推荐两个博客</p>
<p><a href="https://www.dadclab.com/archives/6007.jiecao" target="_blank" rel="noopener">博客1</a> <a href="http://soft.dog/2016/03/25/unrealircd-basic/" target="_blank" rel="noopener">博客2</a></p>
<h2 id="讲废话"><a href="#讲废话" class="headerlink" title="讲废话"></a>讲废话</h2><p>为什么我不用 UnrealIRCd 呢？因为只有一个服务端，客户端还要自己另外找。</p>
<p>Kiwi IRC 的易用在于，它把服务端和客户端整合了，在云主机上装好后，直接从端口进入客户端，直接连接另一端口的服务端。</p>
<p><del>去看看本站的聊天室吧： <a href="#missing">Chatting Room</a></del></p>
<blockquote>
<p>来自2018/10/29：“ 放弃 Windows… Steam on linux… 真香~ ”</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>IRC</tag>
      </tags>
  </entry>
  <entry>
    <title>一点数据库笔记</title>
    <url>/2017/01/03/%E4%B8%80%E7%82%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>Markdown 是个好东西，用了一段时间，这次把自己一点数据库课的笔记放上来，练习下 Markdown 。</p>
</blockquote>
<a id="more"></a>
<h1 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h1><h2 id="数据语句"><a href="#数据语句" class="headerlink" title="数据语句"></a>数据语句</h2><ul>
<li>DECLARE <em>声明若干局部变量</em></li>
<li>SET <em>一个变量赋值</em></li>
<li>SELECT <em>多个变量赋值</em></li>
<li>PRINT <em>返回用户自定义信息</em></li>
</ul>
<h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><ul>
<li><p>BEGIN END <em>语句块</em></p>
</li>
<li><p>GOTO <em>跳转到标签</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">GOTO</span> <span class="keyword">skip</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">skip</span>:</span><br><span class="line">PRINT <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>IF ELSE <em>条件判断</em></p>
</li>
<li><p>CASE <em>多分支选择</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> score,</span><br><span class="line">(<span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> score &gt; <span class="number">90</span> <span class="keyword">then</span> <span class="string">'excellent'</span></span><br><span class="line"><span class="keyword">when</span> score &gt; <span class="number">80</span> <span class="keyword">then</span> <span class="string">'good'</span></span><br><span class="line"><span class="keyword">when</span> score &gt; <span class="number">60</span> <span class="keyword">then</span> <span class="string">'ok'</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">'not well'</span></span><br><span class="line"><span class="keyword">end</span>) <span class="keyword">as</span> rate</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure>
</li>
<li><p>WHILE _循环_</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">while</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">--code here</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WAITFOR _暂停_</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WAITFOR DELAY '11:00'</span><br><span class="line">WAITFOR TIME '01:00'</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li>AVG</li>
<li>COUNT</li>
<li>MAX</li>
<li>MIN</li>
<li>SUM</li>
<li>DISTINCT</li>
</ul>
<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><ul>
<li>ABS <em>绝对值</em></li>
<li>ceiling <em>大于或等于</em></li>
<li>floor <em>小于或等于</em></li>
<li>rand <em>返回0-1的随机数</em></li>
<li>round <em>四舍五入到指定精度</em></li>
</ul>
<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul>
<li>ascii <em>第一字符的ascii值</em></li>
<li>char <em>返回ascii对应字符</em></li>
<li>charindex <em>返回匹配位置</em></li>
<li>itrim <em>去除左空格</em></li>
<li>rtrim <em>去除右空格</em></li>
<li>left <em>截断左侧指定长度字符</em></li>
<li>right <em>截断右侧指定长度字符</em></li>
<li>len <em>返回长度</em></li>
<li>lower _小写_</li>
<li>upper _大写_</li>
<li>reverse _转置_</li>
<li>replace <em>指定字符替换</em></li>
<li>space <em>指定空格数</em></li>
<li>stuff <em>替换字符串的指定范围</em></li>
<li>substring <em>返回指定范围字符串</em></li>
</ul>
<h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><ul>
<li>dateadd <em>给指定日期添加一段时间</em></li>
<li>datediff <em>两日期相减</em></li>
<li>datename <em>返回指定日期的部分</em></li>
<li>day <em>指定日期的天数</em></li>
<li>dayofyear <em>年内天数</em></li>
<li>month <em>返回日期的月份</em></li>
<li>year <em>返回日期的年份</em></li>
<li>getdate <em>返回系统时间</em></li>
<li>datepart <em>返回指定部分整数</em></li>
<li>isDate <em>检测日期有效性</em></li>
</ul>
<h1 id="语句提升"><a href="#语句提升" class="headerlink" title="语句提升"></a>语句提升</h1><h2 id="约束与规则"><a href="#约束与规则" class="headerlink" title="约束与规则"></a>约束与规则</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol>
<li>规则只允许在当前数据库创建</li>
<li>规则不能绑定到数据类型 char、 int、 image、 text 中</li>
</ol>
<ul>
<li>创建规则</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> rule 规则名</span><br><span class="line"><span class="keyword">as</span> 规则</span><br><span class="line"><span class="comment">/* 规则可以是where语句任何有效的表达式 */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>绑定规则</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line">exec sp_bindrule <span class="string">'规则名'</span>,<span class="string">'数据库表字段'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>解绑规则</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line">exec sp_unbindrule <span class="string">'数据库表字段'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除规则</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> rule <span class="string">'规则名'</span></span><br></pre></td></tr></table></figure>
<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul>
<li>添加check约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> [<span class="keyword">constraint</span> 约束名] <span class="keyword">check</span>(约束)</span><br></pre></td></tr></table></figure>
<ul>
<li>删除check约束</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> 约束名</span><br></pre></td></tr></table></figure>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol>
<li>约束和表的定义联系，删除表的同时约束也删除。规则是单独存储的数据库对象，独立于表外，删除表时并不能删除规则。</li>
<li>一个字段可有多个约束，但只能有一个规则。</li>
</ol>
<h2 id="SELECT高级查询"><a href="#SELECT高级查询" class="headerlink" title="SELECT高级查询"></a>SELECT高级查询</h2><h3 id="IN-NULL"><a href="#IN-NULL" class="headerlink" title="IN, NULL"></a>IN, NULL</h3><ul>
<li>IN <em>查询符合列表中任何一个值的记录</em></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> score <span class="keyword">in</span> (<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table2 <span class="keyword">where</span> score <span class="keyword">in</span> (<span class="keyword">select</span> score <span class="keyword">from</span> table1);</span><br></pre></td></tr></table></figure>
<ul>
<li>NULL | NOT NULL <em>字段是否为空</em></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table1 <span class="keyword">where</span> items <span class="keyword">in</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><blockquote>
<p>用于将查询结果存储到另一个表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">5</span> *</span><br><span class="line"><span class="keyword">into</span> table3</span><br><span class="line"><span class="keyword">from</span> table2;</span><br></pre></td></tr></table></figure>
<h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><blockquote>
<p>用于数据汇总</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select name,avg(age) as avg_age</span><br><span class="line">from student</span><br><span class="line">group by name;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h2><ul>
<li>子查询作为新增列 <em>作为外层select语句的列值</em></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> avg_score = (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(score)</span><br><span class="line">  <span class="keyword">from</span> score</span><br><span class="line">)<span class="keyword">from</span> score</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用IN关键字 <em>主要用于where子句后面的子查询。</em></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> a.id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> b.id</span><br><span class="line">  <span class="keyword">from</span> score <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> b.score = <span class="number">80</span></span><br><span class="line">)<span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>比较运算符</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> a.id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> b.id</span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> b.score &lt;= <span class="number">80</span></span><br><span class="line">) <span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>BETWEEN</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> a.id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> b.id </span><br><span class="line"><span class="keyword">from</span> score <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">where</span> b.score</span><br><span class="line"><span class="keyword">between</span> <span class="number">80</span> <span class="keyword">and</span> <span class="number">90</span></span><br><span class="line">) <span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure>
<ul>
<li>EXISTS</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> score</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">where</span> score = <span class="number">80</span>)</span><br><span class="line"><span class="comment">/* IN和EXISTS都代表的是子查询存在某个值，但是IN用的时候，子查询只能是一个字段，但是EXISTS可以用多个字段。 */</span></span><br></pre></td></tr></table></figure>
<h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><h3 id="JOIN…ON"><a href="#JOIN…ON" class="headerlink" title="JOIN…ON"></a>JOIN…ON</h3><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul>
<li>表A</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">sex</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">AA</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">BB</td>
<td style="text-align:center">13</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">CC</td>
<td style="text-align:center">24</td>
<td style="text-align:center">M</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">DD</td>
<td style="text-align:center">21</td>
<td style="text-align:center">F</td>
</tr>
</tbody>
</table>
<ul>
<li>表B</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">40</td>
</tr>
</tbody>
</table>
<h4 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h4><table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">snum</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">AA</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">BB</td>
<td style="text-align:center">13</td>
<td style="text-align:center">F</td>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
</tr>
</tbody>
</table>
<h4 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h4><table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">snum</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">AA</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">BB</td>
<td style="text-align:center">13</td>
<td style="text-align:center">F</td>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">CC</td>
<td style="text-align:center">24</td>
<td style="text-align:center">M</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">DD</td>
<td style="text-align:center">21</td>
<td style="text-align:center">F</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<h4 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h4><table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">score</th>
<th style="text-align:center">snum</th>
<th style="text-align:center">name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">sex</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">10</td>
<td style="text-align:center">1</td>
<td style="text-align:center">AA</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
<td style="text-align:center">2</td>
<td style="text-align:center">BB</td>
<td style="text-align:center">13</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">40</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<h4 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h4><table>
<thead>
<tr>
<th style="text-align:center">snum</th>
<th style="text-align:center">name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">sex</th>
<th style="text-align:center">snum</th>
<th style="text-align:center">score</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">AA</td>
<td style="text-align:center">12</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">BB</td>
<td style="text-align:center">13</td>
<td style="text-align:center">F</td>
<td style="text-align:center">2</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">CC</td>
<td style="text-align:center">24</td>
<td style="text-align:center">M</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">DD</td>
<td style="text-align:center">21</td>
<td style="text-align:center">F</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">null</td>
<td style="text-align:center">5</td>
<td style="text-align:center">40</td>
</tr>
</tbody>
</table>
<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><blockquote>
<p>拼接字段相同的表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">as</span> b</span><br></pre></td></tr></table></figure>
<h3 id="数据操纵进阶"><a href="#数据操纵进阶" class="headerlink" title="数据操纵进阶"></a>数据操纵进阶</h3><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><h3 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table2</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,sex,phone,email</span><br><span class="line"><span class="keyword">from</span> table2</span><br></pre></td></tr></table></figure>
<h3 id="select-…-into"><a href="#select-…-into" class="headerlink" title="select … into"></a>select … into</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> table1 <span class="keyword">from</span> table2</span><br></pre></td></tr></table></figure>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><h3 id="基于级联"><a href="#基于级联" class="headerlink" title="基于级联"></a>基于级联</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> table1.c = table2.c</span><br><span class="line"><span class="keyword">from</span> table1 <span class="keyword">inner</span> <span class="keyword">join</span> table2</span><br><span class="line"><span class="keyword">on</span> table1.a = table2.a</span><br><span class="line"><span class="keyword">where</span> table1.c <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h3 id="带有output"><a href="#带有output" class="headerlink" title="带有output"></a>带有output</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询新行的属性</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1(a) <span class="keyword">output</span> inserted.a <span class="keyword">values</span>(<span class="string">'123'</span>)</span><br><span class="line"><span class="comment">-- 查询旧行的属性</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">into</span> table1 <span class="keyword">output</span> deleted.a <span class="keyword">where</span> a = <span class="string">'123'</span></span><br><span class="line"><span class="comment">-- 返回修改后的值</span></span><br><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> a = <span class="string">'b'</span> <span class="keyword">output</span> inserted.a <span class="keyword">where</span> a = <span class="string">'123'</span></span><br><span class="line"><span class="comment">-- 返回修改前的值</span></span><br><span class="line"><span class="keyword">update</span> table1 <span class="keyword">set</span> a = <span class="string">'b'</span> <span class="keyword">output</span> deleted.a wherer a = <span class="string">'123'</span></span><br></pre></td></tr></table></figure>
<h1 id="视图、索引、触发器"><a href="#视图、索引、触发器" class="headerlink" title="视图、索引、触发器"></a>视图、索引、触发器</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul>
<li>创建视图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span>语句</span><br></pre></td></tr></table></figure>
<ul>
<li>视图结果集排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stu1</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">3</span> * <span class="keyword">from</span> table2</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br></pre></td></tr></table></figure>
<ul>
<li>多张表进行视图查询</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> stu2</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> b.score,b.name,a.name,sex,age</span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">score <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.id = b.id</span><br></pre></td></tr></table></figure>
<ul>
<li>修改视图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span>语句</span><br></pre></td></tr></table></figure>
<ul>
<li>删除视图</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名</span><br></pre></td></tr></table></figure>
<h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ol>
<li>视图可以对基本表的数据进行查询，还可以向基本表增删改</li>
<li>select 子句不可用聚合函数</li>
<li>不能包含算式表达式结果的列</li>
<li>视图引用多表，无法使用delete</li>
</ol>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>通过创建唯一索引，可以保证数据记录的唯一性。</li>
<li>可以大大加快数据检索速度。</li>
<li>可以加速表与表之间的连接，这一点在实现数据的参照完整性方面有特别的意义。</li>
<li>在使用order by和group by子句中进行检索数据时，可以显著减少查询中分组和排序的时间。</li>
<li>使用索引可以在检索数据的过程中使用优化隐藏，提高系统性能。</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>创建索引要花费时间和占用存储空间。</li>
<li>建立索引加快了数据检索速度，但是减慢了数据修改速度。</li>
</ol>
<h3 id="不应创建索引列的情况"><a href="#不应创建索引列的情况" class="headerlink" title="不应创建索引列的情况"></a>不应创建索引列的情况</h3><ol>
<li>很少或从来不在查询中引用的列，因为系统很少或从来不根据这个列的值去查找数据行。</li>
<li>只有两个或很少几个值的列，例如性别。</li>
<li>以bit、text、image数据类型定义的列。</li>
<li>数据行输很少的表一般也没有必要创建索引。</li>
</ol>
<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="DML触发器"><a href="#DML触发器" class="headerlink" title="DML触发器"></a>DML触发器</h3><ul>
<li>after触发器 <em>记录改变后才激活触发器</em></li>
</ul>
<blockquote>
<p>after触发器包括 insert、delete、update触发器</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">after <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="comment">/* process */</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>
<ul>
<li>instead of 触发器 <em>直接执行触发器，不执行sql语句</em></li>
</ul>
<blockquote>
<p>instead of 触发器包括insert、delete、update触发器</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">instead of <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span>;</span><br><span class="line"><span class="comment">/* process */</span></span><br><span class="line">if @age &gt; 25</span><br><span class="line">print 'Too old!'</span><br><span class="line">else</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(<span class="keyword">name</span>,age) <span class="keyword">values</span>(@<span class="keyword">name</span>,@age)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>iPod touch 上搭建开发环境</title>
    <url>/2017/01/01/iPod%20touch%20%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老touch在抽屉里躺了好几年，偶然把它翻出来，这么一个PDA，现在顶多用来听歌，怪可惜的，好像用它搞事情啊。</p>
<h1 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h1><p>闲来无事google了一下”iTouch c++”，发现一个大神的博客</p>
<p><a href="http://blog.csdn.net/jackjones86/article/details/41802515" target="_blank">博客传送门</a></p>
<p>这么详细的教程，妥妥的要动手试一试啊。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>抄别人的没意思，自己又不愿写，毕竟大神写得太完整了！</p>
<p>虽然有些小问题，我就说说我碰到的问题:</p>
<ul>
<li><p>测试 nic 时，输入nic提示没有找到perl</p>
<p><em>解决：估计是版本升级后安装位置改了，为了不影响老的配置文件，直接建个软链接解决问题</em></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/perl /usr/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试mysql时，我在设置里找半天没看到mysql</p>
<p><em>解决：原来博客未提到要装mysql，直接在cydia里搜索安装就好</em></p>
</li>
</ul>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="IMG_0001.png" alt="IMG_0001"></p>
<p><img src="IMG_0002.png" alt="IMG_0002"></p>
<p><img src="IMG_0003.png" alt="IMG_0003"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>轻量级webserver</li>
</ul>
<p>话说在cydia里搜索”mysql”时，看到还有个搜索结果 “touch-lighttpd-php-mysql”，这个玩意有趣了，轻量级的webserver整合，有了它，可以在touch里搭个wordpress了，哈哈。<br>安装好插件，浏览器访问touch的ip，精简的”is works”页面……<br><img src="20170101133551.jpg" alt="20170101133551"></p>
<p>然后装wordpress我就不在这谈了，直接上结果<br><img src="20170101133908.jpg" alt="20170101133908"></p>
<p>但是装好的wordpress遇到点小问题，进入”仪表盘”会出现 服务器500 错误，这个貌似是内存不足，唉~touch的硬伤，写文章是没有问题的，所以不管了。</p>
<ul>
<li>apt 工具</li>
</ul>
<p>按照博客装了 apt 的插件后，装其他插件完全可以向用 linux 一样爽啊<br>但是同样遇到一个小问题，我使用 “sudo apt-get install XXX” 安装软件时，出现了 “segmentation fault 11…”<br>google了一番，解决方案是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/cache/apt/*.bin</span><br></pre></td></tr></table></figure>
<p>再推荐大家装些常用插件，内容见另一篇的博客</p>
<p><a href="http://m.blog.csdn.net/article/details?id=50855627" target="_blank">博客传送门</a></p>
<h1 id="最后感谢-iOS-Jailbreak"><a href="#最后感谢-iOS-Jailbreak" class="headerlink" title="最后感谢 iOS Jailbreak"></a>最后感谢 iOS Jailbreak</h1><p><a href="https://www.reddit.com/r/jailbreak/" target="_blank">iOS Jailbreak</a></p>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>将UWP应用部署到其他win10设备</title>
    <url>/2016/12/20/%E5%B0%86UWP%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E5%85%B6%E4%BB%96win10%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>老夫有台VenuePro8，系统是win10，所以想把它作为UWP测试机，一直不知道怎么把应用部署到平板上。</p>
<a id="more"></a>
<p>最近才发现，原来vs2015早就有这个功能了，下面来讲一讲具体的操作。</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><ul>
<li>首先在开发机上打开vs2015，打开项目</li>
<li>视线先切换到win10平板，cmd -&gt; ipconfig 默默记下它的ip，打开设置 -&gt; 更新和安全 -&gt; 针对开发者 -&gt; 打开“设备发现”<br><img src="4.png" alt="4"></li>
<li>接着出现一个配对按钮，点击。默默记下PIN码。<br><img src="5.png" alt="5"></li>
<li>视线切回开发机，右键vs菜单栏底部，勾上“标准”（默认那个是勾上的……）<br><img src="20161220121241.jpg" alt="20161220121241"></li>
<li>选择你需要的解决方案平台，然后部署设备切换到远程计算机<br><img src="snipaste20161220_115218.png" alt="snipaste20161220_115218"></li>
<li>输入平板的ip，再点击“选择”。<br><img src="snipaste20161220_115923.png" alt="snipaste20161220_115923"></li>
<li>Ctrl+F5，开始执行项目。</li>
<li>编译过程中会弹出对话框，要求输入另一台主机的PIN，输入上面的找到的PIN即可。<br> <img src="snipaste20161220_120059.png" alt="snipaste20161220_120059"></li>
<li>然后你的UWP项目就会在你的平板上安装了。(-_-||) 请无视我的low逼课程表UWP……<br> <img src="snipaste20161220_123214.png" alt="snipaste20161220_123214"></li>
</ul>
]]></content>
      <categories>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>UWP</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++】时间片轮转算法模拟</title>
    <url>/2016/11/20/%E3%80%90C++%E3%80%91%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E7%AE%97%E6%B3%95%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<p>就一个链式队列实现进程控制块的扔来扔去</p>
<a id="more"></a>
<ul>
<li><em>主要代码</em></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">256</span>]; <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">int</span> ArriveTime; <span class="comment">//到达时间</span></span><br><span class="line">    <span class="keyword">int</span> ServeTime; <span class="comment">//服务时间</span></span><br><span class="line">    <span class="keyword">int</span> cpuTime; <span class="comment">//cpu执行时间</span></span><br><span class="line">    <span class="keyword">char</span> status; <span class="comment">//进程状态 C-Coming, W-Wait, R-Run, F-Finish</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pcb</span> *<span class="title">next</span>;</span> <span class="comment">//向下一个pcb</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> finishTime; <span class="comment">//完成时间</span></span><br><span class="line">    <span class="keyword">int</span> RoundTime; <span class="comment">//周转时间</span></span><br><span class="line">    <span class="keyword">double</span> WRoundTime; <span class="comment">//带权周转时间</span></span><br><span class="line">&#125;*PCB;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkPCB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PCB Front;</span><br><span class="line">    PCB Rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pTime; <span class="comment">//时间片大小</span></span><br><span class="line"><span class="keyword">int</span> now; <span class="comment">//时间线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPCB</span><span class="params">(pcb* k)</span></span>; <span class="comment">//打印pcb</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTitle</span><span class="params">()</span></span>; <span class="comment">//打印表头</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkPCB</span><span class="params">(LinkPCB* k)</span></span>; <span class="comment">//打印pcb队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkPCB* p)</span></span>; <span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkPCB* p)</span></span>; <span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(LinkPCB* p, pcb* e)</span></span>; <span class="comment">//入队，将e入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkPCB* p, pcb* e)</span></span>; <span class="comment">//出队，出队到e</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FromA2B</span><span class="params">(LinkPCB* a, LinkPCB* b, <span class="keyword">char</span> st)</span></span>; <span class="comment">//出队列a，进队列b，改变状态为st</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkPCB* head)</span></span>; <span class="comment">//创建pcb列表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(LinkPCB* head)</span></span>; <span class="comment">//队列测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RoundRobin</span><span class="params">(LinkPCB *head)</span></span>; <span class="comment">//时间片轮转调度模拟</span></span><br><span class="line"></span><br><span class="line">LinkPCB HEAD;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    create(&amp;HEAD);</span><br><span class="line">    RoundRobin(&amp;HEAD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><em>函数实现</em></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPCB</span><span class="params">(pcb* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\t%c\t%d\t%d\n"</span>, k-&gt;Name, k-&gt;status, k-&gt;ServeTime, k-&gt;cpuTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTitle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"name\tstatus\tserve\tcpu\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkPCB</span><span class="params">(LinkPCB* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcb* p = k-&gt;Front-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintPCB(p);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkPCB* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p-&gt;Front = p-&gt;Rear = <span class="keyword">new</span> pcb;</span><br><span class="line">    p-&gt;Front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;Rear-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkPCB* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;Front == p-&gt;Rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(LinkPCB* p, pcb* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e)</span><br><span class="line">    &#123;</span><br><span class="line">        e-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;Rear-&gt;next = e;</span><br><span class="line">        p-&gt;Rear = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkPCB* p, pcb* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;Rear == p-&gt;Front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    pcb* top = p-&gt;Front-&gt;next;</span><br><span class="line">    *e = *top; <span class="comment">// important</span></span><br><span class="line">    p-&gt;Front-&gt;next = top-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;Rear == top)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;Rear = p-&gt;Front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FromA2B</span><span class="params">(LinkPCB* a, LinkPCB* b, <span class="keyword">char</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pcb* p = <span class="keyword">new</span> pcb;</span><br><span class="line">    DeQueue(a, p);</span><br><span class="line">    p-&gt;status = st;</span><br><span class="line">    EnQueue(b, p);</span><br><span class="line">    <span class="keyword">switch</span> (st)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'W'</span>: <span class="built_in">cout</span> &lt;&lt; p-&gt;Name &lt;&lt; <span class="string">" is waiting\ttime: "</span> &lt;&lt; now &lt;&lt; <span class="string">"\n"</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'R'</span>: <span class="built_in">cout</span> &lt;&lt; p-&gt;Name &lt;&lt; <span class="string">" is running\ttime: "</span> &lt;&lt; now &lt;&lt; <span class="string">"\n"</span>; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;Name &lt;&lt; <span class="string">" is finish\ttime: "</span> &lt;&lt; now &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        p-&gt;finishTime = now;</span><br><span class="line">        p-&gt;RoundTime = p-&gt;finishTime-p-&gt;ArriveTime;</span><br><span class="line">        p-&gt;WRoundTime = <span class="number">1.0</span>*p-&gt;RoundTime/p-&gt;ServeTime;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">"......"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(LinkPCB* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitQueue(head);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入时间片大小："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pTime;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入要创建的进程数："</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pcb* ft = head-&gt;Front-&gt;next;</span><br><span class="line">        pcb* p = <span class="keyword">new</span> pcb; <span class="comment">// important</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入第%d个进程的“ 进程名 到达时间 服务时间” （以空格隔开）"</span>, i);</span><br><span class="line">        <span class="keyword">char</span> Name[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> Atime, Stime;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; Name &gt;&gt; Atime &gt;&gt; Stime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Atime &gt;= <span class="number">0</span> &amp;&amp; Stime &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(p-&gt;Name, Name);</span><br><span class="line">            p-&gt;ArriveTime = Atime;</span><br><span class="line">            p-&gt;ServeTime = Stime;</span><br><span class="line">            p-&gt;cpuTime = <span class="number">0</span>;</span><br><span class="line">            p-&gt;status = <span class="string">'C'</span>;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// sort</span></span><br><span class="line">            <span class="keyword">if</span> (ft == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                EnQueue(head, p);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;ArriveTime &lt; ft-&gt;ArriveTime)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = ft;</span><br><span class="line">                head-&gt;Front-&gt;next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pcb* a = ft;</span><br><span class="line">                pcb* b = a-&gt;next;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (p-&gt;ArriveTime &lt; b-&gt;ArriveTime)</span><br><span class="line">                    &#123;</span><br><span class="line">                        p-&gt;next = b;</span><br><span class="line">                        a-&gt;next = p;</span><br><span class="line">                        b = <span class="literal">NULL</span>;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        a = a-&gt;next;</span><br><span class="line">                        b = b-&gt;next;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    EnQueue(head, p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入错误,请重输!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// PrintLinkPCB(head);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(LinkPCB* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitQueue(head);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1.EnQueue 2.DeQueue 3.Print"</span>;</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">        pcb* p = <span class="keyword">new</span> pcb;</span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"input: name atime stime"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">char</span> Name[<span class="number">256</span>];</span><br><span class="line">            <span class="keyword">int</span> Atime, Stime;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; Name &gt;&gt; Atime &gt;&gt; Stime;</span><br><span class="line">            <span class="built_in">strcpy</span>(p-&gt;Name, Name);</span><br><span class="line">            p-&gt;ArriveTime = Atime;</span><br><span class="line">            p-&gt;ServeTime = Stime;</span><br><span class="line">            p-&gt;cpuTime = <span class="number">0</span>;</span><br><span class="line">            p-&gt;status = <span class="string">'W'</span>;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            EnQueue(head, p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> (DeQueue(head, p))</span><br><span class="line">                PrintPCB(p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            PrintLinkPCB(head);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RoundRobin</span><span class="params">(LinkPCB *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkPCB *ready = <span class="keyword">new</span> LinkPCB;</span><br><span class="line">    LinkPCB *run = <span class="keyword">new</span> LinkPCB;</span><br><span class="line">    LinkPCB *finish = <span class="keyword">new</span> LinkPCB;</span><br><span class="line">    InitQueue(ready);</span><br><span class="line">    InitQueue(run);</span><br><span class="line">    InitQueue(finish);</span><br><span class="line"></span><br><span class="line">    now = head-&gt;Front-&gt;next-&gt;ArriveTime; <span class="comment">//开始时刻</span></span><br><span class="line">    FromA2B(head, ready, <span class="string">'W'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(isEmpty(head) &amp;&amp; isEmpty(ready)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Tnow = now; <span class="comment">//备份开始时刻</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!isEmpty(head))</span><br><span class="line">        &#123;</span><br><span class="line">            pcb* t = head-&gt;Front-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (now &gt;= t-&gt;ArriveTime)</span><br><span class="line">            &#123;</span><br><span class="line">                FromA2B(head, ready, <span class="string">'W'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isEmpty(ready))</span><br><span class="line">        &#123;</span><br><span class="line">            FromA2B(ready, run, <span class="string">'R'</span>);</span><br><span class="line">            pcb* p = run-&gt;Front-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;ServeTime - p-&gt;cpuTime &lt;= pTime) <span class="comment">//时间片内完成</span></span><br><span class="line">            &#123;</span><br><span class="line">                now += p-&gt;ServeTime - p-&gt;cpuTime;</span><br><span class="line">                p-&gt;cpuTime = p-&gt;ServeTime;</span><br><span class="line">                FromA2B(run, finish, <span class="string">'F'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                now += pTime;</span><br><span class="line">                p-&gt;cpuTime += pTime;</span><br><span class="line">                FromA2B(run, ready, <span class="string">'W'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Tnow == now) <span class="comment">//若没发生轮转，时间继续推移</span></span><br><span class="line">        &#123;</span><br><span class="line">            now++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PrintTitle();</span><br><span class="line">        PrintLinkPCB(head);</span><br><span class="line">        PrintLinkPCB(run);</span><br><span class="line">        PrintLinkPCB(ready);</span><br><span class="line">        PrintLinkPCB(finish);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"time: "</span> &lt;&lt; now &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// result</span></span><br><span class="line">    pcb* p = finish-&gt;Front-&gt;next;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Result:\n"</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Name: %s\tFinishtime: %d\tRoundtime: %d\twRoundtime: %.2f\n"</span>, p-&gt;Name, p-&gt;finishTime, p-&gt;RoundTime, p-&gt;WRoundTime);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>System</tag>
        <tag>Round Robin</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Terminator &amp; ZSH的配置</title>
    <url>/2016/10/01/%E4%BD%BF%E7%94%A8%20Terminator%20%20&amp;%20ZSH%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p> 在别人博客里看到 Terminator 挺好用的，特别是和zsh搭配真是漂亮，这里总结下怎么弄吧。</p>
<a id="more"></a>
<h2 id="安装-Terminator"><a href="#安装-Terminator" class="headerlink" title="安装 Terminator"></a>安装 Terminator</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install terminator</span><br></pre></td></tr></table></figure>
<ul>
<li><em>利用 Debian 的重新配置命令选择默认终端：</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config x-terminal-emulator</span><br></pre></td></tr></table></figure>
<ul>
<li><em>非ubuntu系统设置terminator快捷键</em></li>
</ul>
<p>Setting -&gt; Keyboard -&gt; Shortcuts -&gt; Custom Shortcuts -&gt; add(+)<br>Name : Terminal<br>Command : /usr/bin/terminator<br>Apply<br>Click “Disable”<br>press Ctrl + Alt + T</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/* 打开Terminator ，进行如下操作 */</span><br><span class="line">Preferenvces -&gt; General</span><br><span class="line">Disable ‘Show titlebar’</span><br><span class="line">Preferenvces -&gt; Profiles -&gt; Colors -&gt; Foreground and Background -&gt; Build-in schemes</span><br><span class="line">Choose ‘Solarized dark’</span><br></pre></td></tr></table></figure>
<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>
<ul>
<li><em>设置当前用户使用zsh</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h2 id="安装-on-my-zsh"><a href="#安装-on-my-zsh" class="headerlink" title="安装 on my zsh"></a>安装 on my zsh</h2><ul>
<li><em>自动安装：(推荐)</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>
<ul>
<li><em>手动安装：</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>
<h2 id="安装powerline字体"><a href="#安装powerline字体" class="headerlink" title="安装powerline字体"></a>安装powerline字体</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts</span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<p>然后在终端中使用powerline字体</p>
<h2 id="编辑：-zshrc"><a href="#编辑：-zshrc" class="headerlink" title="编辑： ~/.zshrc"></a>编辑： ~/.zshrc</h2><ul>
<li><em>增加自己的用户名：</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">DEFAULT_USER=<span class="string">"Shank"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS：上面 Shank 替换成你当前的用户名，用whoami查看你的用户名</p>
</blockquote>
<ul>
<li><em>修改主题：</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>启用几个功能：</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">COMPLETION_WAITING_DOTS=<span class="string">"true"</span></span><br></pre></td></tr></table></figure>
<h3 id="或者用以下简单粗暴的方式屏蔽zsh中的用户名"><a href="#或者用以下简单粗暴的方式屏蔽zsh中的用户名" class="headerlink" title="或者用以下简单粗暴的方式屏蔽zsh中的用户名"></a>或者用以下简单粗暴的方式屏蔽zsh中的用户名</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes</span><br><span class="line">sudo vim 当前主题名称</span><br></pre></td></tr></table></figure>
<p>找到最下面对<code>build_prompt</code>的定义，把<code>prompt_context</code>用<code>#</code>注释掉即可</p>
<blockquote>
<p>来自2018/10/29：“以前的自己 Markdown 写得这么烂还敢贴出来。”</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminator</tag>
        <tag>ZSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkpad X250 安装ubuntu16.04.1LTS 的记录</title>
    <url>/2016/10/01/Thinkpad%20X250%20%E5%AE%89%E8%A3%85ubuntu16.04.1LTS%20%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>X250 上有两块硬盘，sda有win10，sdb一直坐为数据盘，打算安装一个ubuntu16.04.01LTS。<br>因为轻度使用所以sdb上切20G的分区给ubuntu，压缩卷后不需要新建分区。<br>U盘制作ubuntu安装盘，开机启动到U盘。</p>
<a id="more"></a>
<p>安装时，对空闲20G手动分区 ：</p>
<table>
<thead>
<tr>
<th style="text-align:left">分区类型</th>
<th style="text-align:left">挂载点</th>
<th style="text-align:left">大小</th>
<th style="text-align:left">位置</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">主分区</td>
<td style="text-align:left">/boot</td>
<td style="text-align:left">400M</td>
<td style="text-align:left">起始</td>
</tr>
<tr>
<td style="text-align:left">逻辑区</td>
<td style="text-align:left">/</td>
<td style="text-align:left">15000M</td>
<td style="text-align:left">起始</td>
</tr>
<tr>
<td style="text-align:left">逻辑区</td>
<td style="text-align:left">swap</td>
<td style="text-align:left">512M</td>
<td style="text-align:left">末尾</td>
</tr>
<tr>
<td style="text-align:left">逻辑区</td>
<td style="text-align:left">/home</td>
<td style="text-align:left">剩余所有</td>
<td style="text-align:left">起始</td>
</tr>
</tbody>
</table>
<p>因为我不希望ubuntu覆盖我的windows引导，所以启动选择器 sdb<br>（因为内存有8G，交换空间就不分那么多了。启动选择在第二快盘，就不会覆盖win的引导，倒时开机bios改下硬盘启动顺序就行了。<br>我可能随时会把ubuntu的分区格掉，毕竟ssd空间有限，到时候不至于用easybcd或者PE重做引导）<br>安装完成后，重启。</p>
<p><strong>安装burg，美化开机选择界面：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:n-muench/burg &amp;&amp; sudo apt-get update</span><br><span class="line">sudo apt-get install burg burg-themes burg-emu</span><br></pre></td></tr></table></figure>
<p>安装过程可以一路回车，注意在Configuring burg-pc时选择sdb。<br>更换burg themes ，下载Lightness BURG Theme by SWOriginal<br>解压后cp到/boot/burg/themes里。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-burg</span><br><span class="line">gedit /boot/burg/burg.cfg</span><br></pre></td></tr></table></figure>
<p>删除一个recoverymode引导，提前win引导项<br>sudo burg-emu -&gt; F2 -&gt; 选择Lightness<br>(每次grub更新后都要重置burg sudo burg-install /dev/sdx )</p>
<p><strong>安装指纹识别fingerprint：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fingerprint/fprint &amp;&amp; sudo apt-get update</span><br><span class="line">sudo apt-get install libfprint0 fprint-demo libpam-fprintd gksu</span><br></pre></td></tr></table></figure>
<p>在 “系统设置” -&gt; “用户账户” 里会多一个 “指纹登录”，照着提示进行设置就可以了。</p>
<p><strong>关闭鼠标加速：</strong><br>在Dashboard里搜索:<br>gnome-session-properties<br>点击添加：<br>名称：setmouse<br>命令：xset m 0 或者 xset m default<br>重启。</p>
<p><strong>安装TLP电源管理：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tlp tlp-rdw</span><br><span class="line">sudo apt-get install tp-smapi-dkms acpi-call-dkms</span><br><span class="line">sudo apt-get install thermald</span><br><span class="line">sudo apt-get install powertop</span><br></pre></td></tr></table></figure>
<p>配置 TLP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/tlp</span><br><span class="line">sudo tlp start</span><br></pre></td></tr></table></figure>
<p><strong>使用 terminator <a href="/2016/10/01/使用%20Terminator%20%20&amp;%20ZSH的配置/">替换默认终端以及使用zsh</a></strong> (另外写一篇介绍这个)</p>
<p><strong>安装Arc GTK主题：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /' &gt;&gt; /etc/apt/sources.list.d/arc-theme.list"</span><br><span class="line">wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.key</span><br><span class="line">sudo apt-key add - &lt; Release.key</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install arc-theme</span><br></pre></td></tr></table></figure>
<p>安装Unity Tweak Tool管理主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install unity-tweak-tool</span><br></pre></td></tr></table></figure>
<p>个人觉得Arc-darker 好看，更换之。</p>
<p><strong>安装Deadbeef，播放更多音频：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:starws-box/deadbeef-player</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install deadbeef</span><br></pre></td></tr></table></figure>
<p><strong>安装MPV播放器：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mpv</span><br></pre></td></tr></table></figure>
<p><strong>安装cherrytree笔记本：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cherrytree</span><br></pre></td></tr></table></figure>
<p><strong>安装lantern翻墙：</strong><br><a href="https://github.com/getlantern/forum/issues/833" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminator</tag>
        <tag>ZSH</tag>
      </tags>
  </entry>
  <entry>
    <title>闲来无事，做个课表UWP练练手</title>
    <url>/2016/08/30/%E9%97%B2%E6%9D%A5%E6%97%A0%E4%BA%8B%EF%BC%8C%E5%81%9A%E4%B8%AA%E8%AF%BE%E8%A1%A8UWP%E7%BB%83%E7%BB%83%E6%89%8B/</url>
    <content><![CDATA[<blockquote>
<p>→_→ 为什么我总是这么闲……</p>
</blockquote>
<a id="more"></a>
<p>正好学了一段时间UWP，我觉得我可以做一个自己用啊。<br>目前是自用版本，等我写好爬虫和教务登录，试试放到微软商店怎样？</p>
<p><img src="20160830173641.jpg" alt="20160830173641"></p>
<p><del>尽管很low，但还是放自己网站上秀一下吧。<br><a href="https://github.com/sko00o/ClassSchedule" target="_blank" rel="noopener">git@github.com:sko00o/ClassSchedule.git</a></del> 辣鸡代码别秀了</p>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>好闲啊</tag>
        <tag>课表</tag>
      </tags>
  </entry>
  <entry>
    <title>沙雕黑历史</title>
    <url>/2016/04/17/%E5%A4%AA%E4%B9%85%E4%B8%8D%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%88%91%E9%83%BD%E5%BF%AB%E5%BF%98%E4%BA%86%E8%BF%99%E4%B8%AA%E7%AB%99%E7%82%B9%E4%BA%86/</url>
    <content><![CDATA[<p>做了一段视频来恶搞我的室友<code>凯子</code>同学，插进来看看效果</p>
<a id="more"></a>
<iframe height="100" src="http://player.youku.com/embed/XMTUzODQyMjM1Mg==" frameborder="0"></iframe>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title>画一个微软标志</title>
    <url>/2015/12/14/%E7%94%BB%E4%B8%80%E4%B8%AA%E5%BE%AE%E8%BD%AF%E6%A0%87%E5%BF%97/</url>
    <content><![CDATA[<p><img src="20151209232926.png" alt="img"></p>
<a id="more"></a>
<p>闲来无事，玩了会CSS，所以画一个<del>微软标志展示我的信仰</del>信仰田牌</p>
<ul>
<li><p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"use.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>画一个微软标志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Microsoft<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zz"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"s4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>use.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@CHARSET</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="selector-id">#icon</span>&#123;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line"> <span class="attribute">width</span>:<span class="number">1500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line"> <span class="attribute">line-height</span>:<span class="number">420px</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">340px</span>;</span><br><span class="line"> <span class="attribute">float</span>: right;</span><br><span class="line"> <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>! important; </span><br><span class="line"> <span class="attribute">font-weight</span>:bold;</span><br><span class="line"> <span class="attribute">letter-spacing</span>: -<span class="number">10px</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">119</span>,<span class="number">119</span>,<span class="number">119</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zz</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">420px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s1</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">243</span>,<span class="number">100</span>,<span class="number">34</span>);</span><br><span class="line"> <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s2</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">141</span>,<span class="number">197</span>,<span class="number">62</span>);</span><br><span class="line"> <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s3</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">173</span>,<span class="number">239</span>);</span><br><span class="line"> <span class="attribute">float</span>: left;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.s4</span> &#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">195</span>,<span class="number">13</span>);</span><br><span class="line"> <span class="attribute">float</span>: right;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><del>现在是2018年，再看此文，感觉当年真傻逼……</del><br>  ​</p>
<blockquote>
<p>来自2018/10/29：“是啊，真幼稚。”</p>
</blockquote>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>扯淡</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇就谈谈这个吧</title>
    <url>/2015/12/01/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%B0%B1%E8%B0%88%E8%B0%88%E8%BF%99%E4%B8%AA%E5%90%A7/</url>
    <content><![CDATA[<blockquote>
<p>当前博客放在 Github Page 与本文无关 <em>旧博客已删除，本文仅作记录</em></p>
</blockquote>
<a id="more"></a>
<h1 id="这网站怎么建的"><a href="#这网站怎么建的" class="headerlink" title="这网站怎么建的"></a><del>这网站怎么建的</del></h1><p><em>准备好云空间和域名云解析，Xshell 和 Xftp</em><br><em>本站运行于CentOS 7，使用阿里云ecs</em><br><em>用ssh客户端(xshell,putty等)连接你的服务器，root下执行以下命令行操作：</em></p>
<h2 id="安装mqsql-（mariadb）、apache、php"><a href="#安装mqsql-（mariadb）、apache、php" class="headerlink" title="安装mqsql （mariadb）、apache、php"></a>安装mqsql （mariadb）、apache、php</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb-client</span><br><span class="line">yum install httpd httpd-devel</span><br><span class="line">yum install php php-devel php-mysql /</span><br><span class="line">php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc</span><br></pre></td></tr></table></figure>
<h2 id="重设mysql-root用户密码"><a href="#重设mysql-root用户密码" class="headerlink" title="重设mysql root用户密码"></a>重设mysql root用户密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password 'PASSWORD'</span><br></pre></td></tr></table></figure>
<h2 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p # 新建一个wordpress的数据库</span><br></pre></td></tr></table></figure>
<h2 id="配置-wordpress"><a href="#配置-wordpress" class="headerlink" title="配置 wordpress"></a>配置 wordpress</h2><p><em>使用ftp上传wordpress到 /var/www/html/ 并解压</em><br><em>根据readme.html 中的说明配置 wordpress</em></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在wordpress管理页面直接搜索插件安装即可</p>
<ul>
<li><p>Useso take over Google<br><em>替换所有的Google字体、谷歌JS公用库、Gravatar头像的源(解决页面访问慢的问题，必装！)</em></p>
</li>
<li><p>JP Markdown<br><em>使页面支持Markdown，Markdown是个好东西，Geek嘛，谁愿意拿着鼠标改格式，但要注意编辑文章不要用可视化视图</em></p>
</li>
<li><p>Crayon Syntax Highlighter<br><em>代码格式化插件，安装后文章编辑器多了个crayon标签，把代码选择然后点标签，你就会用了</em></p>
</li>
</ul>
<h2 id="解决插件或主题更新-安装失败的问题"><a href="#解决插件或主题更新-安装失败的问题" class="headerlink" title="解决插件或主题更新/安装失败的问题"></a>解决插件或主题更新/安装失败的问题</h2><ul>
<li>方法1</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># www目录及文件所有者设置为你apache的用户和组</span></span><br><span class="line">sudo chown -R apache:apache /var/www/</span><br><span class="line"><span class="comment"># 如果你改过wordpress里文件的权限，最好改回来</span></span><br><span class="line">find <span class="variable">$path</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> chmod 644 &#123;&#125; \;  <span class="comment">#设置文件权限为644</span></span><br><span class="line">find <span class="variable">$path</span> -<span class="built_in">type</span> d -<span class="built_in">exec</span> chmod 755 &#123;&#125; \;  <span class="comment">#设置目录权限为755</span></span><br><span class="line"><span class="comment">#PS: $path 处填你的wordpress路径</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方法2 (PS:不推荐)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接简单粗暴改权限</span></span><br><span class="line">sudo chmod -R 777 /var/www/html/wp-content/</span><br><span class="line"><span class="comment"># 更新完成后再改回来</span></span><br><span class="line">sudo chmod -R 751 /var/www/html/wp-content/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>闲扯</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
</search>
